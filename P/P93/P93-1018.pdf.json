{"sections":[{"title":"PARALLEL MULTIPLE CONTEXT-FREE GRAMMARS, FINITE-STATE TRANSLATION SYSTEMS, AND POLYNOMIAL-TIME RECOGNIZABLE SUBCLASSES OF LEXICAL-FUNCTIONAL GRAMMARS Hiroyuki Seki","paragraphs":["tt"]},{"title":"Ryuichi Nakanishi t Yuichi Kaji t Sachiko Ando t Tadao Kasami $t","paragraphs":["t Department of Information and Computer Sciences, Faculty of Engineering Science, Osaka University 1-1 Machikaneyama, Toyonaka, Osaka 560, Japan",":~ Graduate School of Information Science, Advanced Institute of Science and Technology, Nara 8916-5 Takayama, Ikoma, Nara 630-01, Japan","Internet: seki@ics.es.osaka-u.ac.jp"]},{"title":"Abstract","paragraphs":["A number of grammatical formalisms were introduced to define the syntax of natural languages. Among them are parallel multiple context-free grammars (pmcfg's) and lexical-functional grammars (lfg's). Pmcfg's and their subclass called multiple context-free grammars (mcfg's) are natural extensions of cfg's, and pmcfg's are known to be recognizable in polynomial time. Some subclasses of lfg's have been proposed, but they were shown to generate an AlP-complete language. Finite state translation systems (fts') were introduced as a computational model of transformational grammars. In this paper, three subclasses of lfg's called nc-lfg's, dc-lfg's and fc-lfg's are introduced and the generative capacities of the above mentioned grammatical formalisms are in-vestigated. First, we show that the generative capacity of fts' is equal to that of nc-lfg's. As relations among subclasses of those formalisms, it is shown that the generative capacities of deterministic fts', dc-lfg's, and pmcfg's are equal to each other, and the generative capacity of fc-lfg's is equal to that of mcfg's. It is also shown that at least one Af79-complete language is generated by fts'. Consequently, deterministic fts', dc-lfg's and fc-lfg's can be recognized in polynomial time. However, fts' (and nc-lfg's) cannot, if P ¢ AfT 9. 1 Introduction A number of grammatical formalisms such as lexical-functional grammars (Kaplan 1982), head grammars (Pollard 1984) and tree adjoining"]},{"title":"grammars (Joshi 1975)(Vijay-Shanker 1987) were","paragraphs":["introduced to define the syntax of natural languages. On the other hand, there has been much effort to propose well-defined computational models of transformational grammars. One of these is the one to extend devices which operate on strings, such as generalized sequential machines (gsm's) to devices which operate on trees. It is fundamentally significant to clarify the generative capacities of such grammars and devices."]},{"title":"Parallel multiple context-free grammars (pm- cfg's)","paragraphs":["and"]},{"title":"multiple context-free grammars (mcfg's)","paragraphs":["were introduced in (Kasami 1988a)(Seki 1991) as natural extensions of cfg's. The subsystem of"]},{"title":"lin- ear context-free rewriting systems (Icfrs')","paragraphs":["(Vijay-Shanker 1987) which deals with only strings is the same formalism as mcfg's. The class of cfl's is properly included in the class of languages generated by pmcfg's, which in turn is properly included in the one generated by mcfg's. The class of languages generated by pmcfg's is properly included in that of context-sensitive languages (Kasami 1988a). Pmcfg's have been shown to be recognized in polynomial time (Kasami 1988b)(Seki 1991)."]},{"title":"A tree transducer","paragraphs":["(Rounds 1969) takes a tree as an input, starts from the initial state with its head scanning the root node of an input. According to the current state and the label of the scanned node, it transforms an input tree into an output tree in a top-down way. A"]},{"title":"finite state translation system (fts)","paragraphs":["is a tree transducer with its input domain being the set of derivation trees of a cfg (Rounds 1969)(Thatcher 1967). A number of equivalence relations between the classes of yield languages generated by fts' and other computational models have been established (Engelfriet 1991)(Engelfriet 1980)(Weir 1992). Especially, it has been shown that the class of yield languages generated by finite-copying fts' equals to the class of languages generated by lcfrs' (Weir 1992), hence by mcfg's.","In"]},{"title":"lexical-functional grammars (Ifg's)","paragraphs":["(Kaplan 1982), associated with each node v of a derivation tree is a finite set F of pairs of attribute names and their values. F is called the f-"]},{"title":"structure","paragraphs":["of v. An lfg G consists of a cfg Go called the"]},{"title":"underlying cfg","paragraphs":["of G and a finite set Pfs of equations called"]},{"title":"functional schemata","paragraphs":["which specify constraints between the f-structures of nodes in a derivation tree. Functional schemata are attached to symbols in productions of Go. It has been shown in (Nakanishi 1992) that the class of languages generated by lfg's is equal to that of re-130 cursively enumerable languages even though the underlying cfg's are restricted to regular grammars. In (Gazdar 1985)(Kaplan 1982)(Nishino 1991), subclasses of lfg's were proposed in order to guarantee the recursiveness (and/or the efficient recognition) of languages generated by lfg's. However, these classes were shown to generate an A/P-complete language (Nakanishi 1992).","In this paper, three subclasses of lfg's called"]},{"title":"nc-lfg's, dc-lfg's","paragraphs":["and"]},{"title":"fc-lfg's","paragraphs":["are proposed, two of which can be recognized in polynomial time. Moreover, this paper clarifies the relations among the generative capacities of pmcfg's, fts' and these subclasses of lfg's.","In nc-lfg's, a functional schema either specifies the vMue of a specific attribute, say"]},{"title":"atr,","paragraphs":["immediately"]},{"title":"(Tart = val)","paragraphs":["or specifies that the value of a specific attribute of a node v is equal to the whole f-structure of a child node of"]},{"title":"v (Tatr =l).","paragraphs":["An nc-lfg is called a"]},{"title":"dc-lfg","paragraphs":["if each pair of rules P] : A --~ aa and P2 : A --~ a2 whose left-hand sides are the same is inconsistent in the sense that there exists no f-structure that locally satisfies both of the functional schemata of Pl and those of p2. Intuitively, in a dc-lfg G, for each pair (tl, t2) of derivation trees in G, if the f-structure and nonterminal of the root of tl are the same as those of t2, then t] and t2 derive the same terminal string.","Let G be an nc-lfg. A multiset M of nonterminals of G is called an"]},{"title":"SPN multiset","paragraphs":["in G if the following condition holds: Let M = {{A1,A2,'..,An}} be a multiset of nonterminals where different"]},{"title":"Ai's","paragraphs":["are not always distinct. There exist a derivation tree t and a subset of nodes"]},{"title":"V = {v],v2,...,v,~}","paragraphs":["of t such that the label ofvi is"]},{"title":"Ai","paragraphs":["(1 < i < n) and the f-structures of"]},{"title":"vi's","paragraphs":["are the same with each other by functional schemata of G. If the number of SPN multisets in G is finite, then G is called an"]},{"title":"fc-lfg.","paragraphs":["Our main result is that the generative capacity of nc-lfg's is equal to that of fts'. As relations among proper subclasses of the above mentioned formalisms, it is shown that the generative capacities of dc-lfg's, deterministic fts' and pmcfg's are equal to each other, and the generative capacity of fc-lfg's is equal to that of mcfg's. It is also shown that a (nondeterministic) fts generates an Af:P-complete language."]},{"title":"2 Parallel Multiple Context-Free Grammars A parallel multiple context-free grammar (pmcfg)","paragraphs":["is defined to be a 5-tuple"]},{"title":"G = ( N, T, F, P, S)","paragraphs":["which satisfies the following conditions (G1) through (Gh) (Kasami 1988a)(Seki 1991). (G1) N is a finite set of"]},{"title":"nonterminal symbols. A","paragraphs":["positive integer"]},{"title":"d(A)","paragraphs":["is given for each nonterminal symbol A • N. (G2) T is a finite set of"]},{"title":"terminal symbols","paragraphs":["which is disjoint with N. (G3) F is a finite set of"]},{"title":"functions","paragraphs":["satisfying the following conditions. For a positive integer d, let"]},{"title":"(T*) a","paragraphs":["denote the set of all the d-tuples of strings over T. For each f • F with arity"]},{"title":"a(f),","paragraphs":["positive integers"]},{"title":"r(f)","paragraphs":["and"]},{"title":"di(f)","paragraphs":["(1 _<"]},{"title":"i < a(f))","paragraphs":["are given, and f is a total function from"]},{"title":"(T*) dl(:) x (T*) d2(f) ×... x (T*)da(f) (1)","paragraphs":["to"]},{"title":"I","paragraphs":["T*)'(:) which satisfies the following condition fl). Let","• i = (zil, zi2,..., zid,(S)) denote the ith argument of f for 1 < i <"]},{"title":"a(f).","paragraphs":["(fl) For 1 < h <"]},{"title":"r(f),","paragraphs":["the hth component of f, denoted by"]},{"title":"f[h],","paragraphs":["is defined as;"]},{"title":"f[h]","paragraphs":["[Xl, f~2,-\" -, Xa(f)] = OCh,OX#(h,O)rl(h,o)Oth,1"]},{"title":"• .'ah,nh_lXu(h,nh_l)n(h,nh_Dah,n~","paragraphs":["(2.1) where"]},{"title":"ah,k • T*","paragraphs":["for"]},{"title":"0 < k <_ nh, 1 < #(h,j) <_ a(f)","paragraphs":["and"]},{"title":"1 <_ ~(h,j) <_ dt~(h,j)(f) for O ~ j ~_ nh --1.","paragraphs":["(G4) P is a finite set of"]},{"title":"productions","paragraphs":["of the form"]},{"title":"A ---* f[A1,A2,...,Aa(y)]","paragraphs":["where"]},{"title":"A, Aa,A2,...,Aa(/) • N, f • F,","paragraphs":["r(f) ="]},{"title":"d(A)","paragraphs":["and"]},{"title":"di(f) = d(Ai)","paragraphs":["(1"]},{"title":"< i < a(f)).","paragraphs":["Ifa(f) = 0, i.e., f • (T*) r(f), the production is called a"]},{"title":"terminating production,","paragraphs":["otherwise it is called"]},{"title":"a nonterminating production.","paragraphs":["(Gh) S • N is the"]},{"title":"initial symbol,","paragraphs":["and"]},{"title":"d(S) = 1.","paragraphs":["If all the functions of a pmcfg G satisfy the following Right Linearity condition, then G is called a"]},{"title":"multiple context-free grammar (mcfg).","paragraphs":["[Right Linearity ] For each"]},{"title":"xlj,","paragraphs":["the total number of occurrences of"]},{"title":"xij","paragraphs":["in the right-hand sides of (2.1) from h = 1 through r(f) is at most one.","The language generated by a pmcfg G = (N, T, F, P, S) is defined as follows. For A • N, let us define"]},{"title":"LG(A) as","paragraphs":["the smallest set satisfying the following two conditions:","(L1) If a terminating production A --* & is in P, then ~ •"]},{"title":"LG(A).","paragraphs":["(L2) If"]},{"title":"A --~ f[A1,A2,...,Aa(y)] • P","paragraphs":["and"]},{"title":"(~i • LG(Ai) ~1 < i < a(f)),","paragraphs":["then"]},{"title":"f[~1,~2,''', O~a(f)] • LG(A) .- 131","paragraphs":["Define L(G) a=La(S). L(G) is called the parallel multiple context-free language (pmcfl) generated by G. If G is an mcfg, L(G) is called the multiple context-free language (mcfl) generated by G. Example 2.1(Kasami 1988a): Let GEX1 ~---"]},{"title":"(N,","paragraphs":["T,F,P,S),N = {S}, T = {a},F = {f~,f},P = {r] : S --~ fa, ro : S --* f[S]}, where f~ = a,f[(x)] = xx. GExl is a pmcfg but is not an mcfg since the function f does not satisfy Right Linearity. The language generated by GEx~ is {a 2\" In > 0}, which cannot be generated by any mcfg (see Lemma 6 of (Kasami 1988a)). The empty string is denoted by ¢. Example 2.2: Let GEx2 = (N, T, F, P, S) be a pmcfg, where N = {S,A), T = {a,b}, F ="]},{"title":"{g[(Xl,X2) ] ---- XlX2, fa[(Xl,X2)] -~ (xla, x2a), = y, = and, P=","paragraphs":["- --* {Po : S g[A], Pl : A ---* f~[A], Pz : A --* fb[A], P3 : A ---* f~}. Note that GEx2 is an mcfg. L (GEx2) = {ww I w E {a, b)*}. Lamina 2.1(Kasami 1988b)(Seki 1991): Let C be a pmcfg. For a given string w, it is decidable whether w E L (G) or not in time polynomial of I~1, where"]},{"title":"I~1","paragraphs":["denotes the length of w."]},{"title":"3 Finite State Translation Systems","paragraphs":["A set ~ of symbols is a ranked alphabet if, for each cr E ~, a unique non-negative number p(c~) is associated, p(cr) is the rank of ~. For a set X, we define free algebra T~.(X) as the smallest set such that; * T~: (X) includes X. • If p(~) = 0 for cr E ~, then ~ E T~(X). • If p(o') = n (> 1) for a E, ~ and tl,..., E 7-~.(X), then t-= or(t1,.., tn) E T~(X). t~ is called the root symbol, or shortly, the root of t. Hereafter, a term in 7\"~ (X) is also called a tree, and we use terminology of trees such as subtree, node and so on.","Let G - (N, T, P, S) be a context-free grammar (cfg) where N, T, P and S are a set of nonterminal symbols, a set of terminal symbols, a set of productions and the initial symbol, respectively. A derivation tree in cfg G is a term defined as follows. (T1) Every a E T is a derivation tree in G.","(T2) Assume that there are a production p : A ---* X1...X,~ (A E N, XI,...,Xn E NUT) in P and n derivation trees tl,...t,~ whose roots are labeled with Pl,..., pn, respectively, and • ifXi E N, then pl is a production Xi --~ \" \",","whose left-hand side is Xi, and • ifXiET, thenpi=ti=Xi. Then p(tl,..., t,~) is a derivation tree in G. (T3) There are no other derivation trees. Let T~(G) be the set of derivation trees in G, and 7¢s(G) C 7¢(G) be the set of derivation trees whose root is labeled with a production of which left-hand side is the initial symbol S. Clearly, T~s(G) C_ T~(¢) holds. Remark that 7¢s(G) is a multi-sorted algebra, where the nonterminals are sorts, and the terminals and the labels of productions are operators.","A tree transducer (Rounds 1969) defines a mapping from trees to trees. Since we are mainly interested in the string language generated by a tree transducer, a \"tree-to-string\" version of transducer defined in (Engelfriet 1980) is used in this paper. For sets Q and X, let"]},{"title":"Q[X]~{q[x] l q e Q,x e X).","paragraphs":["A tree-to-string transducer (yT-transducer or simply transducer) is defined to be a 5-tuple M = (Q, ~., A, q0, R) where (1) Q is a finite set of states, (2) ~ is an input ranked alphabet, (3) A is an output alphabet, (4) q0 E Q is the initial state, and (5) R is a finite set of rules of the form q[c~(xl,..., xn)] --* v where q e Q, e = and v e (Z uQ[{xl, ..., xn}])*. If any different rules in R have different left-hand sides, then M is called deterministic (Engelfriet 1980).","A configuration of a yT-transducer is an element in (A U Q[T~.(¢)])*. Derivation of M is defined as follows. Let t ----- alq[a(tl,..., tn)]a2 be a configuration where al, a2 E (A U Q[T~.(¢)])*, q E Q, ~ E ~, p(a) = n and Q,...,tn E T~.(¢). Assume that there is a rule q[cr(xl,..., Xn)] --* V in R. Let t ~ be obtained from v by substituting t],..., tn for xl,..., xn, respectively, then we define t ~M ultra2 • Let ::~ be the reflexive and transitive closure of :=~. If t =¢.~ t ~, then we say t ~ is derived from t. If there is no w E A* such that t ~ w, then we say no output is derived from t.","A tree-to-string finite state translation system (yT-fts or fts) is defined by a yT-transducer M and a cfg G, written as (M,G) (Rounds 1969)(Thatcher 1967).","We define yL(M,G), called the yield language generated by yT-fts (M, G), as"]},{"title":"yL(M,a)~{w e A* 13t e ~s(a),qo[t] ~*M w}","paragraphs":["where A is an output alphabet and q0 is the initial state of M. An fts is called deterministic (Engelfriet 1980) if the transducer M is deterministic. 132","Engelfriet introduced a subclass of fts' called finite-copying fts' as follows (Engelfriet 1980): Let (M,G) be an fts with output alphabet A and initial state q0, t be a derivation tree in G and t ~ be a subtree of t. Assume that there is a derivation a : q0[t] =~ w. Now, delete from this derivation a all the derivation steps which operates on t t. This leads to the following new derivation which keeps t ~ untouched;","! *",": q0[t] wherewi• A* forl<i<n+l.","The state sequence of t ! in derivation a is defined to be (qi~,...,qi.). Derivation a has copying-bound k if, for every subtree of t, the length of its state sequence is at most k. An fts (M, G) is a finite-copying, if there is a constant k and for each w • yL(M, G), there is a derivation tree t in G and a derivation q0[t] ~ w with copying-bound k. It is known that the determinism does not weaken the generative capacity of finite-copying fts' (Engelfriet 1980).","We note that an fts (M, G) can be considered to be a model of a transformational grammar: A deep-structure of a sentence is represented by a derivation tree of G, and M can be considered to transform the deep-structure into a sentence (or its surface structure). 4 Subclasses of Lexical-functional grammars A simple subclass of lfg's, called r-lfg's, is introduced in (Nishino 1992), which is shown to generate all the recursively enumerable languages (Nakanishi 1992). Here, we define a nondeterministic copying Ifg (nc-lfg) as a proper subclass of r-lfg's. An nc-lfg is defined to be a 6-tuple G = (N, T, P, S, N~t~, A~tr~) where: (1) N is a finite set of nonterminal symbols, (2) T is a finite set of terminal symbols, and (3) P is a finite set of annotated productions. Sometimes, a nonterminal symbol, a terminal symbol and an annotated production are abbreviated as a nonterminal, a terminal and a production, respectively, i 4) S • N is the initial symbol, (5) Nat~ is a finite set of at-tributes, and (6) A~tm is a finite set of atoms.","An equation of the form T atr =~ (atr • Nat,) is called an S (structure synthesizing) schema, and an equation of the form T atr .-= val (atr • Natr, val • A~tm) is called a V (immediate value) schema. A functional schema is either an S schema or a V schema.","Each production p • P has the following form: p :A -~ B1 B2 ... Bq, (4.2) Ev ESl Es2 \"\" Esq where A • N, B1,B2,.\",Bq • NUT. Ev is a finite set of V schemata and Esj (1 _< j <_ q) is a singleton of an S schema. A --~ B1B2\".. Bq in (4.2) is called the underlying production of p. Let P0 be the set of all the underlying productions of P. Cfg Go = (N, T, P0, S) is called the underlying"]},{"title":"c/g o/ C.","paragraphs":["An f-structure of G is recursively defined as a set F -=- {(atrl, call), (atr2, val2>,..., latrk, valk)} where atr], atr2,..., and atrk are distinct at-tributes, and each of vail, val2,.\" \", and valk is an atom or an f-structure. We say that vali (1 < i < k) is the value of atri in F and write F.atri -= vali.","For a cfg G' = ( N ~, T', P~, S~), derivation relations in G ~, denoted by A ::~a' a and A =~* G ~","(A • N',a • (N' u T')*) are defined in the usual way.","Suppose Go = i N, T, P0, S) is the underlying cfg of an nc-lfg G = (N, T, P, S, Nat,, Aa,m). Let t be a derivation tree in Go. (In 4.,7. and 8., the label of a leaf of a derivation tree is allowed to be a nonterminal.) Every internal node v in t has an f-structure, which is called the f-structure of v and written as Fv. If an underlying production P0 :A ~ BI\".Bq • P0 is applied at v, then v is labeled with either P0 itself, or p (• P) of which P0 is the underlying production, if necessary. Let vi be the ith child ofv (1 < i < q). We define the values of both sides of a functional schema attached to the symbol in p (on v) as follows: * the value of T atr(atr • Nat,) is Fv.atr, • the value of + in an S schema is Fv~ if the S schema is attached to the i(1 _< i _< q)th symbol in the right-hand side of p, and • the value of atom atm in a V schema is arm itself. We say that v satisfies functional schemata if for each functional schema lls = rib of p, the values of lls and r/s on v are defined and equals with each other. In this case, it is also said that Fv locally satisfies the functional schemata of p. NOTE : Because the meaning of a V schema is in-dependent of the position where it is annotated, V schemata are attached to the left-hand side in this paper.","For a nonterminal A E N and a sentential form a E iN t_J T)*, let t be a derivation tree of a derivation A =** Go a. If all internal nodes in t satisfy functional schemata, then a is said to be derived from A and written as A =~* . a a In this case, the tree t is called a derivation tree of A:=~* G a. We also call t a derivation tree (of a) in G simply.","The language generated by an nc-lfg G, denoted by LIG), is defined as L(G) = {w e T*[S ~* w I. G NOTE : In the definition of nc-lfg, even if \"Esj (1 < j < q) is a'singleton of an S schema\" is replaced with"]},{"title":"133","paragraphs":["Fcount :[COunt :[COunt : e ]]~ S a b c ~otmt :[count : eli"]},{"title":"%°","paragraphs":["Figure 1: A derivation tree of aabbccdd \"Esj (1 < j < q) is either a singleton of an S schema or an empty set\", the generative capacity of nc-lfg is not changed. Example 4.1: Let G~xs = (N, T, P, S, Nat,, A~tm) be an nc-lfg where N = {S,A,B}, T = {a, b,c, d}, Nat~ = {count}, Aatrn = {e}, and productions in P are;"]},{"title":"pll : s {T coA, t=l _ {T couBt=l} '","paragraphs":["P12 : A ~ a { T couAt = ~ } b, p~ : B -~ ~"]},{"title":"iT couBtM} d,","paragraphs":["P14 : {T coAt"]},{"title":"e} ~ ~ P\" : {T eou~t= e} -~ ~","paragraphs":["The language generated by GExs is L(GExs) = {a'~bncnd n In > 0}. Figure 1 shows a derivation tree of S ~* aabbccdd in GEXS. GEX3 Example 4.2: Let Gsx4 = (N, T, P, S, N,t,, A~tm) be an nc-lfg where g = {S}, T = Ca}, N,t, = {log}, A,tm = {e}, and productions in P are;"]},{"title":": s iT _ {T J=l},","paragraphs":["p22"]},{"title":": { T loS= e }","paragraphs":["~ a. The language generated by GEX4 is L(GEx4) ="]},{"title":"{a2\" ]n >","paragraphs":["0}. Example 4.3: Let GEX5 = (N, T, P, S, Na~,, Aatm) be an nc-lfg where N = {S,S',A,B}, T = {the, woman, men, and, drinks, smoke, respectively}, N.t, = {hum, list}, A.tm = {sg,pl, nil}, and productions in P are; P3o : S --* S t respectively {T list =l} P31 : P32 : p33 : p34 : P35 : S~---* the woman and A drinks and B","{Tnum=sg} {Tlist=l} {Tlist=l}' S~--* the men and A smoke and 13","{Tnum=pl} {Tlist=~} {Tlist=~}'","A ~ the woman and A","{ T num= sg} { r list =.[}'","A ~ the men and A","{ T num = pl } {T list =~}'","A ~ the woman T num= sg T list = nil ) p3~ : A ---. the men T num = pl T list = nil ) pz7 : B --* drinks and B {T n~,m = ~g} {T list"]},{"title":"=~}'","paragraphs":["P38 : B --~ smoke and B { T hum = pl }"]},{"title":"iT","paragraphs":["list =l}' p39 : B ---. drinks","{ T num = sg T list = nil )","p310 : B ---+ smoke T hum = pl T list = nil ) G~xs generates \"respectively\" sentences such as \"the woman and the men drinks and smoke respectively\".","For a set X of functional schemata, X is consistent iff neither the following (1) nor (2) holds.","(1) {T atr = Call, T atr = val2 } c X for some atr E Na,, and some vall,val2 E Aatm such that call # val2.","(2) iT atr = val, T atr =~} _C X for some atr E Nat~ and some val E Aatm. Productions pl,''',Pn are consistent iff Ul<i<_n E (0 is consistent where E (/) is the set of functional schemata of Pl. If productions are not consistent then they are called inconsistent.","An nc-lfg G is called a deterministically copying Ifg (dc-lfg), if any two productions A --+ al and A --+ a2 whoes left-hand sides are the same are inconsistent.","Suppose G = (N,T, P, S, Nat,, Aatm) is an nc-lfg. Let {{el,e2,-'.,en}} denote the multiset which consists of elements el, e2,\" • •, en that are not necessarily distinct. An SPN (SubPhrase Nonterminal) multiset in G is recursively defined as the following 1 through 3: 1. {{S}} is an SPN multiset.","2. Suppose that {{A1, A2,'\", Ah}} (A1, A2,'\" \", Ah E N) is an SPN multiset. Let A1 --~ al, 134 • .', Ah ~ O:h be consistent productions. For each atr E Nat,, let MS~,~ be the multiset consisting of all the nonterminals which appear in al,''',ah and have an S schema T atr --l. If MSat~ is not empty, then MS~t~ is also an SPN multiset. 3. There is no other SPN multiset. An nc-lfg such that the number of SPN multisets in G is finite is called a finite-copying lfg (fc-lfg). Example 4.4: Consider GEX s in Example 4.1. Productions /912 and P14 are inconsistent with each other and so are P13 and Ply. SPN multisets in GEX3 are {{S}} and {{A,B)). Hence GEXS is a dc-lfg and is an fc-lfg. GEX5 is also a dc-lfg and is an fc-lfg by the similar reason. Similarly, GEX4 in Example 4.2 is a dc-lfg. SPN multisets in C~x~ are {{S}}, {{S, S}), {{S, S, S, S)}, .... Hence GEx4 is not an fc-lfg. NOTE : L (GExs) is generated by a tree adjoining grammar. Suppose that a sentence has three or more phrases which have co-occurrence relation like the one between the subject phrase and the verb phrase in the \"respectively\" sentence. Tree adjoining grammars can not generate such syntax while fc-lfg's or dc-lfg's can, although the authors do not know a natural language which has such syntax so far.","By Lemma 2.1 and Theorem 8.1, fc-lfg's are polynomial-time recognizable. Hence, it is desirable that whether a given lfg G is an fc-lfg or not is decidable. Fortunately, it is decidable by the following lemma. Lemma 4.1: For a given nc-lfg G, it is decidable whether the number of SPN multisets in G is finite or infinite. Proof. The problem can be reduced to the boundedness problem of Petri nets, which is known to be decidable (Peterson 1981)."]},{"title":"5 Overview of the Results","paragraphs":["Let ~'nc-lfg, ~'dc-lfg and ~-'fc-lfg denote the classes of languages generated by nc-lfg's, dc-lfg's and fc-lfg's, respectively, and let y~#,, Y~.d-fts and YElc-#s denote the classes of yield languages generated by fts', deterministic fts' and finite-copying fts', respectively. Let l:vmcla and £:mcfg be the classes of languages generated by pmcfg's and mcfg's, respectively. Also let £:ta9 be the class of language generated by tree adjoining grammars.","Inclusion relations among these classes of languages are summarized in Figure 2. An equivalence relation *1 is shown in (Weir 1992). Relations *2 are new results which we prove in this paper. We also note that all the inclusion relations are proper; indeed,"]},{"title":"0 l","paragraphs":["{ala2a3a41n >_ E D - E a a2 n n _ ..... a2m_la2m [ n > E C - D for m > 3, (by (Vijay-Shanker 1987).) {a 2\" In > 0} e S - C, (by (Kasami 1988a)(Seki 1991).) A relation B~ A is shown in (Engelfriet 1980). By Lemma 2.1, all languages in the region enclosed with the bold line are recognizable in polynomial time. On the other hand, it is shown in this paper that Unary-3SAT, which is known to be A/P-complete (Nakanishi 1992), is in A. Hence, if ~ ~ A/~, then Unary-3SAT E A - B and the languages generated by fts' (or equivalently, nc-lfg's) are not recognizable in polynomial time in general."]},{"title":"6 Generative Capacity of fts'","paragraphs":["6.1 Deterministic fts' Here, the proof of an inclusion relation yEd-#s C_ /:vmc/g is sketched.","Let (M, G) be a deterministic yT-fts where M = (Q,~,A,ql,R) and G = (N,T,P,S)., We assume that Q = {ql,---,ql}, T = {al,... an} and P = {Pl,...,Pm}. Since the input for M is the set of derivation trees of G, we assume that","= {Pl,.-. ,Pro, al,..., an} without loss of generality.","We will construct a pmcfg G I -=- ( N ~, T ~, F', P', S') such that yL(M, G) ---- L(G') N A*. Since /:pmc/g is closed under the intersection with a regular set (Kasami 1988a)(Seki 1991), it follows that yL(U, G) E £'pmclg. Let T' = A td {b} where b is a newly introduced symbol and let N' = {S',RI,...,Rm, AI,...,An} where d(Ri) = d(Aj) = t for 1 < i <_ m and 1 < j <_ n. Productions and functions of G ~ will be constructed to have the following property. -- A y~/t, *=2 ~,~c-lfg"]},{"title":"--B ~ £?~:~ .__2 y£~_:,, .__2 £~_,:~ --c oL- £.~:~ *j y£:~-:. *=2 :-.:o-,:, __ D (2) --E--","paragraphs":["£cr~ l:,a~ -- Figure 2: Inclusion relations between classes of languages. (1) : The class of language generated by lcfrs' is equal to C. (2) : The class of language generated by head grammars is equal to D."]},{"title":"135","paragraphs":["Property 6.1: There is (a~,... ,a~) e LG,(Rh) (resp. LG,(Ah)) such that each of a,,,...,as~ does not contain b, and every remaining at,,..., a,~ contains b if and only if there is a derivation tree t of G such that the root is Ph (resp."]},{"title":"ah)","paragraphs":["and"]},{"title":"{","paragraphs":["qs, [t] ==>~ c~s~ (1 < j < u) no output is derived from q,~[t] (1 _< j < v)."]},{"title":"D","paragraphs":["The basic idea is to simulate the move of tree transducer M which is scanning a symbol Ph (resp. ah) with state ql by the ith component of the nonterminal Rh (resp. Ah) of pmcfg G I. Dur-ing the move of M, it may happen that no rule is defined for a current configuration and hence no output will be derived• The symbol b is introduced to represent such an undefined move explicitly.","We define RS(X) (X E N tO T) as follows. {Rh [the left-hand side of Ph is X} RS(X) = if X E N { Ah } if X = ah E T. Productions and functions are defined as follows. Step 1: For each production Ph : Iio --'* Y~ \" \" Yk ( Yo ~ N , Y= E NtoT for 1 <u< k) of cfg G, construct nonterminating productions","Rh -+ [&,..., zk] for every Z~ E RS(Y~) (1 < u < k), where fph is defined as follows: For 1 < i < g,","• if the transducer M has no rule whose left-hand side is qi~ah(Xl,..., xk)], then (6.a) h •'' • if M has a rule -+ • \" ai,n,-lq~(i,,~,_D[x~4~,,,_D] a~,n,, then"]},{"title":"fp[i][x","paragraphs":[".. , 5:k] __a ei,ox~,(i,o),7(i,o)ei,] (6.4) h ~ • • \" \" Ot-,ni--lglz\",ni--l'rl'i,ni--l'Ogi,ni~, (1, ) [ ) where = (1 <, < k). (Since M is deterministic, there exists at most one rule whose left-hand side is qi~h('\" \")] and hence the above construction is well defined•)","Step 2: For each ah E T, construct a terminating production"]},{"title":"Ah -\"+ fah","paragraphs":["where f~h is defined as follows: For 1 < i < i, • if M has no rule whose left-hand side is"]},{"title":"qi[ah],","paragraphs":["then"]},{"title":"~a~[i] ~--b.","paragraphs":["• ifM has a rule qi[ah] --+ hi, then f[~&ai.","Step 3: For each Rh E RS(S), construct S' --+ /fi~st[Rh] where /fi,st[(x], ..., xl)]~x]. Intuitively, the right-hand side of this production corresponds to the initial configuration, that is, M is in the initial state ql and scanning the root symbol Ph of a derivation tree, where the left-hand side of Ph is the initial symbol S.","The pmcfg G I constructed above satisfies Property 6.1. Its proof is found in (Kaji 1992) and omitted in this paper. By Property 6.1, we obtain the following lemma. Lemma 6.1: yl:d_f, s C ff.pmcfg."]},{"title":"0","paragraphs":["The reverse inclusion relation l:p,~c/g C_ Y~.d-B, can be shown in a similar way, and the following theorem holds• Theorem 6.2: yf-.d./,s : E-pmcfg•"]},{"title":"0 6.2 Nondeterministic fts'","paragraphs":["In this section, the generative capacity of nondeterministic yT-fts' is investigated, from the viewpoint of computational complexity• We have al-ready shown that"]},{"title":"Y~.d-~s : ~.pmcfg,","paragraphs":["and hence every language in this class can be recognized in time polynomial of the length of an input string• Our result here is: there is a nondeterministic fts that generates an A/'~-complete language• In the following, a language called Unary-3SAT, which is ArT'-complete (Nakanishi 1992), is considered, and then it is shown to belong to yL:/,a.","A Unary-3CNF is a (nonempty) 3CNF in which the subscripts of variables are represented in unary. A positive literal xi in a 3CNF is represented by 1i$ in a Unary-3CNF. Similarly , a negative literal --xl is represented by 12#. For example, a 3CNF (xi v x2 v ~xa) A (xa V ~x] v ~x~) is represented by a Unary-3CNF 15115111# A I1151#Ii#. Unary-3SAT is the set of all satisfiable Unary-3CNF's.","Next, we construct a nondeterministic yT-fts (M, G) that generates Unary-3SAT. Define a cfg G = (N,T,P, S) where N = {S,T,F}, T = {e} and the productions in P are as follows: rss : S--+S rsT : S--+ T rsF : S-+F \"rTT : T--+ T rTF : T--+ F. ?'Te : T--+ e rFT : F-+T ?'FF : F--+ F rFe : F-+ e 136 Let M = (Q, E, A, qo, R) where"]},{"title":"q = {qo,q~,qt, qa},","paragraphs":["~ {rSS,... ,rFe},"]},{"title":"z~ = {L,̂$,#}.","paragraphs":["Since there are many rules in R, we will use an abbreviated notation. For example, following four rules"]},{"title":"qaIrTelXll-~","paragraphs":["15,"]},{"title":"q~[rTe(X)] ~ 1#","paragraphs":["qdrF~tX)] +"]},{"title":"15,","paragraphs":["qo[rF~(X)] -~ 1# are abbreviated as"]},{"title":"\"q~[rT~(X)] = q~[rF~(X)] --*","paragraphs":["15 or 1#'. By using this notation, the rules in R are defined as follows. q0[r~(~)] -~ qo[~] A q0[x] qo[r~s(~)] -~ q&] q0[~sr(~)] = q0[~sv(~)] = q~[r~r(~)]"]},{"title":"= q~[rSF(X)] --~ qdx]q~[x]q~[x]","paragraphs":["or"]},{"title":"q~[x]qt[x]qa[x] or qa[x]qa[x]qt[x] q,[r**(x)] = q&.~(~)]","paragraphs":["-* lq,[~] or 1~ q,[rr,(~)] ~ 1,","q,[r~,(~)] = q,[r~(~)] -* lq,[x] or"]},{"title":"1# q,[rF~(x)]---+ 1#","paragraphs":["qo[rr~(~)] = qo[rr~(~)] = qoirF~(~)]"]},{"title":"= qa[rFF(X)] lqa[X] or 15 or 1#","paragraphs":["qo[r~c(x)] = q.[r~(~)] ++ 1, or 1#. The readers can easily verify that this"]},{"title":"yT-fts","paragraphs":["generates Unary-3SAT. 7 Equivalence of"]},{"title":"f-'nc-lfg","paragraphs":["and"]},{"title":"Y£fts","paragraphs":["First, we show £,~c-lfg C_"]},{"title":"Y£qt~.","paragraphs":["For a given nc-lfg G = (N, T, P, S, Nat,, A~m), an equivalent fts (M, G I) is constructed in the following way.","Let t be a derivation tree in lfg G and the f-structure of the root node of t be F ="]},{"title":"{(atrl,F1),..., (atr,~,Fn)}. F","paragraphs":["is represented by a derivation tree r = p,p(Tl,'-., rn) in G', where ri (1 < i < n) is a derivation tree in G' which represents"]},{"title":"Fi","paragraphs":["recursively. And"]},{"title":"sp","paragraphs":["is a set of productions such that F locally satisfies the functional schemata of all productions in"]},{"title":"sp. M","paragraphs":["transforms r into the yield of t, i.e., the terminal string obtalned by concatenating the labels of leaves, in a top-down way. [TRANS 7.11 Let N = {A1,'\",Am},"]},{"title":"S = A1","paragraphs":["and Nat, = {atrl,-..,"]},{"title":"atr,~}.","paragraphs":["Define"]},{"title":"SP as","paragraphs":["the set of all consistent subsets of P. Step 1: G' = (N',{d},P',S'), where N' ="]},{"title":"{S,plsp e SP}","paragraphs":["U {S'} and P' = {p',p : S,p ---* S'-.. S't u{p;=~... : s' --+ Ss, l,p e sP}"]},{"title":"u{p~,m :~s' -+ deC:_/}.","paragraphs":["For a derivation tree r in G' and a node v ' is applied, the snbtree rooted by the where"]},{"title":"p,p","paragraphs":["ith child of v represents the value of attribute"]},{"title":"atr i.","paragraphs":["Step 2: M = (Q,E,T, ql,R) is defined as follows. Define"]},{"title":"Q = {ql,..., qm}.","paragraphs":["A state qj (1 < j _< m) corresponds to nonterminal A t in N. Define E -- {d} where p(p'.,) = p(p"]},{"title":".... .~) = ' =","paragraphs":["and"]},{"title":"p(d)","paragraphs":["= O. And define R by the following (i) through (iii). (i)"]},{"title":"qj~ .... .,(x)]","paragraphs":["-~ qj[x] (1 _< j < m) belongs to R for each"]},{"title":"sp • SP.","paragraphs":["(ii) Let r be a derivation tree in G '. When plsp is the production applied at the root of r and a state of M is q,o, M chooses a production p whose left-hand side is"]},{"title":"Auo ,","paragraphs":["if exists, in"]},{"title":"sp.","paragraphs":["NOTE : Since productions in"]},{"title":"sp","paragraphs":["are consistent, there is an f-structure, which locally satisfies the functional schemata of all productions in"]},{"title":"sp.","paragraphs":["For each production"]},{"title":"p E sp","paragraphs":["in"]},{"title":"SP","paragraphs":["p : A~o --* a0 A m al ... OtL-1 At, L aL"]},{"title":"Ev {~ atrv~ =~} ... {~ atrvL","paragraphs":["=~} where A~z E N and al E T*(0 < l < L), the following rule belongs to R:"]},{"title":"q#o~tsp(Xl, , *',xn)] -~ \"0q,,[X~,]\"I..-\"L--lq,~[X,~]~. (7.5)","paragraphs":["(iii) No other rule belongs to R.","Next, Y£~s C_ £~c-zf9 is shown. For a given fts (M, G), the following algorithm constructs an nc-lfg G' such that"]},{"title":"L(G') --- yL(M, G).","paragraphs":["[TRANS 7.2] Suppose that a given fts (M, G) is G -- (N, T, P, S) and M -- (Q, E, A, ql, R) where"]},{"title":"Q = {ql,q2,'\",qm}.","paragraphs":["Let n be the maximum length of the right-hand side of a production in P. Define an nc-lfg"]},{"title":"G I = ( N', A, P', S I, N~r, Aatm)","paragraphs":["as follows. Step 1: N'={C[J]IC•N, lgj <m}"]},{"title":"u{aI~l la • T, 1 < j <_ m},","paragraphs":["S' = S [11,"]},{"title":"Nat~ = {atri I1 < i < n} U {rule},","paragraphs":["and"]},{"title":"Aatm = {PIP","paragraphs":["is the label of a production in P}. A derivation tree"]},{"title":"t = p(tl,'\" ,th)","paragraphs":["in G is represented by an f-structure"]},{"title":"{(rule, p),(atrl, El), • \".,(atrh, Fh)}","paragraphs":["of G' where Fi (1 < i < h) is an f-structure which represents the subtree"]},{"title":"ti","paragraphs":["recursively. Each pair of a symbol (either nonterminal or terminal) X of G and a state"]},{"title":"qj","paragraphs":["of M is represented by a single nonterminal X[J] in G'. 137","Step 2: A move when M at state qj reads a symbol p which is the label of a production p : C --+ ..., can be simulated by a production in G ~ whose left-hand side is"]},{"title":"C[J] {T ute = p}\"","paragraphs":["Formally, the set P~ of productions of G I is constructed as follows. (i) Let"]},{"title":"p : C --* X1 \"\" Xh","paragraphs":["be a production in P where"]},{"title":"CE N, Xi E NUT","paragraphs":["(1 <i < h), and let:"]},{"title":"qj[p(x],..., Xh)] --~ ajoq,7,, [z~,,, ]aj,...q,7,zj [X~,,L ' ]O~jL,","paragraphs":["be a rule in R where ~k E A* (0 < k < Lj), q'Tj~ E Q, and"]},{"title":"xvj~ e tXl,'\",Xh}(1","paragraphs":["< l <"]},{"title":"L j).","paragraphs":["Then, the following production belongs to P~: y[r/jl] V[nJLj] C[J] 7...40tjo-~vjl Otjl \"'\" AI~jLj OtjLj\""]},{"title":"{Trute = p) {Tatr , {Tatr j","paragraphs":["(ii) Let"]},{"title":"qj[a] ---* flj","paragraphs":["be a rule in R where a 6 T and flj 6 A*. Then the production"]},{"title":"a[J] --~ flj","paragraphs":["belongs to P'. (iii) No other production belongs to P'.","By TRANS 7.1 and TRANS7.2, the following theorem is obtained. A formal proof is found in (Nakanishi 1993). Theorem 7.1: f~nc-lfg = Y~'fts. Corollary 7.2:"]},{"title":"~'dc-lfg ---- Y~.d-fts. Proof.","paragraphs":["In TRANS 7.1, if G is a dc-lfg, then no"]},{"title":"sp E SP","paragraphs":["contains distinct productions whose left-hand sides are the same and hence the constructed transducer M becomes deterministic by the construction. Conversely, in TRANS 7.2, if M is deterministic, then there exist no consistent productions p~ and p~ in P~ whose left-hand sides are the same and hence the constructed nc-lfg is a dc-lfg. 8 Equivalence of"]},{"title":"~fc-lfg","paragraphs":["and"]},{"title":"£~mcfg","paragraphs":["To prove"]},{"title":"f~fc-lfg C Lmcfg,","paragraphs":["we give an algorithm which translates a given fc-lfg G ="]},{"title":"(N, T, P, S, Nat,, Aatm)","paragraphs":["into an mcfg G I such that L (G') = L (G). [TRANS 8] We explain the algorithm by using the fc-lfg"]},{"title":"GEX3","paragraphs":["in Example 4.1. An mcfg G' = (N', T, F, P', S) is constructed as follows. Step 1: N' ="]},{"title":"(the set of nonterminals which has a one-to-one correspond- ence with the set of SPN multi- sets in G)","paragraphs":["= {(S), (A,B)} (for"]},{"title":"GEx3","paragraphs":["in Example 4.1) P' = ¢, and F =¢.","Step 2: For each SPN multiset M0 = {{A1,A2, • \".,Ak}} of G, consider every tuple"]},{"title":"(pl,P2,","paragraphs":["\"\",Pk) of productions in P whose left-hand sides are"]},{"title":"A1, A2,'\", Ak","paragraphs":["respectively and which are consistent. (Suppose that, if we write an SPN multiset as {{A1, A2,. \", Ak}}, then"]},{"title":"Aj's","paragraphs":["are arranged according to a pre-defined total order < on N, that is,"]},{"title":"A1","paragraphs":["<"]},{"title":"A2 <_ \"'\" <_ Ak","paragraphs":["hold.) For an SPN multiset {{A, B}} in"]},{"title":"GEX3,","paragraphs":["the following two pairs of productions have to be considered:"]},{"title":"b p12 : A ---* a {TcouAt,~","paragraphs":["PI3 : B ~ c B d,"]},{"title":"{Tcount","paragraphs":["--~}"]},{"title":"p14: {Tcoun A = e} pls : {Tc°u B=e}","paragraphs":["For"]},{"title":"(Pl,P2,'\",Pk),","paragraphs":["a production p' and a function f of G' are constructed and added to P' and F, respectively as follows. The multiset M of the nonterminals appearing in the right-hand side of some pj (1 < j < k) are partitioned into multisets M1, M2,\" -., Mh with respect to the S schemata attached to the nonterminals in pj's. That is, (11//1, M2,-\", Mh) are the coarsest partition of M such that for each M,, (1 < u < h), the following condition holds. Each nonterminal in M~, has the same S schema. By the definition, each M= (1 < u < h) is an SPN multiset in G. _Construct a production of mcfg p': hit0 --*"]},{"title":"f[M1, ffI2,'\", Mh]","paragraphs":["where M= is the nonterminal of G' which corresponds to M=(1 < u < h). Addp' to P' and f to F where f is defined as follows. Suppose"]},{"title":"pj : Aj ~ ajoBjlajl \"'' BjL~ajL~","paragraphs":["(1 < j < k) where"]},{"title":"Aj E N, Bfl E","paragraphs":["N(1 < l <"]},{"title":"Lj)","paragraphs":["and ajz E T* (0 < l < Lj), and let- - = (1 < < h) where"]},{"title":"Cu, E N(1","paragraphs":["< v <"]},{"title":"su).","paragraphs":["Then, for 1 < j < k, the jth component"]},{"title":"f[J]","paragraphs":["of f is: _ A"]},{"title":"f[J] (X-l,","paragraphs":["x2,\" \"', Xh )=otjoYjl Otjl Yj2 \"\" • YjLj OtjLj where x-u ="]},{"title":"(xul,xu2,'\",xus.)(1","paragraphs":["< u < h).","For j (1 <_ j < k) and l (1 _< l _< nj), if z~"]},{"title":"Bjl = C~,,","paragraphs":["then"]},{"title":"yfl-=x~,v.","paragraphs":["Note that, since"]},{"title":"Mu's","paragraphs":["are a partition of M, f satisfies Right Linearity (see 2.) and hence G' is an mcfg. For example, consider the above (P12,P13)- The nonterminals appearing in the right-hand"]},{"title":"138","paragraphs":["sides are A and B, and their S schemata are the same. Thus, we construct the following mcfg production: (A, B) --* fl [(A, B)] where fl [(Xl, x2)] ="]},{"title":"(aXlb,","paragraphs":["cx2d). Consider the following pair of productions as another example: { ~ :~}"]},{"title":"bD{Tatr2","paragraphs":["p~ : A --* a {TatrB ---* c D"]},{"title":"P'2 : B {TatrA=£} {TatrC=j,}","paragraphs":["{1\"air2 --,L} The multiset of nonterminals in the right-hand sides are partitioned into M1 ="]},{"title":"I{","paragraphs":["A, B}} (for"]},{"title":"arT1)","paragraphs":["and"]},{"title":"M~","paragraphs":["= {{C,"]},{"title":"D,","paragraphs":["D}} for"]},{"title":"atr2).","paragraphs":["For"]},{"title":"(p~,p~),","paragraphs":["the following mcfg","production is constructed: (A, B) --+ g [(A, B), (C, D, D)] where g [(x11, x12), (=21, X22,"]},{"title":"x23)]~--(ax12bx22, xilx .lc 3). V]","paragraphs":["Example 8.1: TRANS 8 translates fc-lfg"]},{"title":"GEx3","paragraphs":["in Example 4.1 into an equivalent mcfg"]},{"title":"G~x 3 = (N',T, F, P', S I)","paragraphs":["where N', S' are those illustrated in TRANS 8, F ="]},{"title":"{fo[(xl,x2)] =","paragraphs":["XlX2, fl[(Xl,X2)] ="]},{"title":"(aXlb, cx2d),","paragraphs":["f2 ----- (~',~')}, and, P' = {(S) --+"]},{"title":"fo[(A,B)], (A,B) --*","paragraphs":["fl [(A, B)],"]},{"title":"(A, B) --~ f2}. 0","paragraphs":["Theorem 8.1: ~rncfg = Efc-lfg."]},{"title":"Proof: £yc-tfg C £mcf9","paragraphs":["can be proved by TRANS 8. Conversely, for a given mcfg G, an fc-lfg G' such that L (G') = L (G) can be constructed in a similar way to TRANS 8. Details are found in (Ando 1992). [1 9","Conclusion In this paper, we introduce three subclasses of lfg's, two of which can be recognized in polynomial time. Also this paper clarifies the relations between the generative capacities of those subclasses, pmcfg's and fts'. References Ando, S. et al. 1992. \"Subclasses of Lexical-Functional Grammars Which Are Recognizable in Polynomial Time\", IEICE Technical Report, COMP92-44. Engelfriet, J. and Heyker, L. 1991. \"The String Generating Power of Context-Free Hypergraph Grammars\", J. Comput. & Syst. Sci., 43:328-360. Engelfriet, J., Rosenberg, G. and Slutzki, G. 1980. \"Tree Transducers, L Systems, and Two-Way Machines\", J. Comput. & Syst. Sei., 20:150-202. Joshi, A.K., Levy, L. and Takahashi, M. 1975 \"Tree Adjunct Grammars\", J. of Comput. & Syst. Sci., 10:136-163. Gazdar, G. and Pullum, G.K. 1985. \"Computationally Relevant Properties of Natural Languages and Their Grammars\", New Generation Computing, 3:273-306. Kaji, Y. et al. 1992. \"Parallel Multiple Context-Free Grammars and Finite State Translation Systems \", IEICE Technical Report, COMP92-34. Kaplan, R. and Bresnan, J. 1982. \"Lexical-Functional Grammar\","]},{"title":"The Mental Representation of Grammatical Relations,","paragraphs":["J.Bresnan (ed.), MIT press:173-281. Kasami, T. et al. 1988a. \"Generalized Context-Free Grammars and Multiple Context-Free Grammars\", Trans. IEICE, J71-D-I, 5:758-765. Kasami, T. et al. 1988b. \"On the Membership Problem for Head Language and Multiple Context-Free Languages, Trans. IEICE, J71-D-I, 6:935-941. Nakanishi, R. et al. 1993. \"On the Generative Capacity of Tree Translation Systems and Lexical Functional-Grammars\", Technical Paper of FAI, Japanese Society for Artificial Intelligence, SIG-FAI-9202. Nakanishi, R. et al. 1992. \"On the Generative Capacity of Lexical-Functional Grammars\", IEICE Trans. Inf. and Syst., 75-D, 7:509-516. Nishino, T. 1991. \"Mathematical Analysis of Lexical-Functional Grammars --Complexity, Parsability, and Learnability--\", Language Research Institute, Seoul National University. Nishino, T. 1992. \"Relating Attribute Grammars and Lexical-Functional Grammars\", Information Sciences, 66:1-22. Peterson, J.L. 1981. \"Petri Net Theory and the Modeling of Systems\", Prentice-Hall. Pollard, C.J. 1984. \"Generalized Phrase Structure Grammars, Head Grammars and Natural Language\", Ph.D. dissertation, Stanford University. Rounds, W.C. 1969. \"Context-Free Grammars on Trees\", Proc. of ACM STOC:143-148. Seki, H. et al. 1991. \"On Multiple Context-Free Grammars\", Theoretical Computer Science, 88, 2:191-229. Thatcher, J.W. 1967. \"Characterizing Derivation Trees of Context-Free Grammars through a Generalarization of Finite Automata Theory\". J. Comput. & Syst. Sci., 1:317-322. Vijay-Shanker, K. 1987. \"A Study of Tree Adjoining Grammars\", Ph.D. thesis, University of Pennsylvania. Vijay-Shanker, K., Weir, D.J. and Joshi, A.K. 1987. \"Characterizing structural descriptions produced by various grammatical formalisms\", Proc. of 25th meeting of Assoc. Comput. Ling. :104-111. Weir, D.J. 1988. \"Characterizing Mildly Context-Sensitive Grammar Formalisms\", Ph.D. thesis, University of Pennsylvania. Weir, D.J. 1992. \"Linear Context-Free Rewriting Systems and Deterministic Tree-Walking Transducers\", Proc. of 30th meeting of Assoc. Comput. Ling. 139"]}]}
