{"sections":[{"title":"","paragraphs":["Proceedings of EACL '99"]},{"title":"Ambiguous propositions typed Tim Fernando Philosophy Department University of Texas Austin, TX 78712-1180, USA f ernando~ims, uni-stuttgart, de*","paragraphs":["Abstract Ambiguous propositions are analyzed in a type system where disambiguation is effected during assembly (i.e. by coercion). Ambiguity is introduced through a layer of types that are underspecified relative to a pre-existing collection of dependent types, construed as unambiguous propositions. A simple system of reasoning directly with such underspecification is described, and shown to be sound and complete for the full range of disambiguations. Beyond erasing types, the system supports constraints on disambiguations, including co-variation."]},{"title":"1 Introduction","paragraphs":["A widely held view expressed in (Carbonell and Hayes, 1987) is that \"if there were one word to describe why natural language processing is hard, it is ambiguity.\" For any given natural language utterance, a formal language such as predicate logic typically offers several non-equivalent (well-formed) formulas as possible translations. An obvious approach is to take the disjunction of all alternatives, assuming (for the sake of the argument) that the disjunction is a formula. Even if it were, however, various objections have been raised against this proposal (e.g. (Deemter, 1996)). For the purposes of the present paper, what is interesting about a word, phrase, sentence or discourse that is ambiguous in isolation is how it may get disambiguated when combined with other expressions (or, more generally, when placed in a wider context); the challenge for any theory of ambiguity is to throw light on that process of disambiguation.","*From June to mid-August 1999, I will be visiting IMS, Uni Stuttgart, Azenbergstr 12, 70174 Stuttgart, Germany. Where I might be after that is unclear.","More concretely, suppose • were a binary connective on propositions A and B such that A • B is a proposition ambiguous between A and B. Under the \"propositions-as-types\" paradigm (e.g. (Girard et al., 1989)) identifying proofs of a proposition with programs of the corresponding type (so that \"t: A\" can be read as t is a proof of proposition A, or equivalently, t is a program of type A), disambiguation may take the form of type coercion. An instructive example with F as the context is"]},{"title":"x:(A-+ B) oC, y:DoA r ~- ap(p.(x),q.(y)):B (1)","paragraphs":["where"]},{"title":"ap","paragraphs":["is function application (corresponding to modus ponens), while p. and qo are the first and second o-projections, so that and"]},{"title":"x:(A ~ B)•C ~ p,(x):A ~ B y:D.A ~- qo(y):A.","paragraphs":["Evidently, there is something conjunctive (never mind disjunctive) about o; but beyond the ques-tion as to whether the unambiguous propositions constituting the possible readings of an ambiguous proposition form a conjunctive or disjunctive set (whatever that may precisely mean), there is also the matter of the interconnected choices from such sets, mediated by terms such as"]},{"title":"p°(x)","paragraphs":["and"]},{"title":"q°(Y).","paragraphs":["To ground these abstract considerations in natural language processing, a few words about how to think of the terms t and types A are useful. For predicate logic formulas A, the terms t might be intuitionistic natural deduction proofs, related by the Curry-Howard isomorphism to a suitable typed A-calculus. A notable innovation made in"]},{"title":"Intuitionistic Type Theory","paragraphs":["(ITT, (Martin-LSf, 86 Proceedings of EACL '99 1984)) is to allow proofs to enter into judgments of well-formedness (propositionhood). This stands in sharp contrast to ordinary predicate logic (be it intuitionistic or classical), where well-formedness is a trivial matter taken for granted (rather than analyzed) by the Curry-Howard isomorphism. For a natural language, however, it is well-formedness that is addressed by building types A over sentences, nouns, etc (in categorial grammar; e.g. (Morrill, 1994)) or LFG f-structures (in the \"glue\" approach, (Dalrymple et al., 1993; Dalrymple et al., 1997)). Now, while ITT's rules for propositionhood hardly constitute an account of grammaticality in English, the combination (in ITT) of assertions of well-formedness (A type) and the-oremhood (t: A) re-introduces matters of information content (over and above grammatical form), which have been applied in (Ranta, 1994) (among other places) to discourse semantics (in particular, anaphora). The present paper assumes the machinery of dependent functions and sums in ITT, without choosing between grammatical and semantic applications. In both cases, what ambiguity contributes to the pot is indeterminacy in typing, the intuition being that an expression is ambiguous to the extent that its typing is indeterminate.","That said, let us return to (1) and consider how to capture sequent inferences such as"]},{"title":"rI-x:(A-+ B).C rFy:D°A V }- ap(p°(x),q°(y)):B (i)","paragraphs":["and more complicated cases from iterated applications of., nested among other type constructs. The idea developed below is to set aside the con- and nective • (as well as notational clutter p., q.), (ii) and to step up from assertions t : A to (roughly) t :: A, where A is a set of types A (roughly, t : A : ,4). For instance, a direct transcription of the -~-introduction rule into :: is F,x::A }- t::B F }- Ax.t::A -+/3 (2) where .4 --+/3 abbreviates the set {A --+ B I A E Aand B E/3}. But what exactly could t ::A mean? The disjunctive conception t::A iff t:A for someAEA (3) would have as a consequence the implication t::-4 and .4 C B implies t::B. Now, if combinatorial explosion is a problem for ambiguity, then surely we ought to avoid feeding it with cases of spurious ambiguity. A complementary alternative is conjunction, t::A iff t:A for allAEA, (4) the object this time being to identify the C_-largest such set A, as (4) supports t::A and B C .4 implies t::B . But while (4) and (2) will do for Ax.y where y is a variable distinct from x, (4) suggests that (2) overgenerates for Ax.x. Spurious ambiguity may also arise to the left of ~- (not just to the right), if we are not careful to disambiguate the context. (1) illustrates the point; compare F ~- x::{A --~ B,C} F ~- y::{A,D} (5)"]},{"title":"r I- ap(=,v)::{B}","paragraphs":["where the context F is left untouched, to F }-- x::{A -+ B,C} F }- y::{A,D} (6) x::{A -+ B},y:: {A} }- ap(x,y):: {B} where the context gets trimmed. (5) and (2) yield"]},{"title":"F Ax.Ay.ap(x,y)::{A -~ B,C} -~","paragraphs":["({A,D} -~ {B}) whereas (6) and (2) yield"]},{"title":"I- Ax.Ay.ap(x,y):: (A -+ B} +","paragraphs":["((A} -~ {B}) . To weed out spurious ambiguity, we will attach variables onto sets .4 of types, to form decorated expressions ct collect constraints on a's in sets C, hung as subscripts, }-c, on ~-. (3) and (4) are then sharpened by a contextual characterization, semantically interpreting judgments of the form t :: a and a typ by disambiguations respecting suitable constraints. 2 Two systems Let us begin with a system of dependent types, confining our attention to three forms of judgments, F context, A type and t:A. (That is, for simplicity, we leave out equations between types and between terms.) Contexts can be formed from the empty sequence () (Oc) }- 0 context","(tc) F ~ A type x ~ Var(P) F, x : A context 87 Proceedings of EACL '99 where Var(F) is the set of variables occurring in F. Assumptions cross [-- (As) ~- F, x: A context"]},{"title":"F,x:A~-x:A","paragraphs":["and contexts weaken to the right F ~- O ~- F, A"]},{"title":"context","paragraphs":["(Weak) F, A ~- O (where O ranges over judgments A type and t : A). Next come formation (F), introduction (I) and elimination (E) rules for dependent functions rI (generalizing non-dependent functions -+) (l'I F) ~- F, x: A context F, z : A ~- B type"]},{"title":"(HI) (HE) r F (I'Ix:A)B type","paragraphs":["F,z:A I-"]},{"title":"t:B F ~- )~z.t:(1-Iz:A)B r F t:(Hz:A)B r F u:A r F ap(t,~,):B[~ := ~]","paragraphs":["(where"]},{"title":"B[x","paragraphs":[":= u] is B with x replaced by u) and for dependent sums Y]. (generalizing Cartesian products x) (~-]. F)"]},{"title":"~- F,x:A","paragraphs":["context r,x:A ~- B"]},{"title":"type F ~- (~E]x:A)B type r f- t:A r l- ~:B[: := t] (El) r F (t,u):(Ez:A)B FF t:(Ex:A)B","paragraphs":["(EEp) r"]},{"title":"F p(t):A r F t:(~,x:A)S","paragraphs":["(EEq) r"]},{"title":"~-q(t):B[x","paragraphs":[":=p(t)] \"","Now for the novel part: a second system, with terms t as before, but colons squared, and :- types A, B replaced by"]},{"title":"decorated expressions a, j3 and unadorned expressions .4","paragraphs":["generated simultaneously according to"]},{"title":"o I(H I (E ,(II :::a), I (E :::a), i a~{t} J aP [ aq{t}","paragraphs":["where a belongs to a fixed countable set X of variables. The intent (made precise in the next section) is that a u-expression .4 describes a set of :-types, while a d-expression a denotes a choice from such a set. D-expressions of the form a~, a p, aq{t} and a/~{t} are said to be"]},{"title":"non-dependent,","paragraphs":["and are used, in conjunction with"]},{"title":"constraints","paragraphs":["of the form fcn(a,/3), sum(a) and eq(a,/3), to infer sequents relativized to finite sets C of constraints as follows r"]},{"title":"F-c t::a","paragraphs":["r"]},{"title":"I-c'","paragraphs":["u::X3"]},{"title":"([In)","paragraphs":["r"]},{"title":"Fcuc, u{f~(~,~)} ap(t, u)::as{u} F [\"c t::a","paragraphs":["(EnP) F"]},{"title":"FCu(sum(a)}","paragraphs":["p(t)::aP F"]},{"title":"[-C","paragraphs":["t::a"]},{"title":"(E nq) r Fco{sum(o)} q(t)::aq{p(t)} '","paragraphs":["where each of the three rules have the side condition that a is non-dependent. 1 In addition,"]},{"title":"r Fc t::(I'[z::a)X~ r Fc, u::~r (HE)¢ r FCUC'U{eq(a,'y)} ap(t,u)::~[x := u]","paragraphs":["with the side condition a # % The intuition (for-malized in clauses (c2)-(c4) of the next section) is that","- the constraint eq(a, 7) is satisfied by a disambiguation equating a with %","- fcn(a, i3) is satisfied by a disambiguation of (~ and/3 to :-types of the form (H z :"]},{"title":"A)B","paragraphs":["and A respectively","and - sum(a) is satisfied by a disambiguation of a to a :-type of the form (~-'~ x:"]},{"title":"A)B).","paragraphs":["Rules of the previous system translate to"]},{"title":"(()c)° F~ () cxt F I-C -4 typ x ~ Var(F)","paragraphs":["(tc)°"]},{"title":"Fc","paragraphs":["r,z::A~ coot (As)O"]},{"title":"Fc","paragraphs":["F,x::a cxt F,x::a ~-c x::a F"]},{"title":"I-c","paragraphs":["0"]},{"title":"I-c,","paragraphs":["F, A cxt (Weak)° F, A"]},{"title":"I-cue'","paragraphs":["0 (iiF)O"]},{"title":"Fc","paragraphs":["r,x::a cxt r,x::a Fc' B typ F"]},{"title":"[-CuO","paragraphs":["(l'I x::a) B"]},{"title":"typ F,x::a I-c t::~","paragraphs":["(llI) °"]},{"title":"r I-c ~z.t::(H z::a)x~ r I-c t::(IIz::a)~ r I-c' u::a","paragraphs":["(liE)° r"]},{"title":"Fcuc, ap(t,u)::~[z","paragraphs":[":="]},{"title":"u]","paragraphs":["(~F)O J-c I',z::a cxt F,x::a ~-c' B typ r"]},{"title":"Fcuc'","paragraphs":["(~z::a)B"]},{"title":"typ r kc t::a r bc, u::~[x := t] (EI)° r Fc~c, (t,~)::(E~::a)~","paragraphs":["(EEp)O r Fct::(Ex::a)~ F ~-c p(t)::a r"]},{"title":"kC","paragraphs":["t::(Ez::a)~ (E E~) °"]},{"title":"r Vc q(t)::~[x := p(t)] \"","paragraphs":["1Variations on this side condition ~e taken up in §5 below. 88 Proceedings of EACL '99 Further rules provide co-varying choices F l-c t::a z ¢ Vat(r)"]},{"title":"(::c)","paragraphs":["l-cC, z::a"]},{"title":"cxt (YIc) l-c r,x::a cxt r,x::a l-o t::t~","paragraphs":["l-cuc'"]},{"title":"r,y::(l'Ix::a)/~","paragraphs":["cxt"]},{"title":"(~c) l-c r,x::a cxt r,x::a t-o t::t3","paragraphs":["t-cuc,"]},{"title":"r,y::(5:~::a)t~ ¢xt '","paragraphs":["where (Hc) and (~\"].c) each have the side condition y ¢ Var(r) u {z}. 3 Disambiguating :: Let Ty be the collection of :-type expressions A, and for every d-expression a, let","- X(a) be the set of variables in 2:' occurring in a","- D(a) be the set of (sub-)d-expressions/~ occurring in a (including a) and","- U(a) be the set of (sub-)u-expressions A occurring in a. Suppressing the tedious inductive definitions of D(a) and U(a), let us just note that, for instance, D((l-I x::a=)(~']~y::a'y)a= ) is"]},{"title":"(II","paragraphs":["a=, a~V, az} and U((I- I x ::a=)(~'~. y::a'y)az) is o,"]},{"title":"o'}.","paragraphs":["Next, given a d-expression a0 and a function p : D(ao) --+ Ty, let -P be the function from U(a0) to Pow(Ty) such that for a E X(ao), a p = Ty , for (I-[ x::a)A e U(ao), ((I~x::a)x) p = {(Hx:p(a))A I A E A p} and for ()-~.=::a)A e U(ao), ((~-~x::a)A) p = {(Zx:p(a))A I A e AP} . Now, call p a disambiguation of ao if the following conditions hold: (i) for every A= E D(a0), p(,4=) E A p (ii) for every (1FIx::a)/3 E D(ao),"]},{"title":"p((H ~:: a)Z)","paragraphs":["="]},{"title":"(H ~: p(a))p(x~)","paragraphs":["(iii) for every (~x::a)/3 E D(ao), p((~ x :: a)lh) = (~ x :p(a))p(13)","(iv) for every a~{t} E D(ao), p(a) = (rl x :p(/~))A for some x and A with A[x := t] = p(a~{t})","(v) for every a p e D(ao), p(a) = (~x:p(aP))B for some x and B and","(vi) for every aq{t} E D(ao), p(a) = (~x:A)B for some x, A and B with"]},{"title":"Six := t] = p(aq{t}).","paragraphs":["Next, let us pass from a single d-expression ao to a fixed set Do of d-expressions. A disambiguation of the set Do of d-expressions is a function p from U{D(a) ] a E Do} to Ty such that for all a E Do, p restricted to D(a) is a disambiguation of a. 2 A disambiguation p of Do respects a set C of constraints if there is an extension p+ _D p so that (cl) p+ is a disambiguation of Do U {a I a is mentioned in C} (c2) whenever eq(a,/~) E C, p+(a) --- P+(I~) (c3) whenever fcn(a,/3) e C, p+(a) ="]},{"title":"(Ilx:p+(l~))B for","paragraphs":["some x and B and (c4) whenever sum(e) E C, p+(a) = (~x:A)B for some x, A and B. Given a sequence F of the form Xl:el, ...~Xn:an~ let irna(F) = {al,...,an}, and for every disambiguation p of a set Do containing ima(F), let Fp = Xl:P(al), \"\", xn:p(an) • Let us say that l-c F cxt can be disambiguated to l- F' context if there is a disambiguation p of ima(F) respecting C such that F' = Fp. Similarly, F l-c a typ (t :: a) can be disambiguated to F' l-A type (t : A) if there is a disambiguation p of irna(F) U {a} respecting C such that F' = Fp and A = p(a). 2It is crucial for this formulation that the set"]},{"title":"Var(F)","paragraphs":["mentioned in side conditions for various rules in the previous section include all variables in P, whether they occur freely or bound. 89 Proceedings of EACL '99 4 Relating the derivations Observe that to derive a sequent other than }- 0 context in the first system, or ~¢ 0 cxt in the second, we need to assume a non-empty set 7\" of sequents. Let us agree to write F ~_r O to mean that the sequent F }- O is derivable from T, and ~_T F context to mean that }- F context is derivable from 7\". Similarly, for the second system (with ~- replaced by ~-c, context by cxt, etc). As every rule (R) for the first system has a counterpart (R) ° in the second system, it is tempting to seek a natural translation .° from the first system to the second system validating the following Claim: F ~-?\" O implies F ° ~-~'° 0% For example, if 7\" consists of the sequent ~- A type, F is empty, and O is Az.x: ([i z:A)A, then 7\"o is {~-¢ a typ}, F ° is empty, and O ° is Ax.z :: (I] x :: ax)ax. Replacing F by y:A, and O by ~z.y:(YIx: A)A, we get y :: ay for F ° and ~z.y :: (l'I x :: az)% for 0%","To pin down a systematic definition of .°, it is easy enough to fix a 1-1 mapping X ~4 a x of atomic :-types X to variables a x in ~Y, and set x o = ,,x (7)"]},{"title":"((Hx:A)B)° = (1-[x::A°.)B ° (8)","paragraphs":["((E x:A)B)° = (E x::A°,)B ° (9)","(A type) ° = A ° typ (10) (*:A) ° = z::A°,. (11) While (11) induces a translation F ° of a context F, what about (t : A) °, where t is not just, as in (11), a variable x? Before revising the definition of d-expressions a to accommodate subscripts t on A °, let us explore what we can do with (7)- (11). Define a simple type base 7\" to be a set of sequents of the form F ~- A type. Given a simple type base 7\", let 7\"0 be its translation into :: according to equations (11) and (10). By induction on derivations from 7\", we can prove a reformulation of the claim above, where F ° and O ° are replaced by disambiguations."]},{"title":"Proposition","paragraphs":["1. Let 7\" be a simple type base.","(a) r context implies ~0 F' cxt for some F' such that ~-o F' cxt can be disambiguated to","F context.","(b) F ~T A type implies F' ~° a typ for some r' and a such that F' ~-0 a typ can be disambiguated to F ~ A type.","(c) F ~_ 7\" t : A implies F' ~-o ~ t :: a for some F' and a such that F' ~-o t :: a can be disambiguated to F ~- t:A.","Moreover, as the rules (1-In), (~] nv) and (~ nq) can, for disambiguations that meet the appropriate constraints, be replaced by (1\"I E), (~] Ep) and (~ Eq), it follows that"]},{"title":"Proposition","paragraphs":["2. Let 7\" be a simple type base.","(a) /f ~-c ~ F cxt and [-c F cxt can be d/sam-biguated to ~- F' context, then ~\" F' context.","(b) Ifr ~- ¢ T~ a typ and r ~-c a typ can be disambiguated to F' ~- A type, then F' ~_T A type.","(c) Ifr [--c r° t::a andr ~-c t::a can be disambiguated to r'"]},{"title":"F-","paragraphs":["t:A, then F' ~_r t:A. Conversely, going from (liE) °, (~Ep) ° and (E Eq) ° to ([in), (Y]~ np) and ()-~ nq), we have"]},{"title":"Proposition 3. Let 7\"","paragraphs":["be a simple type base.","(a) /f ~_r r' context and ~-c r cxt can be disambiguated to ~- F' context, then ~-c y° F cxt.","(b) IfF' ~_7\" A type and P ~-c a typ can be disambiguated to r'"]},{"title":"S","paragraphs":["A type, then P ~-~ a typ.","(c) If F' ~-~\" t : A and F ~-c t :: a can be disambiguated to F' ~- t:A, then F ~o t::t~. Proposition 3(c) is roughly ~ of (3), while Proposition 2(c) approximates =~ of (4). If Proposition 2 says that the system for :: above is sound, Proposition 3 says it is complete. 3 To tie together Propositions 2 and 3 in an equivalence, it is useful to define a set C of constraints to be satisfiable if 0 is a disambiguation (of 0) respecting C. Note that sequents ~-c F and F ~-c e have disambiguations exactly when C is satisfiable. Consequently, Propositions 2 and 3 yield (focussing on ::) Corollary 4. Given a simple type base 7\" and a satisfiable set C of constraints, the following are equivalent. O) r","(ii) F' ~_T t : A, for every sequent F' ~- t : A to which F ~-c t::a can be disambiguated","(iii) F' ~_T t : A, for some sequent £' ~- t : A to which F ~-c t::a can be disambiguated.","SAs for how this relates to soundness and completeness in say, classical predicate logic, please see the discussion of translation versus entailment in the concluding paragraph below. 90 Proceedings of EACL '99 The formulation above of Corollary 4 depends on the possibility of deriving sequents F ~c O where C is not satisfiable. We could have, of course, added side conditions to (1-In), (~-~. nj,) and (~\"~ nq) checking that the constraints are satisfiable. By electing not to do so, we have exposed a certain separability of inference from constraint satisfaction, which we will explore in the next section.","For now, turning to the general case of a set T of :-sequents, observe that if 7\" is to be compatible with the first system, then (i) whenever F }-"]},{"title":"Ax.t:C","paragraphs":["belongs to 7\", C must have the form (rI"]},{"title":"x:A)B","paragraphs":["with"]},{"title":"F,x:A }_7- t:B","paragraphs":["(ii) whenever"]},{"title":"F }- (t, u):C","paragraphs":["belongs to T, C must have the form (~[: z:"]},{"title":"A)B","paragraphs":["with"]},{"title":"F ]_r t:A","paragraphs":["and F }_.7\""]},{"title":"u:B[x","paragraphs":[":= t] whenever F }-"]},{"title":"ap(t,u):B","paragraphs":["belongs to 7\","]},{"title":"F ]_r t : (1-[ x : A)B","paragraphs":["for some x and A such that F ]_'r u: A whenever F ~-"]},{"title":"p(t) :A","paragraphs":["belongs to T,"]},{"title":"F }_7\" t:(~]x:A)B","paragraphs":["for some x and B whenever P }-"]},{"title":"q(t):B","paragraphs":["belongs to T,"]},{"title":"F ~_r t:(~_,x:A)B","paragraphs":["for some x and A whenever F ~- e belongs to 7\", ~'r F context whenever ~- F,x : A context or F ~- t : A belongs to T, F ~_7\" A type (iii) (iv)"]},{"title":"(v) (vi)","paragraphs":["(vii) and (viii) whenever F }- (1-I"]},{"title":"z:A)B","paragraphs":["type or"]},{"title":"r ~- (~']~z:A)B","paragraphs":["type belongs to T, F [_r A type and F,"]},{"title":"x:A }_7\" B","paragraphs":["type. Thus, a base set T compatible with the first system can be assumed without loss of generality to consist of sequents of two forms: F ~ A type and F }- t: B, where A and t are atomic (i.e. indecomposable by I-i, ~ and A, (,),"]},{"title":"ap,p, q","paragraphs":["respectively). By clause (vii) above, it follows that for every sequent F ~- t : B in T, there is some To C_ T such that F ~_7~ B type. So starting with simple type bases To, we can take (for B) the Dexpression/3 which Proposition l(b) returns, given F [-% B type. We can then define T ° by translating F ~-"]},{"title":"t:B as","paragraphs":["F ° }- t ::/3. Alternatively, we might make do with simple type bases by reformulating t as a variable"]},{"title":"xt,","paragraphs":["and smuggling zt into enriched contexts F' for which a T-derivation of F' ~- O' is sought (with O' adjusted for zt, rather than t). That is, instead of injecting t on top of ]- (within some superscript 7\"), we might add it (along with the context it depends on) to the left of ~-. 5 Variations and refinements The sequent rules for :: chosen above lie between two extremes. The first is obtained by dropping the side conditions of (I-In), (~-~. np) and (~-'~. nq), rendering the four rules ([i E) °, (~-] Ep) °, (~ nq) ° and (H E)¢ redundant. The idea is to put off constraint satisfaction to the very end. Alternatively, the side conditions of (I'[n), (~-~. np), (~-~ n~) and (l-I E)# might be strengthened to check that the constraints are satisfiable (adding to (1-In), for example, the requirement that sum(a) ~ C U C' and eq(a,~') ¢ C U C' for all 8' 6 D(/3)). Assuming that we did, we might as well rewrite the relevant d-expressions, and dispense with the subscript C. (For example, with the appropriate side conditions, ([In) might be revised to r t::a"]},{"title":"I\" F- u::# r[a := (1J=::#)a] F- ap(t,=)::a[x := =1","paragraphs":["where F[a := (I-I x::B)a] is F with a replaced by ([i z ::/3)a.) An increase in complexity of the side conditions is a price that we may well be willing to pay to get rid of subscripts C. Or perhaps not.","Among the considerations relevant to the interplay between inference and constraint satisfaction are:"]},{"title":"(z)","paragraphs":["the diffficulty/ease of applying/abusing inference rules","(D) the difficulty of disambiguating (i.e. of verifying the assumption in Corollary 4 of a \"satisfiable set C\" )","(W) wasted effort on spurious readings (i.e. sequents F ~-c O with non-satisfiable C). Designing sequent rules balancing (I), (D) and (W) is a delicate language engineering problem, about which it is probably best to keep an open mind. Consider again the binary connective • mentioned in the introduction (which we set aside to concentrate instead on certain underspecified representa-tions). It is easy enough to refine the notion of a disambiguation to an e-disambiguation, where e is a function encoding the readings specified by o. In particular, example (1) can be re-conceptualized in terms of (i) the instance"]},{"title":"F ~-o z::a","paragraphs":["r I-o y::~ r F{fcn(c~,~)}"]},{"title":"ap(z,y)::a~{y}","paragraphs":["of the rule (1\"I n) where F is the context x :: a,y::/3, and say, a is % and/3 is a'~ (against the base set of sequents }-e a typ and ~-$ a' typ) 91 Proceedings of EACL '99 and (ii) an c-disambiguation of"]},{"title":"a~{y},","paragraphs":["where ~(a) = {A --+ B, C} and e(/3) = {A, D}. Given a (partial) function e from some set Do of d-expressions to Pow(Ty) - {0}, an e-"]},{"title":"disambiguation","paragraphs":["of Do is a disambiguation p of Do such that for every a in the domain of ¢,"]},{"title":"p(a) E","paragraphs":["e(a). 4 Now, there are at least two ways to incorporate e-disambiguations into Corollary 4. The first is to leave the sequent rules for :: as be-fore, but to relativize the notion of a satisfiable set C of constraints to e (adding to the definition of \"p respects C\" the requirement that the extension p+ be an e-disambiguation). A more interesting approach is to bring e into the sequent rules by forming constraints to guarantee that disambiguations are e-disambiguations (the general point being that all kinds of information might be encoded within the subscripts C on ~-). For starters, we might change the rule (0c) ° to"]},{"title":"(Oc)° I-o, 0 cxt","paragraphs":["where the subscript 0, e denotes a constraint set requiring that for every a in the domain of e, a can only be disambiguated into an element of e(a). The rules (l-in), (~nv) , (~'~ nq) and"]},{"title":"(FI E)¢","paragraphs":["might then be modified to trim the sets e(a) so that in example (1), for instance, the application of"]},{"title":"(Fin)","paragraphs":["reduces e(a) = {A -~ B, C) to"]},{"title":"e'(a) = {A --+ B}.","paragraphs":["More specifically, let"]},{"title":"(l'In)","paragraphs":["be r I-c,, x::a r ~c,,e y::~"]},{"title":"(Fin) r","paragraphs":["with the side condition that ~x is non-dependent, and e is consistent with 4 (i.e. for every a in the domain of both e and d, ~(a) n"]},{"title":"e'(a) # 0)","paragraphs":["and where C\" is C t3 C'U {fcn(a,B)} and e\" combines e and e' in the obvious way (e.g. mapping every a in the domain of both ¢ and e' to e(a)nd(a)). (Subscripts C, e may, as in the case of 0, ¢, be construed as single constraint sets, which are convenient for certain purposes to decompose into pairs C, e.)","We could put a bit more work into (Fin) as follows. Given an integer k > 0, let Du(/3) be","4We can also introduce, as a binary connective on u-expressions and/or on d-expressions, although this would require a bit more work and would run against the spirit of underspecified representations, insofar as • spells out possible disambiguations. the subset of the set D(~) of sub-d-expressions of B, from which ~ can be constructed with < k applications of d-expression formation rules. (For example, D1 ((~ x :: a)(It Y ::/3)7) is with ~ and 7 buried too deeply to be included.) Now, for a fixed k, add to the side condition of (l']n) the requirement that sum(a) 9~ C U C' and eq(a, ff) 9~ C U C' for all/3' e Dk(/~); and choose e\" to also rule out the possibility that a is ff for some ff E Dk(~). Clearly, the larger k is, the stronger the rule becomes. But so long as a satisfiability check is made after inference (as suggested by Corollary 4), it is not necessary that the constraint set C in a sequent F I-c O that has been derived be reduced (to make all its consequences explicit) any more than it is necessary to require that C be satisfiable. (Concerning the latter, notice also that spurious sequents may drop out as further inferences are made, eliminating the need there to ever disambiguate.)","To establish (the analog of) Corollary 4, a crucial property for a sequent rule rl t-cl O1 --- r, t-c. O,"]},{"title":"(,) r -cO","paragraphs":["to have is"]},{"title":"monotonicity:","paragraphs":["for every disambiguation p respecting C, p respects Ci for 1 < i < n. s (This is a generalization of Ci _C C, suggested by the encoding above of e-disambiguations/, in terms of constraints.) To weed out spurious readings (consideration (W) above), side conditions might be imposed on (*), which ought (according to (I)) to be as simple as possible. The trick in designing C (and (*)) is to make inference }- just complicated enough so as, (D), not to put an undue burden on disambiguating at the end. The whole idea is to distribute the work between inferring sequents and (subsequently) checking satisfiability. The claim is that the middle ground between the two extremes mentioned at the beginning of this section (i.e. between lax side conditions that leave the bulk of the work to disambiguation at the end, and strict side conditions that essentially reduce:: to :) is fertile. 6 Discussion More than one reader (of a previous draft of this paper) has asked about linguistic examples. The","5Compare to (Alshawi and Crouch, 1992). Monotonicity is used above for soundness, Proposition 2. Completeness, Proposition 3, follows from having enough such rules (*) (or equivalently, making the side conditions for (*) comprehensive enough). 92 Proceedings of EACL '99 short, easy answer is that the sort of ambiguity addressed here can be syntactic (with types A ranging over grammatical categories) or semantic (with types drawn, say, from a higher-order predicate logic). Clearly, more must be said -- for example, to properly motivate the rules (:: c), (I-[c) and (~\"]c) mentioned at the end of §2. Detailed case studies are bound to push :: in various directions; and no doubt, after applying enough pressure, the system above will break:","Be that as it may, I hope that case studies will be carried out (by others and/or by myself), testing, by stretching, the basic idea above. I close with a few words on that idea, and, begging the reader's indulgence, on the theoretical background out of which, in my experience, it grew. From examining the binary connective • in (Fernando, 1997), I concluded that • is unlike any ordinary logical connective related to entailment because the force of • is best understood relative not to entailment, but to translation. Underlying the distinction between entailment and translation is that between well-formed formulas and possibly ambiguous expressions (corresponding, in the present work, to :-types, on the one hand, and d: and u-expressions, on the other). An abstract picture relating the processes of translation and entailment is framed in (Femando, in press), which I have attempted to flesh out here for the case of ITT, with a view to extending ITT's applications beyond anaphora to underspecifica-tion. The obvious step is to drop all types, and construe the terms as belonging to a type-free A-calculus. The twist above is that ambiguous expressions"]},{"title":"are","paragraphs":["typed by d-expressions a, distinct from u-expressions .4. The construction is, in fact, quite general, and can be applied to linear derivations as well. The essential point is to break free from a generative straitjacket, relaxing the inference rules for derivations by collecting constraints that are enforced at various points of the deriva-tion, including the end.","M. Dalrymple, J. Lamping, F.C.N. Pereira, and V. Saraswat. 1993. LFG semantics via constraints. In"]},{"title":"Proc. Sixth European A CL.","paragraphs":["University of Utrecht.","M. Dalrymple, V. Gupta, J. Lamping, and V. Saraswat. 1997. Relating resource-based semantics to categorial semantics. Mathematics of Language 5, Saarbriicken.","Kees van Deemter. 1996. Towards a logic of ambiguous expressions. In K. van Deemter and S. Peters, editors,"]},{"title":"Semantic Ambiguity and Underspecification.","paragraphs":["CSLI Lecture Notes Number 55, Stanford.","Tim Fernando. 1997. Ambiguity under changing contexts."]},{"title":"Linguistics and Philosophy,","paragraphs":["20(6).","Tim Fernando. In press. A modal logic for nondeterministic discourse processing."]},{"title":"Journal of Logic, Language and Information.","paragraphs":["Jean-Yves Girard, Yves Lafont, and Paul Taylor. 1989."]},{"title":"Proofs and Types.","paragraphs":["Cambridge Tracts in Theoretical Computer Science 7. Cambridge University Press. Per Martin-LSf. 1984."]},{"title":"Intuitionistic Type Theory.","paragraphs":["Bibliopolis, Napoli. Notes by Giovanni Sambin of a series of lectures given in Padua, June 1980. Glyn V. Morrill. 1994."]},{"title":"Type Logical Grammar.","paragraphs":["Kluwer Academic Publishers, Dordrecht. Aarne Ranta. 1994."]},{"title":"Type-Theoretical Grammar.","paragraphs":["Oxford University Press, Oxford. References","H. Alshawi and R. Crouch. 1992. Monotonic semantic interpretation. In"]},{"title":"Proc. 30th Annual Meeting of the Association for Computational Linguistics.","paragraphs":["J. Carbonell and P. Hayes. 1987. Natural language understanding. In S. Shapiro, D. Eckroth, and G. Vallasi, editors,"]},{"title":"Encyclopedia of Artificial Intelligence.","paragraphs":["Wiley and Sons, New York. 93"]}]}