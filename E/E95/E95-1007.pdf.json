{"sections":[{"title":"Some Remarks on the Decidability of the Generation Problem in LFG- and PATR-Style Unification Grammars Jiirgen Wedekind Institute for Natural Language Processing University of Stuttgart Azenbergstr. 12 D-70174 Stuttgart, FRG juergen@ims.uni-stuttgart.de Abstract","paragraphs":["In this paper, we prove the decidability of the generation problem for those unification grammars which are based on context-free phrase structure rule skeletons, like e.g. LFG and PATR-II. The result shows a perhaps unexpected asymmetry, since it is valid also for those unification grammars whose parsing problem is undecidable, e.g. grammars which do not satisfy the off-line parsability constraint. The general proof is achieved by showing that the space of the derivations which have to be considered in order to decide the problem for a given input is always restricted to derivations whose length is limited by some fixed upper bound which is determined relative to the \"size\" of the input. 1 Introduction Unification Grammars with a context-free skeleton, like Lexical Fhnctional Grammar (LFG) and PATR-II (cf. e.g. Kaplan and Bresnan 1982, Shieber et al. 1983) assign to a sentence not only a constituent structure (c-structure), but also an additional linguistic entity. In the rather restricted grammars of the early stage this entity is identified with a special graph structure, commonly called feature structure. Since a string is regarded as well-formed only if a (well-formed) feature structure is assigned to it by the grammar, two inverse decidability problems arise which had to be solved in order to know whether we can formulate terminating parsing and generation algorithms. If we retain the terminology of the early stages then an adequate parsing algorithm requires that we can decide for a given grammar and a given string whether there exists a feature structure assigned to it by the grammar (parsing problem) and an adequate generation algorithm requires that we can decide for a given grammar and a given feature structure whether there exists a sentence to which this structure is assigned by the grammar (generation problem).","While we already know for a long time that the parsing problem is undecidable (cf. Kaplan and Bresnan 1982, Johnson 1988), we want to show in this paper that the generation problem is decidable even for unrestricted (not off-line parsable) unification grammars. For the proof we first introduce in section 2 the type of grammar we want to consider. In section 3 we then define the generation problem and show its decidability in two steps. 2 Preliminaries The unification grammars we want to consider consist of rules with a context-free skeleton and a set of annotations associated with the constituents mentioned in the rules. Typical examples taken from LFG and PATR-II are given in figure 1. For the for-","S --~ NP VP S --+ NP VP (t SUB J) ----$ j'=$ (VP AGR) = (NP AGR)","NP -+ John NP -4 Uther (1\" PRED) = JOHN (NP AGR NUM) = SG","(NP AGR PER) ---- 3RD"]},{"title":"Figure","paragraphs":["1 Examples of rules in LFG (left) and PATR-II format (right). mal definition of those grammars we reconstruct the annotations as formulas of a quantifier-free sublanguage of a classical first-order language with equality whose (nonlogical) symbols are given by a finite set of unary partial function symbols and a finite set of constants. For the translation of LFG and PATR-II annotations we regard the attributes (in figure 1: SUB J, PRED, AGR, NUM, PER) 58"]},{"title":"unary partial function","paragraphs":["symbols and the atomic values (in figure 1: JOHN,"]},{"title":"45","paragraphs":["SG, 3RD) as"]},{"title":"individual constants.","paragraphs":["Furthermore, we assume for a context-free rule of the form A ---> w"]},{"title":"(w e (VN U VT)*)","paragraphs":["that the variable x0 is associated with A and that for each occurrence wi in w there is a variable xi which is associated with wi. For the formal reconstruction of LFG's we assume that each occurrence of $ in the annotation of w~ corresponds to an occurrence of xi and that each occurrence of 1\" corresponds to an occurrence of x0. For grammars in PATR-II format we suppose that occurrences of categories in the annotations correspond to the associated variables.","Before we give the definition of the grammars we want to investigate, we introduce the following notation. In the following we use"]},{"title":"S[xl, .., x~]","paragraphs":["to indicate that the variables occurring in the set of formulas S are included in {xl, .., Xn} and S(Xl, .., xn) if the set of variables occurring in S is exactly {Xl,.., xn}. 1. DEFINITION. A"]},{"title":"unification grammar","paragraphs":["is a tuple"]},{"title":"(VN , VT , S, F1, V, V, R>,","paragraphs":["consisting of a finite nonterminal vocabulary"]},{"title":"VN,","paragraphs":["a finite terminal vocabulary"]},{"title":"VT,","paragraphs":["a start symbol S E"]},{"title":"VN","paragraphs":["and a"]},{"title":"feature-description language L","paragraphs":["determined by a finite set of unary partial function symbols F~, a finite set of atomic values V and a denumerable set of variables 1 V= {x~ I a e N*} with x~ #x,, for a # a'. All vocabularies are pairwise disjoint. R is a finite set of rules of the form r ="]},{"title":"((A,w),S~[xo,..,xl~l]","paragraphs":["} (zi E 1;), with (A, w) e"]},{"title":"VN x (VN U VT)*","paragraphs":["(a context-free phrase structure rule) and S~[x0, .., xl~l] a finite set of (quantifier-free) literals of L. 2 According to our definition the LFG rules in figure 1 are now expressed as depicted in (la) and the PATR-II rules as given in (lb). Note that the structure of the terms is now \"mirror imaged\", since we assume the attributes to be unary partial function symbols. (1) (a) (S -+ NP VB, {SUBJ"]},{"title":"Xo ..~ xl,xo ~","paragraphs":["x2}) (NP --~ John, {PRED XO ~ JOHN})","(b) (S --> NP VP, {AOa z2 ~ AGR xl})","SNUM AGR XO ~ SO,1 \\ (NP --+ Uther, ].PEg AOR Xo ~ 3RD~/ For the definition of the"]},{"title":"sentences","paragraphs":["derivable by a unification grammar we have to specify first what"]},{"title":"derivations","paragraphs":["are. 2. DEFINITION. A sequence of pairs ~r0...~rn with 7to = (Be, 01 (B 6"]},{"title":"VN)","paragraphs":["is called"]},{"title":"derivation","paragraphs":["of length n iff for each 7ri = (B [..A~..]~, S) (0 < i < n) there is a rule r (A -+ w~ k = ..win, S~) such that","= .., ,~]~..]~,S~).","In the definition we assume that the order of the arcs of a tree is encoded by numbering the arcs and that each node is identified with the sequence of in-tegers numbering the arcs along the path from the 1The syntax and semantics of feature-description languages is given in the appendix. 2A literal is an atomic formula or the negation of an atomic formula. root (O) to that node. In our bracket notation we add to a constituent its root node as the right and its root node label as the left index. In order to be able to refer to the c-structure derivation and to the sequence of feature descriptions and to have access to the nodes which are substituted in each step of a derivation, we define for a derivation 7r three other sequences. 3. DEFINITION. Let ~r be a derivation of length n. We then define two sequences w and \")' for each"]},{"title":"i=O,..,n","paragraphs":["with"]},{"title":"lh=(Tc, S)","paragraphs":["by"]},{"title":"wi=Tc","paragraphs":["and 7i = S and a sequence w for each i-- 1,..,n with w~-i = B[..A~..]O and Tc = B[..A[W~.I,..,wk.m]~..]0 by wi = #. Let S be a set of literals and 0 a unary partial mapping over the set of terms. Then the expression S[0] denotes the set of expressions obtained from S by simultaneously replacing each occurrence of a term ~- in each formula in S by 0(T). The feature description derived by zr is then defined by means of the following operation. 4. DEFINITION. If ~r is a derivation of length n then the"]},{"title":"feature description derived by 7r from h to k","paragraphs":["(0 <_ h < k <_ n) is given by k"]},{"title":"S;-~k = U 7i[{(xj,xw, j) I xj","paragraphs":["occurs in 3'i}]. i----h EXAMPLE 1. If we start a derivation zr from (So, 0) and apply the S-rule in (la) and the following VP-rule","(VP -+ V VP', {xo ~ Xl,XCOMP ~0 ~ X2}) we end up with the following sequence. ~o = (So,"]},{"title":"0)","paragraphs":["7rl = (s[NP1, VP2]o,{SUBJ xo ~ Xl,XO ~ x2}) zr2 ---- (s[NPI,vp [V2.1 ,VP'2.21210,{xo ~. Xl,XCOMP Xo ~ X2}) For the steps depicted above the sequence w is given by wl = 0 and w2 = 2 and the feature description derived by 7r from 0 to 2 (S~_~2) is {SUBJ X0 ~ Xl,X0 ~ X2,X2 ~ x2.1,XCOMP x2 ~ x2.2}."]},{"title":"Sentences","paragraphs":["are then defined as follows. 5. DEFINITION. A terminal string w (w E V~) is"]},{"title":"a sentence","paragraphs":["iff there is a derivation (So, 0) = r0..Trn with"]},{"title":"Wn","paragraphs":["= S[w]0 and 3x~1 ..x,~ A S~-\"~n(X~tl' \"\""]},{"title":"Z~tm)","paragraphs":["satisfiable. 3","In the following we write S\" for S~_+n if the interval covers the whole derivation, i.e. if ~r is of length n.","Since a specific reduction algorithm and a few model-theoretic facts required in the proofs later on can be introduced by showing how satisfiability of such existential prenex formulas can be decided, we will continue with a short excursion on satisfiability.","3We use s[w]o to denote an S-rooted c-structure with yield w. 46 2.1 Satisfiability In order to test whether for a given finite set of literals S of a feature-description language (2)"]},{"title":"(2) 3z~..zt A S(x~,.., zl)","paragraphs":["is satisfiable, we can exploit by skolemization wellknown test procedures available for quantifier- and variable-free sets of such literals. Let C be a set of Skolem-constants ([{xl, ..,xz}[ ="]},{"title":"ICl)","paragraphs":["and 0 be a bijective function from {Xl, .., xt} to C, then (2) can be tested by testing the set of literals (3) over L(C) 4 (3)"]},{"title":"S[0],","paragraphs":["since (2) and (3) are equi-satisfiable. In the following we complete the procedure by introducing a reduction algorithm that reduces a set of literals (3) according to a measure in a sequence of measure decreasing rewrite steps to a deductively equivalent set (4) (in reduced form) (4)"]},{"title":"(S[e])p,","paragraphs":["which is satisfiable iff the terms 7- of all inequalities T ~ 7- of (4) do not occur as subterms in equations of (4).5","For the proof we first introduce a few definitions and some notation. Let 7- be the set of terms of a variable-free feature-description language"]},{"title":"L(C).","paragraphs":["Then an injective function m • [7- ~ ~l*] is a"]},{"title":"measure","paragraphs":["iff it satisfies the following conditions for all T, T' • 7\" and a • FI*: (i) if [7-[ < [7-'[, then"]},{"title":"re(w)","paragraphs":["< m(7-'), (ii) if re(r) <"]},{"title":"m(7-'),","paragraphs":["then"]},{"title":"m(aT) <_ m(a'c').","paragraphs":["For literals and sets of literals S we extend a measure m as usual by m((.~)7- ~ 7-')="]},{"title":"m(7-)+ m(7-') and re(S) = Era(C). Ces","paragraphs":["In the following we use"]},{"title":"7- ~7-'","paragraphs":["iff m(7-) >"]},{"title":"m(7-')","paragraphs":["and 7-~7-' to denote ambiguously 7- ~ 7-' or 7-~ ~ 7-. Let S be a set of literals then E denotes the set of all equations in"]},{"title":"S, 7-s","paragraphs":["the set of terms occurring in the formulas of"]},{"title":"S (7-s","paragraphs":["= {~-, 7-' [ (\"~)7- ~ 7-' • S}) and SUB(Ts) the set of all"]},{"title":"subterms","paragraphs":["of the terms in 7~ SUB(7~) ="]},{"title":"{7-[a7-","paragraphs":["• 7~, with a • FI*}. For the construction of a reduced form we need a","specific partial choice function p which satisfies"]},{"title":"p(S) • {7- ~7-' • SIT • SVS(Ts\\{r~.,.,})}","paragraphs":["if the specified set is nonempty and undefined otherwise. 6. DEFINITION. For a given finite set of literals S and a choice function p we define a sequence of sets"]},{"title":"Sp,","paragraphs":["(i > O) by induction:"]},{"title":"Spo =S f( Spi\\{ 7-~-.7-t} )[r/v' ] U","paragraphs":["{7-~T t} if"]},{"title":"p( Sp, ) = 7- ~7-' Sp,+, = [So,","paragraphs":["if"]},{"title":"p(S m)","paragraphs":["undef.","aThe feature-description language which in addition to L provides a distinct set of Skolem-constants C'. Cf. the appendix for more details.","~The algorithm is adapted from Statman 1977 and Knuth and Bendix 1970 and first applied to feature-description languages by Beierle and Pletat (1988). Since"]},{"title":"m(Sm) > m(Sp,+l )","paragraphs":["ifp is defined for"]},{"title":"Sin,","paragraphs":["the construction terminates with a finite set of literals. If we set Sp = Spt ; with"]},{"title":"t = min{i [ Sp, = Sin+ ~ }","paragraphs":["the following lemma can easily be proven by induction on the construction of Sp. 6 7. LEMMA."]},{"title":"For Sp it holds that: (i) S ~F S o,","paragraphs":["(ii)"]},{"title":"if T~T' C S o then T","paragraphs":["¢ SUB(Tsp\\{r~r,}).","Since Sp is obviously not satisfiable if it contains an inequality T ~ 7 and 7 occurs as a subterm in Ep, the whole proof is completed by showing that we can construct a canonical model satisfying Sp if Sp does not contain such an inequality. For the model construction we need the set T~p = {r e SUB(TE,) ["]},{"title":"-~3T'(T ~T' e Ep)}","paragraphs":["and the function h c E [SUB(7-Ep) ~ 7-~,] which is defined for each 7- e SUB(TE,) by"]},{"title":"f ,T'(7-~T' Ep) if 7-","paragraphs":["E,"]},{"title":"h e (T) = • f[ T'c [7-","paragraphs":["otherwise. That"]},{"title":"h e","paragraphs":["is well-defined results of course from 7(ii). 8. DEFINITION. For a set of literals S o the"]},{"title":"canonical term model","paragraphs":["is given by the pair Mp ="]},{"title":"(Hp, .~p),","paragraphs":["consisting of the universe"]},{"title":"Ltp=[7~,","paragraphs":["ifE, ~ 0 [.{O} otherwise and the interpretation function ~p, which is defined forc•VUC, f•/'l and 7-•Hpby:"]},{"title":"[M(c)","paragraphs":["if c • SUB(TE,) ~p(e) = I.undefined otherwise"]},{"title":"~ h~(fT-)","paragraphs":["if"]},{"title":"fT- •","paragraphs":["SUB(TE,) \"~P(f)(7-) = [undefined otherwise. For Mp which is well-defined the following lemma holds: 9. LEMMA."]},{"title":"If 7- is a subterm of Ts, then","paragraphs":["(i) ~p(7-) ="]},{"title":"he(7-), if 7- •","paragraphs":["SUB(TE~), (ii) 7- • SUB(T~),"]},{"title":"if T • Dom(.~o).","paragraphs":["PROOF. (By induction on the length of 7-.) The lemma is trivial for constants. By showing (i) be-fore (ii) we get the induction step for a subterm"]},{"title":"fT-","paragraphs":["of Ts, in both cases according to"]},{"title":"~p(fT)","paragraphs":["= ~p(f)(-~p(7-)) ="]},{"title":"~,(f)(hC(7-))","paragraphs":["= ~p(f)(7-). We get .~p(7-) ="]},{"title":"hC(T)","paragraphs":["by inductive hypothesis and"]},{"title":"M(7-)","paragraphs":["= % since 7- ¢ Hp would imply the existence of","6In order to verify 7(i) cf. e.g. Wedekind 1991 and 1994."]},{"title":"47 T ~ r' • E o","paragraphs":["and"]},{"title":"fT","paragraphs":["could not be a subterm of 7~p according to lemma 7(ii). Now, if (i)"]},{"title":"fT •","paragraphs":["SUB(TEp) then"]},{"title":"~p(f)(T)","paragraphs":["is defined and equal to"]},{"title":"h~(fr)","paragraphs":["and (ii) if"]},{"title":"fr •","paragraphs":["SUB(Ts,) and"]},{"title":".~o(fT)","paragraphs":["is defined then"]},{"title":"fr •","paragraphs":["SUB(TE~). [] On the basis of lemma 9 it is now easy to prove:"]},{"title":"10. LEMMA. VT ~ T • So(7\" ¢ SVB(\"fEp))","paragraphs":["--~PMp S O. PROOF. (If the condition is satisfied ~M, ¢ holds for every ¢ •"]},{"title":"So. )","paragraphs":["If ¢ = ~'~T' • S o with"]},{"title":"m(T') < m(r),","paragraphs":["then v' • T~o by 7(ii) and hence"]},{"title":"hC(T ') = T'.","paragraphs":["We get then h~(~ -) = T' for"]},{"title":"m(T') = m(T)","paragraphs":["by T' = T and for m(~-') < m(~-) by the definition of h ~, since r ¢f T~. Thus ~p(T) = ~p(T') by 9(i) and hence ~Mo ¢. Assume ¢=TCT'. If T~7' were satisfied by Mp, we would get ~p(T)="]},{"title":"~p(T')","paragraphs":["and by 9(ii)"]},{"title":"T,T'•SUB(TE,).","paragraphs":["Since 7(ii) ensures"]},{"title":"he(r)","paragraphs":["= h~(~ -') = v = ~-', we would have"]},{"title":"~- ¢ r • Sp","paragraphs":["with"]},{"title":"T • SUB(TEo). []","paragraphs":["Finally it should be mentioned that Mp is a unique (up to isomorphism) minimal model for Sp, i.e. if M is a model for So, homomorphic to Mp, then every minimal submodel of M that satisfies S o is isomorphic to Mp."]},{"title":"3 The Generation Problem and its Decidability","paragraphs":["Although it was not necessary for the definition of the sentences derivable by a unification grammar, we now have to make explicit that also a feature description is assigned to a sentence. 11. DEFINITION. A terminal string w (w • V~) is"]},{"title":"derivable with","paragraphs":["feature description 3Xl..Xl¢(Xl,..,"]},{"title":"xt)","paragraphs":["iff the feature description is satisfiable and there is a derivation (S~, O) = ~r0..Ir,~ with w~ = s[w]~ and"]},{"title":"¢=AS ~.","paragraphs":["Since deductively equivalent consistent feature descriptions are assumed to describe the same set of feature structures (models), the assignment of entities to terminal strings determined by a unification grammar is then formally given by a binary relation A between terminal strings and sets of classes of deductively equivalent feature descriptions"]},{"title":"[?Xl","paragraphs":["..Xl ~)( X l , .., Xl ) ]'-tF .7 12. DEFINITION. For each terminal string w • V~ and each class [Sxl..xl¢(Xl,.., xl)]:"]},{"title":"A(w, [3xl ..xl¢(xl,..,","paragraphs":["xl)]) iff w is derivable with 3zl..zl¢(zl, ..,"]},{"title":"xt).","paragraphs":["Definition 12 now brings us closer to the problem, since we can for any unification grammar in rather abstract terms specify what parsers and generators are: a parser is a procedure which recursively enumerates for any given string w the set"]},{"title":"{[~Xl..XI~)(Xl,.-,","paragraphs":["Xl)] [ A(W,"]},{"title":"[3X 1..xI¢(xl,.., Xl)])}","paragraphs":["7We omit the index of the equivalence classes in the following. and a generator is a procedure which recursively enumerates for any given class"]},{"title":"[3Xl..Xl¢(xl, ..,","paragraphs":["xl)]: s"]},{"title":"{w • y~ l A(w, [3Xl..Z,C(Xl, ..,z,)])}.","paragraphs":["Whether adequate algorithms (effective procedures) can be formulated depends on the decidability of the corresponding"]},{"title":"parsing","paragraphs":["and"]},{"title":"generation problem.","paragraphs":["In our case (generation), it is the problem whether"]},{"title":"3w • y~(zx(~, [3Xl..X~¢(xl, .., x~)]))","paragraphs":["is decidable for any given class"]},{"title":"[3xl..xl¢(xl,","paragraphs":["..,xl)]. The decidability of the generation problem alone ensures the existence of algorithms which terminate in any case with an output, although they might (of course) not be able to produce all possible solutions. Despite decidability, inputs can still be infinitely ambiguous ([{w • V~ [A(w,"]},{"title":"[3xl..xl¢(Xl,","paragraphs":["..,xl)])}] infinite). In order to prove the decidability of the generation problem (theorem 13), we proceed in two steps. 13. THEOREM."]},{"title":"It is decidable for each feature description 3yl..Yk¢(Yl,..,yk) whether there is a terminal string w • V~ which is derivable with","paragraphs":["3Xl..Xl¢(xl,..,"]},{"title":"Xl) and 3yl ..Yk¢(Yl,.., Yk) qF- 3Xl","paragraphs":["..Xt¢(Xl, .., Xl). In the first step we show that we can always shorten a derivation of a sentence w with (consistent) feature description ¢ to a derivation of a sentence w' with feature description ¢' and ¢ -t~- ¢' whose length is bounded by the \"size\" of ¢. By showing in the second step that two deductively equivalent consistent feature descriptions have the same \"size\" theorem 13 follows, since only a"]},{"title":"finite","paragraphs":["set of derivations (those whose length does not exceed this upper bound) have to be inspected in order to decide 3w • V~ (A(w, [¢])) for an arbitrary consistent input"]},{"title":"¢. 3.1 Redundant Recursions and Pumping","paragraphs":["For the proof that for a derivation of a sentence w with (consistent) feature description ¢ there always exists a short derivation of a sentence w' with feature description ¢' and ¢ -tt- ¢' we exploit the fact that a c-structure may contain recursions of the form depicted in figure 2 whose corresponding subderiva-tions in ~r are eliminable. Such recursions are called"]},{"title":"redundant. 14. DEFINITION.","paragraphs":["Let rr be a derivation of a sentence"]},{"title":"uvzxy","paragraphs":["of length m + k + 1 whose c-structure derivation has the form"]},{"title":"~O0..t.dm..O.~rn-t-k..Wm-l-k-bl","paragraphs":["-~"]},{"title":"OQn","paragraphs":["with"]},{"title":"wm=","paragraphs":["S[U, A u, Y]0 and aJm+ k : s[U, AIr, Au.~, x],, Y]0 (reorder if necessary). If 7r' is a derivation of"]},{"title":"uzy","paragraphs":["of length m+l which is defined for each j"]},{"title":"(O < j < rn+l)","paragraphs":["by {r~j if j <_ m"]},{"title":"7r~ = (s[ury]~, S)","paragraphs":["if j > m and 7rj+k ="]},{"title":"(s[uvrxy]~,S)","paragraphs":["SWe assume here strong reversibility, since a generator is for a given input y simply a parser which operates on A-I: it recursively enumerates instead of {x I A(x ,y)} the set {x I A-I(x,Y)} •"]},{"title":"48 \\","paragraphs":["u v z x y Figure 2 A c-structure with recursion A[V, A~.~, x]t, (1~1 > 0). and"]},{"title":", {;rj ifj<_m","paragraphs":["wJ = .t if j>m and wj+k = #.~.~ then"]},{"title":"7rm+l...~m+ k","paragraphs":["is a"]},{"title":"redundant recursion","paragraphs":["iff"]},{"title":"3x,..x~ h S~(xt, .., x~) ~ 3xl \"x'k h S~'","paragraphs":["(xl, .-, x~)- If we assume that a given derivation of a sentence is already shortened to a derivation without redundant recursions it remains to show that the length of such a derivation could not exceed the upper bound determined by the \"size\" of the derived feature description.","The \"size\" of a consistent feature description is on the one hand determined by the size of its minimal model, and on the other hand determined by a normal form into which every feature description can be converted. The conversion is performed in two steps. In the first step, we eliminate as many variables as possible by substitution. 15. DEFINITION. If"]},{"title":"S(Xl,..,Xl)","paragraphs":["is a set of literals, then"]},{"title":"xi","paragraphs":["is"]},{"title":"eliminable in S(xl,..,xl)","paragraphs":["iff there is a term T not containing"]},{"title":"xi","paragraphs":["such that ~- 3zl..x~(A S(Xl, .., ~) ~ z~ = r). 16. NOTATION. In the following we write"]},{"title":"S[x~, .., xz]","paragraphs":["iff each xi is not eliminable in S. 17. DEFINITION. We assign to a set of literals"]},{"title":"S'(x~,..,x~,x~,..,X~k)","paragraphs":["a set"]},{"title":"R(S')","paragraphs":["which contains a set"]},{"title":"S[x~,..,xt]","paragraphs":["iff there is a substitution O E [{x~, ..,x~} ~-~"]},{"title":"T(x~,","paragraphs":["..,x,)] such that ~..~,~..x~(A s' ~ ~ ~ o(~)) for all ~ (1 < i < k) and"]},{"title":"Sfz~,","paragraphs":["..,~] ="]},{"title":"S'[O]?","paragraphs":["By the substitutivity theorem we get: 18. LEMMA."]},{"title":"If SfXl, .., xl] E R(S'(Xl,.., xl,X~l,.., x~k)) then 2x~ ..x~k(A S - A S').","paragraphs":["In the second step, we make the set of literals independent, i.e. we remove those literals which are implied by the remaining subset."]},{"title":"~T(x~,..,xt)","paragraphs":["denotes the set of terms over V, {x~, .., x~} and F~. 19. DEFINITION. A set of literals"]},{"title":"S(xl,..x~)","paragraphs":["is"]},{"title":"independent","paragraphs":["iff there is no formula ¢ E S for which"]},{"title":"F- ~xl..xl(A(S\\{¢})","paragraphs":["D ¢) holds."]},{"title":"Normal forms","paragraphs":["are then defined as follows. 20. DEFINITION. A consistent feature description"]},{"title":"~xl..xl A Six1,.., xt]","paragraphs":["is in"]},{"title":"normal form","paragraphs":["(in the following indicated by a v index) iff"]},{"title":"S[xl, .., xl]","paragraphs":["is independent. Furthermore, we call ~xl ..xl A S~ Ix1, .., xl] a"]},{"title":"normal form","paragraphs":["of"]},{"title":"~xl..xtx'~..x~","paragraphs":["h S'(xl, .., x~) iff S~ Ix1, .., xt] is an independent subset of"]},{"title":"S'[O] E R(S')","paragraphs":["and"]},{"title":"~Z1..Xl(ASv[Xl,..,Xl]","paragraphs":["~ ASt[0]) • Lemma 18 and the condition in definition 20 ensure that a consistent feature description and its normal forms are deductively equivalent.","In order to be able to show the existence of a redundant recursion, we exploit the simple fact that the information which contributes a literal in a normal form with a minimal model (Up, ~p} can be specified by an equation ~-~ 1 -s where IT[ + [rq < [Up[ + 2. A literal r ~ O'a'T 't ([a I > 0) whose terms are longer must always be reducible by a loop 5rtT tl ,-~ T II to a shorter equation. Since the construction of such an information piece can be done with a subderivation of some fixed length, there must be a redundant recursion if the length of whole derivation exeeds a fixed value which is dependent on [Hp[ and [S~[ and exactly specified in lemma 21.1° 21. LEMMA."]},{"title":"Suppose that w E V~ is derivable with ¢ = ~xl ..xtx'l..x'k A S~(xl, .., x'k) over ~r of length n, that ~xl..xl A S~ Ix1,.., xl] is a normal form of ¢ and that M o = (Up, ~o) is a minimal model of ¢. If ~r has no redundant recursions then each path of wn is shorter or equal to IVN[ .","paragraphs":["(3"]},{"title":"[Hol +","paragraphs":["1)- (IS~[ + 1). PROOF. Suppose, one path of"]},{"title":"wn","paragraphs":["were longer than"]},{"title":"IVN[.","paragraphs":["(3 [Up[ + 1). ([S~[ + 1), then more than (3 I/~p] + 1). ([S~ I + 1) different nodes on that path had to be labelled by the same A E"]},{"title":"VN.","paragraphs":["Without loss of generality we can assume that lr is a derivation whose c-structure derivation w has the form"]},{"title":"Wo..wm..wn","paragraphs":["with"]},{"title":"wm=","paragraphs":["s[u, A,, y]~ for each node # on that path which is labelled by A (reorder if necessary). In order to exclude that complex inferences are used to build up 0, we assume furthermore that 0 is non-deterministicaUy constructed from S ~ by recursive variable substitution, i.e. we require for each"]},{"title":"(X, aT) E 0","paragraphs":["either"]},{"title":"x'~aT E S ~","paragraphs":["or"]},{"title":"~x~ay E S'((y,T) E 0).","paragraphs":["Finally, let S C S ~ with"]},{"title":"S~ = S[O].","paragraphs":["In order to identify the redundant recursion we have to consider the following cases. 1. Suppose there are more than [Sv[ + 1 A-labelled nodes # such that x i, does not occur in S \", then there must be more than"]},{"title":"[Su[","paragraphs":["non-overlapping recursions. For at least one of those recursions"]},{"title":"~rm+~...Trm+k","paragraphs":["it must hold that (S [~l S~+l_+rn_l_k) C (s~r.+rn [.J"]},{"title":"S~n+k..kl_~n).","paragraphs":["1°The given factor"]},{"title":"[VN[.","paragraphs":["(3[//p[ + 1). ([S~[ + 1) decreases for more restricted grammars, like e.g. grammars which allow only feature descriptions with single-rooted and/or acyclic minimal models."]},{"title":"49","paragraphs":["But then Sn ~r"]},{"title":"S c_ ( 0-~m u Sm+,+~)","paragraphs":["and ~rm+~...7rrn+k must be redundant. 2. If case 1 does not apply there must be more than 3 I/4p[ • (]S~ I + 1) distinct A-labelled nodes # on that path such that x, occurrs in S ~ and for more than 31S-I + 1 of these nodes must pairwise hold","~.-z~ (h s ~ ~ x, ~ ~.~). But then there must be at least three recursions such that and"]},{"title":"(S n s~+~_~+~+~+z) G ($8~ ~ s~\\~+.+~+~_~.).","paragraphs":["We can then assign to each recursion 7rm+l...Trrn+k (m=i,k=l; m= i +l,k=v or m=i+l +v,k= z) a type which corresponds to the strongest of the following conditions the recursion satisfies. (a) ~,~+~...~m+~ satisfies (b) It holds only"]},{"title":"~- ~..x~(A S~+~+~ ~ z,.~ ~ ax,)","paragraphs":["with lal > 0 and aO(x,)..~ O(x,) is implied by ~-Sxl..x'k(ASo'_,m+~ A S~) where S a is the set of ground literals of S. (c) Or it holds","t 7r with ]a' I > 0 and a'O(x,.~) ~ O(x,.~) is implied by ~-"]},{"title":"~z~..z~(A","paragraphs":["S~+l~ A S~). (d) If a recursion which satisfies ([a I > O) is not of type (b) then there must be a ground term T which is not reducible in terms of x~, i.e. t? can not satisfy T = a'O(x,) for some non-empty prefix a', and (e) For a recursion with which is not of type (c) we get for x, the same property as for x,.~ in (d). (f) If the previous cases do not apply, the recursion might satisfy with"]},{"title":"lal >","paragraphs":["0 and"]},{"title":"Io'1 >","paragraphs":["0. Since x~, is not eliminable in terms of x,., and vice versa, there must be ground terms T, y' such that ~..~%(A s ~ 3 ~. ~ ~ A x..~ ~ ~' A ~ ~ ~'). (g) If a recursion is not of type (a-f) then ~- 3Xl..Xk( A Sm+l_~m+k D ax ~ x, A a'y ~ x~.~). But then x, and x~.~ must be ground eliminable as in (f). Since a recursion of type (a-c) is not redundant if it contains terms T or T' such that T is not reducible in terms of x, and r' is not reducible in terms of x~.~ and ~- or T ~ are used to eliminate x, and x, ~, there must be at least one recursion 7r,~+l...Trm+k such that and 0 still follows either by ground inferences or due to the properties of (b) and (c). [] If lmax = max{Iw[ l ((A,w),Srl e R} then the following pumping lemma follows immediately as a corollary. 22. COROLLARY. Suppose that w E V~ is deriv-","lr X I able with ¢= ~Xl..X~X~l..X~kAS (x,..,Xk) over of length n, that 3Xl..xl A Sv[xl,..,xl~ is a normal form of ¢ and that Mp=(Hp,~p) is a mini-","I ~ Iwl \"- l IV~F(21U;l+l) then mal model of ¢. j j l max w has the form uvzxy with vx >0 and for all i> 1:","! {~v~zx~y,"]},{"title":"[~x~ ..z~ ~'~ .. ~'k/\\ ̂S\" (~, .., ~k)]) e A.","paragraphs":["PROOF. If Iwl > lWalx (~IupI+I) then at least one path ofwn is longer than [VNI\" (2 ]Hal + 1) and more than 2[H;[ + 1 different nodes on that path are labelled by the same A E VN. Without loss of generality we assume again that 7r is a derivation whose c-structure derivation w has the form w0..w,~..w,~ with Wm = s[u, A,, Y]0 for each node p on that path which is labelled by A, and that 0 is non-deterministically constructed from S ~ by recursive variable substitution, i.e. we require for each (x, ar)E 0 either x~ffT e S ~r or 3x~ay • SW((y,T) • 0). Suppose furthermore that S C S ~ with S~ = S[0]. In order to isolate the recursion which allows pumping we have to distinguish the following cases. 1. If 7r contains a recursion 7~m~l...7rm+ k with wm = s[u,A~,y]0, 03mWk = s[u, Mv, A~.~,x],,Y]V and Ivx[ > 0 and x~ and x,.~ do not occur in S ~, we take 71\"mW1...Tl'rn+k. 2. If 7r does not contain such a recursion there must be at least three distinct A-labelled nodes ~, ~.A, ~.A.v on that path such that"]},{"title":"I'","paragraphs":["wi = S u ,A~,y%,","fv I A X I~ I1 w~+~=stu,At , ~.X, b,YJ0,","~+~+~"]},{"title":"= s[~', Ale, Air, A,.~.,,","paragraphs":["~],.~, ~'1~,"]},{"title":"V']0","paragraphs":["with Iv'x'l > O, Irsl > 0 and ~- ~z~..z'k(A S '~ ~ z~ ~ z~.~, ,~ z~.x.,). 2.1 Suppose there is a recursion of type (a-c) (cf. proof of lemma 21) we choose this one. 2.2 If 7r does not contain such a recursion each of the recursions must be of type (d), (e), (f) or (g). But then there must be one recursion \"ffrn+l...'ffrn+k (m=i,k=Iorm=i+l,k:v) with","I ff"]},{"title":"50","paragraphs":["for some ground terms T, T'. This recursion is choosen for the proof. On the basis of the recursion 7rm+i...TrmWk we can now define derivations r i as follows. We set 7r i = r and define ~r i+i on the basis of 7r ~ by"]},{"title":"I(:[U,A[virxi]~.~',Y]o,S) ifj>m+ikand ~T~+I","paragraphs":["i = . ~J-~ = (s[u,A[vi-1,':~i-1],.,.,~,-,,y]~,S) ~rj if"]},{"title":"j <_m+ik","paragraphs":["and zv~ if"]},{"title":"j <_ m + ik","paragraphs":["[#.ai.~ if"]},{"title":"j > m + ik","paragraphs":["and i"]},{"title":"~j--k ---- ~.~i--l.t.","paragraphs":["By induction on i it can then be shown for all possible cases that k 3x~..x~..(A S\" - A S'). [] 3.2 Invariance of the Parameters under","Deductive Equivalence Since the universes of the minimal models of two deductively equivalent consistent feature descriptions must have the same cardinality, for the completion of the proof of theorem 13 it remains to be shown that two deductively equivalent consistent feature descriptions have the same \"information content\", i.e. that the sets of literals of their normal forms have the same cardinality: 23. LEMMA."]},{"title":"Suppose that 3Xl..Xi A S~rxi,..,xl] and 3Yl..Yk A S~ [Yi , .., Yk ] are deductively equivalent consistent feature descriptions in normal form then","paragraphs":["We proof lemma 23 in two steps. First, we show that we can convert"]},{"title":"s'~rYl,..,Yk]","paragraphs":["into a set"]},{"title":"S~[xi,..,xl]","paragraphs":["with the same cardinality such that 3xl..xl (A S~ rxl, ..,"]},{"title":"Xl] -~- A S~'","paragraphs":["rxl, ..,"]},{"title":"xl] )","paragraphs":["holds. 24. LEMMA."]},{"title":"Assume that 3xi..xl A S~rxl,..,xl] and qyi..Yk A S~","paragraphs":["[Yl, .-,"]},{"title":"Yk ] are deductively equivalent consistent feature descriptions in normal form. Then","paragraphs":["H"]},{"title":"l ---- k and there is a set S~","paragraphs":["rXl, ..,xl]"]},{"title":"with","paragraphs":["H"]},{"title":"(i) IS,, rxi,.., :clll = is,, ryl,.., y,ql","paragraphs":["and"]},{"title":"(ii) I- 3x,..xl (A S,, rxl, .., xl] _= A s~,, [xi, .., xl]).","paragraphs":["PROOF. Suppose that {xl,..,xl} N {Yl,..,Yk} = (~ (rename if necessary), that"]},{"title":"S~[yl,..,yk]","paragraphs":["is in reduced form (the reduction of an independent set does not change the cardinality) and that M = (~, ~) is an arbitrary model of 3xi..Xl A S.rxi,..,xl] and"]},{"title":"~yl..ykAS'~ryl,..,yk]p.","paragraphs":["Let a and a' be assignments such that"]},{"title":"a ~M Su[Xl,..,xl]","paragraphs":["and"]},{"title":"a' ~M S~[Yl,..,Yk];.","paragraphs":["We show first that there is a bijective function"]},{"title":"1)","paragraphs":["•"]},{"title":"[{Xl,..,Xl} ~ {yl,..,Yk}]","paragraphs":["such that for all"]},{"title":"xi","paragraphs":["there is aai"]},{"title":"• F~ (i = 1, ..,l)","paragraphs":["and a variable"]},{"title":"1)(xi)","paragraphs":["occurring in S' with"]},{"title":"a(xi)","paragraphs":["="]},{"title":"~(aiO(xi))(a').","paragraphs":["First of all ~ is left-total, since"]},{"title":"a(xi)= ~(T)","paragraphs":["with T variable-free would imply that"]},{"title":"xi","paragraphs":["is eliminable in S. In order to show that ~ is a function, assume"]},{"title":"a(xi)","paragraphs":["="]},{"title":"~(ajyj)(a*)","paragraphs":["="]},{"title":"(~(ahYh)(a')","paragraphs":["for"]},{"title":"Yj,Yh","paragraphs":["occurring in S' with"]},{"title":"yj ¢ Yh.","paragraphs":["Since"]},{"title":"yj","paragraphs":["and"]},{"title":"Yh","paragraphs":["are not eliminable in S' there must be terms"]},{"title":"Tj, Th","paragraphs":["such that"]},{"title":"a'(yj)-=~(Tj)(a), a'(Yh) = ~(Th)(OL), ~(O'jTj)(OI) ~- ~(qhrh)(O 0 and","paragraphs":["there is no a • Fi* such that"]},{"title":"~(aTj)(a) =","paragraphs":["~(rh)(a) or"]},{"title":"~(aVh)(a) =","paragraphs":["~(Tj)(a). Thus, vj and Vh must be terms in"]},{"title":"T({xi,..,Xl}\\{xi})","paragraphs":["and"]},{"title":"xi","paragraphs":["would be eliminable in S. Suppose now that"]},{"title":"yj","paragraphs":["is not in the range of 1). Then there must be a term r with .~(T)(a) ----"]},{"title":"a'(yj).","paragraphs":["Since"]},{"title":"yj","paragraphs":["is not eliminable in S', T must be of the form"]},{"title":"axi","paragraphs":["and there must be a term T' with"]},{"title":"a(xi) =","paragraphs":[".~(T')(a'). If T' is a term in"]},{"title":"T({yi,..,yk}\\{Yj}), yj","paragraphs":["would be eliminable. Otherwise r' is of the form"]},{"title":"a'yj","paragraphs":["and we would get"]},{"title":"a(xi) = c3(a'yj)(a').","paragraphs":["Hence 1) is onto. Assume finally"]},{"title":"a(xi) = ~(aiYh)(a')","paragraphs":["and"]},{"title":"a(xj) = ~(ajYh)(a')","paragraphs":["with"]},{"title":"xi ~ xj.","paragraphs":["Then there must be a term r with"]},{"title":"a'(yh) = ~(T)(a).","paragraphs":["Since"]},{"title":"xi","paragraphs":["and"]},{"title":"xj","paragraphs":["would be eliminable in S if T is a term in"]},{"title":"T({xi, ..,xl}\\{xi,xj}),","paragraphs":["T is of the form"]},{"title":"axi","paragraphs":["or"]},{"title":"axj.","paragraphs":["But then either a(z~) = .~(a~x~)(a) or a(x~) = ~(m~xA(~). Thus, 1) is bijective and l = k. On the basis of 1) we then define a sequence of new sets S~ (0 < i _< l) by induction as follows (within the induction we assume"]},{"title":"1)(xi) -=","paragraphs":["y): s~ = s\" ryl, .., yl] p , [s~_,[y/~,] if a(x,) = ~'(y)"]},{"title":"Si = ((S~_l \\{y~o'o\"y} )[Y/o.x, ] U {x i ~ oJoxi}","paragraphs":["if (A), where (A) means"]},{"title":"a(xi) ~ a'(y), y~aa'y • S~_ 1","paragraphs":["and"]},{"title":"a(xi) = .~(a'y)(a').","paragraphs":["In the case where the variables refer to different nodes on a loop"]},{"title":"(a(xi) ~ a'(y))","paragraphs":["the definition is well-formed, since"]},{"title":"S~[yi,..,yl]p","paragraphs":["is reduced and normalized and thus there must be exactly one equation"]},{"title":"y~aa'y","paragraphs":["in S~_ 1 describing the loop with the node to which"]},{"title":"xi","paragraphs":["refers. For S\" = S[,"]},{"title":"IS~ rxl, .., xl]l ~- Is~ ryl,.., Yk]l","paragraphs":["follows immediately by induction on the construction of S'. Finally we get (ii), since"]},{"title":"3xi..xi(3xi+l..x~ A S~","paragraphs":["[xi, .., xl] -"]},{"title":"31)(x~+~ )..1)(xl) h s~ rx~, .., :~, 1)(x~+1 ),.., 1)(xl)])","paragraphs":["can easily be verified by induction on the construction of S\". [] Since two deductively equivalent independent and consistent sets of (variable-free) literals reduce to the same set of literals in reduced form, lemma 25 follows by skolemization and completes the proof of lemma 23. 25. LEMMA."]},{"title":"If Bxi..xl A Sv [xi, .., xl] is a consistent feature description m normal form andt- 3xi..xl(A S~rxi,..,xl ] ---- A S'~'rxi,..,xl]) then I&rzx,..,zlql --- Appendix: Syntax and Semantics of Feature-Description Languages","paragraphs":["A feature-descriptionlanguage"]},{"title":"L(C)","paragraphs":["consists of the logical connectives -.~ (negation), D (implication), the equality symbol ~, the existential quantifier 3 and the parentheses (,). The"]},{"title":"nonlogical","paragraphs":["vocabulary is given by a finite set of constants"]},{"title":"V (atomic values), 51","paragraphs":["a possibly empty finite set of constants C (Skolem-constants) and a finite set of unary partial ]unction symbols F1 (V, C, F1 pairwise disjoint). The class of terms and formulas of L(C) are recursively defined as usual. Feature descriptions of L(C) are expressions of the form 3xl..xl A Six1, ..,xt], where S is a finite set of (quantifier-free) literals. (We assume that the connectives v (disjunction), A (conjunction) and (equivalence) are introduced by their usual definitions.)","A model for L(C) consists of a nonempty universe b/and an interpretation function ~. Since not every term denotes an element in/d if the function symbols are interpreted as unary partial functions, we generalize the partiality of the denotation by assuming that ~ itself is a partial function. It is only required that all Skolem-constants denote. Suppose IX ~-~ Y] designates the set of all partial functions from X to Y and IX ~-~ Y] the set of all total functions from X to Y, then a model is defined as follows: 11 DEFINITION. A model for L(C) is a pair M = (b/, ~), consisting of a nonempty set b/and an interpretation function ~ = ~v U -~c U ~F1, such that (ii) ~c • [C ~-+/d], (iii) ~F, • IF1 ~ [U ~/d]], (iv) Vf • Fl(f • Dom(~) ~ ~(f) ¢O). If we extend the denotation function to terms and variable assignments c~, the definition of the satisfac-tion relation differs only in the clause for the equations from the usual one: O/ ~M T ,~ T' iff ~(T)(C~) and ~(T')(C~) are defined","and ~(T)(a) = .~(T')(~)."]},{"title":"References","paragraphs":["Beierle, C., and U. Pletat. 1988. Feature Graphs and Abstract Data Types: A Unifying Approach. In Proceedings of the 12th International Conference on Computational Linguistics. Budapest.","Kaplan, R., and J. Bresnan. 1982. Lexical-Functional Grammar: A Formal System for Grammatical Representation. In J. Bresnan, ed., The Mental Representation of Grammatical Relations. Cambridge, Mass.: The MIT Press.","Johnson, M. 1988. Attribute-Value Logic and the Theory of Grammar. Chicago: CSLI Lecture Notes Series, Chicago University Press.","Knuth, D., and P. Bendix. 1970. Simple Word Problems in Universal Algebra. In J. Leech, ed., Computational Problems in Universal Algebra. Elmsford: Pergamon Press.","Shieber, S., H. Uszkoreit, F. Pereira, J. Robinson, and M. Tyson. 1983. The Formalism and Implementation of PATR-II. In B. Grosz and M. Stickel, eds., Research on Interactive Acquisition and Use of Knowledge. SRI Final Report 1984. SRI International, Menlo Park.","llIf constant-consistency and constant/complexconsistency are to be guaranteed for the atomic values V or acyclicity has to be ensured for the models, special conditions can be added to the definition.","Statman, R. 1977. Herbrand's Theorem and Gentzen's Notion of a Direct Proof. In J. Barwise, ed., Handbook of Mathematical Logic. Amsterdam: Elsevier North-Holland.","Wedekind, J. 1991. Classical Logics for Attribute-Value Languages. In Proceedings of the 5th Conference of the European Chapter of the Association for Computational Linguistics. Berlin.","Wedekind, J. 1994. Some Remarks on the Logic of Unification Grammars. In C. J. Rupp, M. Rosner, and R. Johnson, eds., Constraints, Language and Computation. London: Academic Press."]},{"title":"52","paragraphs":[]}]}