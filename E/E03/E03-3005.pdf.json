{"sections":[{"title":"A Dynamic Logic Formalisation of the Dialogue Gameboard Raquel Fernandez Department of Computer Science King's College London","paragraphs":["raquel@dcs.kcl.ac.uk"]},{"title":"Abstract","paragraphs":["This paper explores the possibility of using the paradigm of Dynamic Logic (DL) to formalise information states and update processes on information states. In particular, we present a formalisation of the dialogue gameboard introduced by Jonathan Ginzburg. From a more general point of view, we show that DL is particularly well suited to develop rigorous formal foundations for an approach to dialogue dynamics based on information state updates."]},{"title":"1 Introduction","paragraphs":["A particular development that has received much attention in recent work on dialogue modelling is the use of information states to characterise the state of each dialogue participant's information as the conversation proceeds. The information state approach to dialogue, as developed for instance in the TRINDI project (e.g. (Bohlin et al., 1999; Traum et al., 1999)), assumes that some aspects of dialogue management are best captured in terms of the relevant information that is available to each dialogue participant at each state of the conversation, along with a full account of the possible update mechanisms that change this information. Unlike classical Artificial Intelligence approaches built on the basis of axiomatic theories of rational agency, 1 information state accounts tend to avoid","1 See e.g. (Cohen and Levesque, 1990: Grosz and Sidner, 1990: Sadek, 1991). the use of logical frameworks and concentrate on dialogue-specific notions such as common ground, discourse obligations and questions under discussion.","In this paper we explore the possibility of using a modal logic paradigm, namely Dynamic Logic (Hardl et al., 2000), originally conceived as a formal system to reason about computer programs, to formalise information states and update processes on information states. In particular, we present a dynamic logic formalisation of Ginzburg's dialogue gameboard (DGB) as introduced in (Ginzburg, 1996; Ginzburg, ms) and (Larsson, 2002). From a more general point of view, we show that Dynamic Logic is particularly well suited to develop rigorous formal foundations for an approach to dialogue dynamics based on information state updates. 1.1"]},{"title":"Overview","paragraphs":["The structure of the paper is as follows: First, we introduce the basic notions of First-Order Dynamic Logic, describing its syntax and semantics. After briefly characterising the structure of the dialogue gameboard in Section 3, our formalisation is presented in Section 4. We define the formal language and its semantic interpretation, and discuss how the different components of the dialogue gameboard have been modelled. In Section 5, we show how the rules of conversational interaction can be expressed within the formalism and explain some examples in detail. Finally, in Section 6, we present our conclusions and indicate some direc-tions for future research. 17 sRx: =t s' iff sR,os' iff"]},{"title":"sR,","paragraphs":["u"]},{"title":"8'","paragraphs":["iff iff"]},{"title":"sR","paragraphs":["cp"]},{"title":"?s'\\t","paragraphs":["iff s(3c vs (t))s' as\" such that sR s\" and"]},{"title":"s\"Ros'","paragraphs":["sR„s' or sRos' there are finitely many states Si, S2 \\t sr, such that"]},{"title":"siR,s2,","paragraphs":["s2R,93,\\t ,,,,, iRasn, and s = Si and s' ="]},{"title":"sn","paragraphs":["="]},{"title":"s'","paragraphs":["and M =, M 3 o if A"]},{"title":"=","paragraphs":[",o[v] s , for atomic formulae cp MT T is always true MI I is never true M =, (t1 = t2) iff","if vs"]},{"title":"(ti)","paragraphs":["equals vs (t2), for terms t1 and t2","M\\tA",".A4\\ts (Ai A A2) iff M\\tA1 and M =, A2 1=, (Al V A2) if M\\tA1 or M =, A2","M =, (Ai —> A2) iff M\\tA 1 or M"]},{"title":"=s","paragraphs":["A2 M = s xA if there is an a C D, such that"]},{"title":"s (x","paragraphs":["a) s' and M"]},{"title":"=","paragraphs":["s"]},{"title":",","paragraphs":["A M =,"]},{"title":"VxA","paragraphs":["if for all a E D, if"]},{"title":"s(x","paragraphs":["a) s' then M 1= s, A M\\ts"]},{"title":"<c2t>","paragraphs":["A if there is an s' C S, such that sRa s' and M = 8 , A =,"]},{"title":"[cdA","paragraphs":["if for all s' e S, if sR,s' then M = 8, A Table 1: Definition of truth Table 2: Accessibility relations"]},{"title":"2 Dynamic Logic: Basic Notions","paragraphs":["The formalisation we present in this paper is based on the first-order version of Dynamic Logic (DL) as it is discussed in (Hard et al., 2000) and (Goldblatt, 1992). In short, DL is a multi-modal logic with a possible worlds semantics, which distinguishes between expressions of two sorts: formulae and programs. The language of DL is that of first-order logic together with a set of modal operators: for each program a there are a box [a] and a diamond < ce> operator. The set of possible worlds (or states) in the model is the set of all possible assignments to the variables in the language. Atomic programs change the values assigned to particular variables. They can be combined to form complex programs by means of a repertoire of program constructs, such as sequence","non-deterministic choice U, iteration * and test"]},{"title":"?.","paragraphs":["Originally, DL was conceived as a formal system to reason about programs, formalising correctness specifications and proving rigorously that those specifications are met by a particular program. From a more general perspective, however, it can be viewed as a formal system to reason about transformations on states. In this sense, it is particularly well suited to provide a fine characterisation of the dynamic processes that take place in dialogue as updates on the information states of the dialogue participants.","In the remainder of this section, we formally introduce the syntax and the semantics of DL."]},{"title":"2.1","paragraphs":["Syntax The language of first-order DL is built upon First-Order Logic. It is generated by some first-order vocabulary E made up of a set of predicate symbols, a set of function symbols, a set of constants and a set of variables. In addition to the propositional connectives and the universal and existential quantifier symbols, the language also includes two modal operators 11 and <>, a set"]},{"title":"H","paragraphs":["of programs a and the program constructs ;, U, * and ?. Formulae and Programs. Atomic formulae are atomic, first-order formulae of the vocabulary E, including T and I. The set (I) of well-formed 18 \"=\\tal; a2 2.2 Semantics al U a2 G * sRX.push(x)si iff s (X v,(x) • vs (x))s' sRx.pop s'\\tiff s(x tail (I) s (x))s' 0?̀ formulae A is then defined as follows: A ::=\\t—'24_ A1 A A2 Al V A2\\t—>"]},{"title":"A","paragraphs":["2 VxAl]xA [a] A 1<a>A","In the basic version of DL, atomic programs 7 are simple assignments (x :="]},{"title":"t),","paragraphs":["where x is an individual variable and t is a first-order term. The set LI of programs a is defined as follows: as variables ranging over finite strings of elements in the domain. To manipulate these stack variables, two additional atomic programs x.pop and x.push(x) are included. Here x is some stack variable (i.e. a string of elements ) and stands for the element to be pushed onto x. The accessibility relations for these two new atomic programs are shown in Table 3, where, for a string a and an element a, tail(a • a) = a. As usual in modal logic, the language is interpreted in a possible-worlds based semantical structure. A model is a structure"]},{"title":"M = {A, S, R,V}","paragraphs":["where"]},{"title":"• A =","paragraphs":["{D,"]},{"title":"I}","paragraphs":["is a first-order structure; • S is a non-empty set of states;"]},{"title":"• R","paragraphs":["is a function assigning to each program a II a binary relation R, C S x S; • V is a function V : S SA assigning to each s"]},{"title":"e","paragraphs":["S an A-valuation vs : Var D, i.e. a mapping from the set of variables to elements in the domain.","For s, s' E S, we will write s(xla)s' to mean that vs, (x) = a and vs, (y) = vs (y) whenever y x.","Now we are ready to define the truth-relation .A4 A of a formula A at state s in model M. As usual in first-order logic, we write A 1= yo[v] to mean that r is true in"]},{"title":"A","paragraphs":["under valuation v. For conciseness, we will omit the part dealing with the semantics of first-order terms. The formal defini-tion of truth in a model is shown in Table 1.","From the relations R„CSxS, we can inductively define accessibility relations for the compound programs. Table 2 shows the accessibility relations for basic atomic programs and compound programs for all states s. S. Stack Variables. Interesting variants of DL arise from allowing auxiliary data structures such as stacks and arrays. Following (Harel et al., 2000), we will consider a version of DL in which programs can manipulate some variables as last-in-first-out stacks. Formally, stacks are modelled Table 3: push and pop programs"]},{"title":"3 The Dialogue Gameboard","paragraphs":["Following the pioneering work of philosophers like (Lewis, 1979) and (Stalnaker, 1979), the theory of context developed by Jonathan Ginzburg joins a line of research which, instead of focusing on the intentional attitudes of the dialogue participants, highlights the public and conventional aspects of communication. Under this perspective, a dialogue can be thought of as a conversational scoreboard that keeps track of the state of the conversation.","The dialogue gameboard (DGB), Ginzburg's particular version of the conversational scoreboard, plays a central role in his theory of context. It can be seen as the context relative to which conventionalised interaction is assumed to take place. The DGB provides a structured characterisation of the information which the dialogue participants view as common in terms of three main components: a set of FACTS, which the dialogue participants take as common ground, a partially ordered set of questions under discussion QUD, and the LATEST-MOVE made in the dialogue. In-spired by the notion of dialogue game (e.g. (Hamblin, 1970; Carlson, 1983)), Ginzburg assumes that each move made by a dialogue participant determines a restricted set of options for follow-up in the dialogue, constraining what can be said and how.","The framework has been used to provide an account of the kind of context that licenses elliptical responses in dialogue (Ginzburg, 1999; Fernandez 19 and Ginzburg, 2002; Fernandez et al., 2003) and has also been the starting point of implemented dialogue systems such as GoDiS (Cooper et al., 2001) and IBiS (Larsson, 2002)."]},{"title":"4 A DL Formalisation of the DGB","paragraphs":["To model context in dialogue as it is understood in Ginzburg's DGB, we will consider a particular domain of interpretation which includes entities such as agents (the dialogue participants), questions, propositions and dialogue moves. 2 For the sake of simplicity, in this paper we restrict our-selves to four dialogue move types, namely ask, assert, clarification request and acknowledge. The main strategy to reason about the effects of conversational interaction on the DGB, will be to represent its main components as variables ranging over different domains. In what follows, we introduce the details of our formalism. 4.1 Introducing the Formalism Let ,C be a first-order DL language with equality made up of unary predicate symbols Q,P,G,"]},{"title":"DP,","paragraphs":["binary predicate symbols infl(uences) and ans(wers), a ternary predicate symbol Utt, a function symbol whether, constants a, b, ask, ass, clr and ack, and an infinite set Var of variables x. Var includes a set V1 = { LMa , LMb, UTTI of special individual variables and a set V2 = {FACTS, QUD a , QUDb, PENDING,, PEND ING} of stack variables. We also introduce a function symbol head to be applied to stack variables.","The set of variable symbols Var also includes symbols i, j which range over the set of dialogue participants, symbols q, q\" and p, p' ranging over questions and propositions respectively, symbols T. r' ranging over propositions or questions, symbols m, m' ranging over moves, and symbols u, u' ranging over utterances.","Language r is interpreted over a first-order structure"]},{"title":"A = {al}.","paragraphs":["The domain"]},{"title":"D","paragraphs":["of A is made up of a set of dialogue participants DP"]},{"title":"v","paragraphs":["= {a'. b'}, a set of questions Q"]},{"title":"v","paragraphs":[", a set of propositions"]},{"title":"Pv ,","paragraphs":["a set of dialogue moves"]},{"title":"M =","paragraphs":["2Note that both propositions and questions are first-class entities in the domain While this is not the standard approach, it is familiar from situation theoretic work and makes the current formalisation simpler. {ask', ass', clrl , acki }, and an element 1 which is used to interpret the predicate symbol G, i.e. we set 1(G) = {1}. A number of relations are declared over D: infl is interpreted as a binary relation on Q"]},{"title":"v","paragraphs":[", ans as a binary relation between PD and Qv , and Utt as a set of utterances Utt"]},{"title":"v","paragraphs":[", that will be modelled as triples (i, m, r) of a dialogue participant, a dialogue move and either a proposition or a question. The function symbol whether is interpreted as a function whether such that for every proposition p, whether(p) E QT) . Finally, head is interpreted as a function that maps every string to its first element.","Recall that stack variables range over strings of elements in the domain: Let Q*,"]},{"title":"P* Utt*","paragraphs":["denote the set of all finite-length strings over Q"]},{"title":"v","paragraphs":[", P"]},{"title":"v","paragraphs":["and Utt"]},{"title":"v","paragraphs":[", respectively. This will be used later on to model the stack variables in V2. 4.2 The DGB Components As mention earlier, in DL, transitions between states are changes in variable assignment. We therefore represent the dynamic aspects of the information state as variables ranging over different domains. In particular, we use the variable names FACTS, QUD and LM to represent the three different components of the DGB. We also include two additional variables UT T and PENDING. New utterances are assigned to UTT and, in case the addressee cannot ground their content, they are also assigned to PENDING. This allows to distinguish between two kinds of grounding: content grounding (the value of UTT is assigned to LM) and proposition grounding or acceptance (a proposition is incorporated onto FACTS).","To model content grounding we use a unary predicate G and assume that G(x) only holds when the addressee of a particular utterance can ground its content. That is, according to the formalisation introduced in Section 4.1, G(x) will be true in all those states where v (x) = 1. As an abbreviation, we will write G when G(x) and v (x) = 1, and otherwise.","One of the assumptions behind the DGB is that a realistic characterisation of context must allow for asymmetries between the information available to the different dialogue participants at a given point in a conversation. Thus, although the 20 DGB attempts to represent the publicly accessible information at each state of the dialogue, it does so in terms of the collection of individual information states of the participants. In the current formalisation, however, only QUD, LM and PENDING are relative to each dialogue participant, while FACTS and UTT are unique. This is an obvious choice for the case of UTT, which is just used to hold new contributions publicly uttered by any dialogue participant. In the case of FACTS, however, this is a simplification motivated by the fact that the current formalisation only attempts to model simplified situations where FACTS is assumed to be empty at the initial state, and only propositions that have been commonly agreed on can be integrated into it. Thus, there is no room for disagreements in this respect, and the set of FACTS is always the same for the two dialogue participants.","We model QUD and PENDING as stacks, in a way that is very much inspired by Qui) 's actual implementation in the GoDiS dialogue system (Cooper et al. 2001). Although we think of FACTS as a set, 3 for technical reasons that will become clear below, we also model FACTS as a stack. On the other hand, UT T and LM range over utterances, i.e. triples (i, m, r), where i is interpreted as the speaker of U, 171 is the dialogue move performed by u and r represents its content. Formally: \\tV(FACTS)\\t","P* \\tv(QUDa )\\t Q*","\\tv(QUDb )\\t Q*","\\tv(PENDINGa )\\t utt*","\\tv(PENDINGb)\\t","utt*","\\tv(LMa )\\t","uttp","\\tv(I,Mb)\\t","uttp","\\tv(LITT)\\t","uttp","The reason why FACTS is modelled as a stack variable is that we want to be able to check whether a particular element (i.e. some proposition) is in FACTS, and we want to be able to express this in the object language. Modelling FACTS as a variable ranging over strings of propositions allows us to use the pop program to check whether a particular element x belongs to FACTS or not: if x is in FACTS and we pop the stack repeatedly, x will show up at some point as the head","3 Arguably, there are reasons to postulate some kind of or-der within the set of facts. See (Ginzburg, 1997) for an account of the restrictions on which contextually presupposed facts can serve as antecedents for some anaphoric elements. of the stack. Thus, we will use the notation x"]},{"title":"e","paragraphs":["FACTS as an abbreviation for < FACT S.pop * > head(FACTS) = x."]},{"title":"5 Constraining the Model","paragraphs":["Our main aim in this section is to show that the formalism outlined previously can be used to express the rules underlying cooperative conversational interaction in terms of update operations on the DGB. The current formalisation attempts to model three different scenarios: asking and responding to a question, integrating a proposition into the commonly agreed facts, and asking for clarification when the content of an utterance has not been grounded.","In (Fernandez, 2003) these scenarios were modelled in the form of complex DL programs corresponding to conventional protocols. From an abstract point of view, protocols can be thought of as a way to characterise the range of possible follow-ups in cooperative dialogue or, alternatively, as a representation of the obligations the dialogue participants are socially committed to (see (Traum and Allen, 1994; Kreutel and Matheson, 1999)). In the present paper, however, we opt for a different strategy: our aim here is to describe the appropriateness conditions for each particular scenario by means of a set of axioms, that is, a set of formulas we postulate to be valid in the model. The aim of these formulas is to restrict the operations that can be performed on the DGB components. In this sense, they can be seen as constraints characterising the appropriateness conditions of simple programs like UT T := (i, c 1 r , r) (asking a clarification question) or FACT S.push (x) (integrating an item into the common ground).","In what follows we are going to present a few of examples in detail. 5.1 Asking for Clarification Following Ginzburg's account, we assume that when a dialogue participant a utters an utterance L, LMa is updated with ?I. If the content of LM, is a question q, q is pushed onto QUD a . Asserting a proposition p raises the question whether p for discussion. Thus, if the content of LMa is a proposition p, whether(p) will be pushed onto QUD a . At this stage, if the addressee of u can ground its 21","Vu (u = (a, in, r) A (UTT = LM, = A ((Q(r) A head(QUD a ) = r) V (P(r) A head(QUD a ) = whether(r))) A","< PEND INGb.push(u) > T A Vx [PEND INGb.push(x)] (x = u))","Vu (u = (a, m, r) A (head(PENDINGb) = UTT = u)","Q(q)A <UTT := (b, clr,q) > T) A (Vim' q [uT T := (i, m', q)] (i = b) A (ml = clr) A Q (q))) Table 4: Asking for Clarification","Vup (7.1 = (i, ack,r) A (LMa = LMb = u) A P(p) A head(QUD G ) = head(QUDb) = whether(p) A p V FACTS —","> <FACTS.push(p) > T A Vi [FACT S.push(x)] (x = p))","Vp P(p) A (p C FACTS) A (head(QUD a ) = head(QUDb) = whether(p)) < QUD a .pop; QUDb.pop > T Table 5: Accepting a Proposition content, she updates her LM and QUD accordingly. On the other hand, if the addressee cannot ground the content of u, then it will be put aside and a clarification question will be posited.","Table 4 shows the axioms formalising this latter possibility. Let us have a closer look at the first formula. The antecedent describes an information state where an utterance it with content r is the value of UTT and Lma , the head of QUD a is either r (in case r is a question) or whether(r) (in case r is a proposition), and G does not hold. This means that the utterance it has just been posited by dialogue participant a and that the addressee b has not been able to ground its content. In such a situation the information state should be updated by pushing that utterance it onto PEND INGb. This is expressed in the consequent of the implica-tion, firstly by a diamond formula which guarantees that the update operation is actually being performed, and secondly by a box formula which ensures that no utterance other than it can be pushed onto PEND INGb.","In the second formula, the antecedent describes a situation where an utterance it with speaker a is the value of both UT T and PEND INGb. That is, an utterance that has just been posited by speaker a is pending in b's information state. This situation triggers a request for clarification that should be performed by speaker b. This is expressed in the consequent of the formula again by means of a diamond and a box formula, which ensure that the information state will be updated by assigning to UTT an utterance (b, c 1r , q) such that its speaker is dialogue participant b, its content is a question q, and the dialogue move performed is clr. 5.2 Proposition Acceptance In the current formalisation, all propositions have to be acknowledged before being introduced into the commonly agreed facts. Only once an asser-tion has been acknowledged it is considered to be accepted by the two dialogue participants.","The axioms formalising the integration of a proposition into FACTS are shown in Table 5. The formulas follow the pattern already described in the previous subsection. In this case, the antecedent of the first formula describes a situation where an utterance it performing an ack dialogue move is both the value of LMa and Lmb, the head's value of QUD, and QUD b is whether(p), where p is a proposition, and p is not in FACTS. This is the situation that licenses the integration of a proposition into the common ground. This is expressed by the consequent of the axiom which, again by means of a diamond and a box formula, ensures that proposition p is pushed onto FACTS.","Once p belongs to FACTS, whether (p) can be downdated from QUD. The second formula formalises precisely this situation. 22","V q (Q(q) A (head(QUD a ) = head(QUDb) = q) A H]p (P (p) A (p E FACTS)) A ans(p, q)) airnr (<UTT :="]},{"title":"(i,","paragraphs":["m, r)> T) A Vimr QuiT := (i, m, r)] ((m = ass) A PH A ans(r, q) A (r"]},{"title":"E","paragraphs":["FACTS)) V ((m = ask) A Q(r) A infl(r, q))))","Vpq P(p) A Q(q) A (head(QUD a ) head(Q1JDO = q) A (p C FACTS) A ans(p, q) < QuD a .pop; QuDb.pop > T Table 6: Addressing a Question 5.3 Addressing a Question Our last example concerns appropriate responses to a question under discussion. In cooperative dialogue, the optimal follow-ups after a question has been asked are either answering that question or responding with another question which influences the first one. The first formula in Table 6 formalises this observation.","The antecedent of the formula describes an information state where a question q is the head's value of both QUD a and QUD b , and q has not yet been answered. The consequent of the formula expresses what the appropriate responses are in this situation. This is achieved by means of a diamond formula which guarantees that there is a state reachable by assigning some utterance (i. m. r) to UTT, and a box formula which ensures that the utterance assigned to UTT will only be either an answer to the question under discussion or a question which influences it.","Once a question under discussion has been an-swered, it can be popped from QUD. The second formula in Table 6 formalises this situation. The antecedent of this formula has to be understood as describing an information state reached after a proposition uttered to answer a question has been acknowledged and, according to axioms in Table 5, introduced into FACTS. Once FACTS contains a proposition which is an answer to the question currently under discussion, this question can be downdated from QUD."]},{"title":"6 Discussion and Future Work","paragraphs":["In this paper we have explored the possibility of using DL to formalise the main aspects of Ginzburg's DGB. More specifically, we have put forward a model where the components of the DGB are represented by variables ranging over different domains, while update operations are brought about by program executions that involve changes in variable assignments.","The use of DL for linguistic matters is of course not new. Several authors have observed strong parallels between the execution of computer programs and the dynamic view on discourse interpretation. The idea underlying the dynamic logic approach to the semantics of programming languages, i.e. that the meaning of a program can be captured in terms of a relation between states, has indeed been successfully applied in natural language semantics, for instance, by Groenendijk and Stokhof's Dynamic Predicate Logic (Groenendijk and Stokhof, 1991). Although the aims of DPL, mostly restricted to anaphorical relations across sentence boundaries, are rather different from ours, its guiding idea (i.e. that the meaning of a natural language sentence does not lie in its truth conditions, but rather in its potential to change context) is in line with the perspective taken in this paper. One could view the DGB as a semantics for utterances where each utterance is interpreted as a pair of states, i.e. as the change it brings about in the DGB.","As mention in the introduction, the current formalisation is intended as a first step towards the development of rigorous formal foundations for an approach to dialogue dynamics based on information state updates. Although this is still very much work in progress, we believe that the formalisation presented here shows that DL is an expressive and precise tool particularly well suited for this task.","From a more general point of view, we are interested in the interaction patterns that characterise different types of dialogue. In this respect, a formalisation along the same lines as the 23 one outlined in the present paper has been used in (Fernandez, 2003) to characterise the internal structure of Inquiry-Oriented Dialogues.","There are many issues that remain still open, perhaps the most straightforward being how to use the current formalisation for instance to prove desirable properties of particular dialogue systems. In fact, some resemblances can be found between the axioms presented in Section 5 and the update rules described in (LjunglOf, 2000), where the author presents a calculus for reasoning mathematically about the rule-based engines developed within the TRINDI project. We expect to show in our future research that some version of DL can also be successfully used to provide precise specifications of dialogue systems based on information state approaches."]},{"title":"References","paragraphs":["P. Bohlin, R. Cooper, E. Engdhal, and S. Larssson. 1999. Information states and dialogue move engines. In IJCAI-99 Workshop on Knowledge and Reasoning in Practical Dialogue Systems.","L. Carlson. 1983. Dialogue Games. Synthese Language Library. D. Reidel.","P. Cohen and H. Levesque. 1990. Rational interaction as the basis for communication. In P. Cohen, J. Morgana, and M. Pollack, editors, Intentions in Communication. MIT Press.","R. Cooper, S. Larsson, J. Hieronymus, S. Ericsson, E.Engdahl, and P. Ljunglof. 2001. Godis and questions under discussion. In The TRINDI Book.","R. Fernandez and J. Ginzburg. 2002. Non-Sentential Utterances: A Corpus Study. Traitement automatique des languages, 43(2):13-42.","R. Fernandez, J. Ginzburg, H. Gregory, and S. Lappin. 2003. SHARDS: Fragment Resolution in Dialogue. In H. Bunt and R. Muskens, editors, Computing Meaning, volume 3. Kluwer. To appear.","R. Fernandez. 2003. A Dynamic Logic Formalisation of Inquirey-Oriented Dialogues. In Proceedings of the 6th CLUK Colloquium, pages 17-24, Edinburgh, UK.","J. Ginzburg. 1996. Interrogatives: Questions, facts, and dialogue. In S. Lappin, editor, Handbook of Contemporary Semantic Theory. Blackwell, Oxford.","J. Ginzburg.\\t1997. Structural mismatch in dialogue. In Proceedings of MunDial 97. Universitaet Muenchen.","J. Ginzburg. 1999. Ellipsis resolution with syntactic presuppositions. In H. Bunt and R. Muskens, editors, Computing Meaning: Current Issues in Computational Semantics. Kluwer.","J. Ginzburg. ms . A semantics for interaction in dialogue. Forthcoming for CSLI Publications. Draft chapters available from: http://www.des.kcl.ac.uld staff/ginzburg.","R. Goldblatt. 1992. Logics of Time and Computation. Lecture Notes. CSLI Publications.","J. Groenendijk and M. Stokhof. 1991. Dynamic predicate logic. Linguistics and Philosophy, 14(1):39-100.","B. Grosz and C. Sidner. 1990. Plans for discourse. In P. Cohen, J. Morgana, and M. Pollack, editors, Intentions in Communication. MIT Press. C. L. Hamblin. 1970. Fallacies. Methuen, London.","D. Hard, D. Kozen, and J. Tiuryn. 2000. Dynamic Logic. Foundations of Computing Series. The MIT Press.","J. Kreutel and C. Matheson. 1999. Modelling questions and assertions in dialogue using obligations. In Proceedings of Amstelog 99, the 3rd Workshop on the Sematics and Pragmatics of Dialogue, Amsterdam.","S. Larsson. 2002. Issue based Dialogue Management. Ph.D. thesis, Gothenburg University.","D. Lewis. 1979. Score keeping in a language game. Journal of Philosophical Logic, 8:339-359.","P. Ljungl6f. 2000. Formalizing the dialogue move engine. In Proceedings of the GOtalog Workshop.","M. D. Sadek. 1991. Dialogue acts as rational plans. In Proceedings of the ESCA/ETR workshop on multi-modal dialogue.","R. Stalnaker. 1979. Assertion. Syntax and Semantics, 9. Academic Press.","D. Traum and J. Allen. 1994. Discourse obligations in dialogue processing. In Proceedings of the 32nd annual meeting of the ACL.","D. Traum, J. Bos, R. Cooper, S. Larsson, 1. Lewin, C. Matheson, and M. Poesio. 1999. A model of dialogue moves and information state revision. In The TRINDI Book. 24"]}]}