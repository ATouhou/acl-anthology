{"sections":[{"title":"Natural Languages Analysis in Machine Translation (MT) based on the STCG (STRING-TREE CORRESPONDENCE GRAMMAR) Tang Enya Kong, Zaharin Yusoff Unit Terjemahan Melalui Komputer Pusat Pengajian Sains Komputer Universiti Sains Malaysia 11800 Minden, Pulau Pinang, Malaysia. [e-mail: enyakong@cs.usm.MY and zarin@cs.usm.MY] 0. Abstract The String-Tree Correspondence Grammar (STCG) [1] is a grammar formalism for defining: • a set of strings (a language), • a set of trees (valid representation/interpretation structures), • the mapping between the two (to be interpreted for analysis & generation). The formalism is argued to be a totally declarative grammar formalism that can associate, to strings in a language, arbitrary tree structures as desired by the grammar writer to be the linguistic representation structures of the strings. More importantly is the facility to specify the correspondence between the string and the associated tree in a very natural manner. These features are very much desired in grammar writing, in particular for the treatment of certain linguistic phenomena which are 'non-standard', namely featurisation, lexicalisation and crossed dependencies [2,3]. Furthermore, a grammar written in this way naturally inherits the desired property of bi-directionality (in fact non-directionality [4]) such that the same grammar can be interpreted for both analysis and generation. In this paper, we investigate the properties of the STCG for interpretation towards analysis (as is understood within the context of Machine Translation (MT)). Other than using STCG grammars as specifications for the automatic generation of analysis programs in the Specialised Languages for Linguistic Programming (SLLPs) of MT systems (a study reported in [5,6]), the work also centres around the specification of a general analyser/parser for the STCG. The proposed STCG analyser is capable of mimicking some very useful features in various context-free parsing techniques. One such feature is the use of charts in tabular parsing algorithms, as exemplified in Earley's Algorithm [7], which is very helpful in avoiding redundancies that may otherwise result in a combinatorial explosion. Another is the compact way of representing possible parse trees for ambiguous sentences, such as the one seen in [8]. Though not reported in this paper, we note that the proposed analyser also provide a natural way for handling the kind of awkward phenomena mentioned above (namely lexicalisation, featurisation, and worst of all, crossed dependencies) while at the same time retaining much of the efficiency of standard context-free parsing algorithms (a study reported in [2,3]). 1. The STCG Formalism The String-Tree Correspondence Grammar is a declarative grammar formalism that can be used to describe the correspondence between strings of terms and trees. In particular, linguistic rules are written with utterances as the string of terms (henceforth STRING) and the corresponding representative linguistic structures as the tree (henceforth TREE). Figure 1 gives an indication of a full STCG rule. The structure of the TREE is totally specified by the linguist and is not constrained by any application of rules (as in the case for the parse tree in the classical context free grammar). In a rule, the main correspondence is first declared: in the example, the STRING #NP1.v.#NP2.part (with #NP1 and #NP2 being","paragraphs":["string variables,"]},{"title":"ie. variables which are instantiable to strings of terms) is set to correspond to the TREE with root node S (where $A and $B are","paragraphs":["forest variables,"]},{"title":"ie. variables that can be instantiated to lists of","paragraphs":["subtrees). The"]},{"title":"main-corr(espondence) is followed by a declaration of subcorrespondences (on the right hand 261","paragraphs":["Main-Corr. NP0\"'\"..ThP 1\\t,/./.11) $A v(part)","$B #NP1.v.#NP2.part with : R1 NP #NP1 with : RNP v(part) v.part = pick, etc.","paa = up, etc. NP 1 $B #NP2","with : RNP Sub-Corr. side) between substrings of the STRING and subtrees of the TREE, each of which possibly having a list of references (rule names). For example, the sub-corr(espondence) between the substring #NP1 and the subtree rooted at the node NP1 refers to the rules RNP..., the latter being other rules in the grammar. This reference is a mechanism by means of which the string and forest variables mentioned earlier are fully instantiated via an operation called identification [9,10] resulting in a correspondence between explicit strings of terms and and trees, both without variables. In actual fact, the main-corr as well as the sub-con specified in the rule are formally recorded in terms of a Structured String Tree Correspondence (SSTC) transparent to the linguist [11] as illustrated in figure 2, where a given correspondence may be non-projective (eg. with discontinuous constituents) as is the case for the nodev(part) in the example. Note also that the particle is chosen (by the linguist) to be represented as a collection of features in the node v - a case of featurisation. Figure 1. (0/a_d)","Nff..11*.VP","(- /a_b)\\t(0/b e)",",\\t","NP$A \\tkpart) \\t (b_c+d_e/\\t(- /c_d) b_c+d_e)","$13 #NP1 . v . #NP2 part a\\tbb cc\\tdd e Figure 2. In very simple terms, a string to tree correspondence in the STCG can be viewed as analogous to the mathematical definition of a relation between integer numbers as in the example given on the right. Here, a relation (in this case a function) f is defined in terms of finer subrelations according to the subdomains."]},{"title":"-3\\tx<3 f(x)= x +5\\t3<x<5","paragraphs":["x\\t"]},{"title":"55_X","paragraphs":["A set of STCG rules form a grammar, some of which are axiom rules (ie. start rules or rules containing axiom trees, as in the axiom or the start symbol S in the classical context free grammar). With the semantics of the rules being as indicated above, a grammar thus defines a language of strings, a language of representation trees, and the correspondence between elements of the two languages/sets. It is this set of string-tree correspondences that can be interpreted for both analysis and generation."]},{"title":"2. Natural Languages Analysis in MT Based on the STCG","paragraphs":["Initially, the STCG was designed to serve as a specification language for writing grammars in MT such that the specifications written in the STCG grammar formalism can then be coded (manually) into the linguistic programs for analysis and generation written in the SLLPs of integrated MT systems. Some substantial work have also been carried out to automate this process, namely towards the automatic generation of analysis programs in the MT systems ARIANE [12] and JEMAH [13] from grammars written in the STCG formalism (see for example [5,6]). However, due to certain limitations in the existing SLLPs for the realisation of a proper implementation of a STCG analyser (as discussed in [2]), we have decided instead to look into the design of an analyser which can directly interpret the STCG grammar."]},{"title":"2.1. The Fundamental Design of the STCG Analyser","paragraphs":["As we have seen above, a STCG grammar actually defines a set of SSTCs in a way quite similar to the definition of a mathematical function. In evaluating a mathematical function, if the function is defined in terms of other sub-functions then it can only be completely evaluated after all its sub-functions have been evaluated and return with the appropriate values. We can view the STCG analysis process in the same manner where, by taking the input string/sentence as their STRING, the set of explicit SSTCs defined by the axiom rules of a grammar are constructed based on the resultant sub-SSTCs defined by the reference rules of these axiom rules. Since the"]},{"title":"262 main-corr","paragraphs":["NP d/\\ det n det . n with : RNP3"]},{"title":"sub-corr","paragraphs":["det det","det\\tthe,etc. n n = ball,etc. NP\\t","(0/1_5) (0/0_1) v(pai"]},{"title":"\\t","paragraphs":["(1 2+4_5/\\t(0/2 4)"]},{"title":"\\t","paragraphs":["1=2+4_5)\\t...\".1111\"\"n"]},{"title":"\\t","paragraphs":["det\\t„ (2_3/2_3) ko_4/","((1_1 /0_ I) VP NP (o12_4) ded....\"\"1\"17t","(2_3/2_th3e).(3b_a411/3_4) 2_3 3_4 with : RNP... Phrasal-SSTC NP (0/0_1) I (0_1/0_1)","kit","01 with RNPI NP (0/2 4) Lexical-SSTC n v (part) det 1/10.\\thail _3\\t3_4"]},{"title":"d d_c c_5 t he","paragraphs":["ball"]},{"title":"up _3 3_4 4_5","paragraphs":["nicks . un 1_2 4_5"]},{"title":"a /b picks 1\\t2 reference rules of the axiom rules may in turn refer to other rules, they may also return the completed SSTCs only after their respective reference rules have been completed. This reference process will terminate when all remaining sub-SSTCs evaluated are defined by subcorrespondences which do not refer to any other rule, namely the 'lexical-SSTCs', which must match with the input words (the non-lexical SSTCs are called 'phrasal-SSTCs'). We illustrate this in the following analysis of the input string \"He picks the ball up\" with respect to a grammar consisting of rule R1 given in figure 1 and rules RNP1, RNP3 given in figure 3. The rule R1 is given as an axiom rule. The analysis process begins with the evaluation of the general SSTC defined by the axiom rule R1, which in turn leads to the evaluation of two other sub-SSTCs defined by the reference rules RNP1, RNP3 as illustrated in figure 4. main-corr sub-corr","paragraphs":["NP n n with : RNP1 n n","1 = John, ball, he, ..., etc."]},{"title":"Figure 3.","paragraphs":["NP\\tVP"]},{"title":"\\t","paragraphs":["vpar(l/t;NP\\t","$B #A. v . #B. Pan (1aa_bbcc5 with : RI"]},{"title":"-","paragraphs":["Apply rule RNP I - Apply rule RNP3 - Apply rule RI j-le. picks . the . baLl . LID 0_1 1 2 2 3 3_4 4_5","with : R I"]},{"title":"a b picks 1\\t2 He 01","paragraphs":["NP r $B #11 b_c","with : RNP...","--00--- NP det n det b d dc with : RNP3 det Ski\\t","n b_d"]},{"title":"b_d d_c c_5 the","paragraphs":["ball uP"]},{"title":"2_3 3_4 4_5 Figure 4.","paragraphs":["v(part) nti"]},{"title":"In the diagram above (on the left), the analysis process expands the SSTC defined by the axiom rule into a string of sub-SSTCs, which is further expanded into another string of sub-SSTCs until it cannot be expanded any further, which is when the string of sub-SSTCs consists only of lexical-SSTCs. The string of lexical-SSTCs is then matched with the words in the input string. Note that the matching need not be in a projective manner, as can be seen in this particular example, where the lexical-SSTCs are matched to the words in the input string in a crossed serial manner - a case of crossed dependencies. In order to keep track of such non-","paragraphs":["263 VP","NP\\t(0/ 13)","(0/0_1 )","I\\tV\\tNP","n ( 1_2/1_2) (0/2_3)\\tp","\\t","(0/4_6)","( 0_ 1/()_ I )\\tI (3_4/3_4) /4","de(2_3/2","'3)\\t","(4_5/4_5) (5_6/S 6)"]},{"title":"ruh'14.?1","paragraphs":["FP (013_6) (Mary) RIP I (John)• (saw) P )\\tRNP3 (i \" De t RNP I (the) (boat)• Main-Corr.\\tSup-corr. Ne1)&","$A V\\tNIP $B #A. v . #B NP $A with : RNP 1 ,RNPIRNP5","Main-Corr.\\tSub-Corr. NP","p $\\tpA","$B itg „la with : RNP5 NP $A *IA with : RNP I ,RNP3 lip $B with : RPP •• n •• n NP $Bwith : R2 with : RNP I .RNP3,RNP5","Main-Corr. Sub-Corr.","NP","Main-Corr.\\tSub-Corr. p\\tNP","$A","S PP","$A $A 1 $B $A with : RNP I ,RNP3,RNP5 $B #A.#B","EA with : RPP with : R2,R3 with : RPP with : R3 projective correspondences, we introduce the use of index variables to record the interval corresponding to each symbol appearing in the STRING (as illustrated on the right). In [2], we proposed a design of the STCG analysis algorithm which is capable of mimicking some very useful features in various context-free parsing techniques. One such feature is the use of charts in tabular parsing algorithms, as exemplified in Earley's Algorithm [7], which is very helpful in avoiding redundancies that may otherwise result in a combinatorial explosion. Another is the representation of shared forest in term of a STCG grammar rules which is in fact following the approach adopted in [8] as illustrated in the next section. 2.2 Multiple Results of analysis for ambiguous input sentence The example sentence given above is unambiguous, and thus corresponds to only a single representation tree. However, natural language grammars are known to be in the class of highly ambiguous grammars, and as such, there may be numerous representation trees generated for a single sentence in the language described. Instead of storing each representation tree separately in the set of SSTCs defining the correspondences between the given sentence and all its possible representation trees , we should try to represent all these in a space-efficient manner. In the figure given below, we present a compact way of representing a set of SSTCs corresponds to an ambiguous sentence by means of an AND-OR graph of rules - similar to the technique used by [8]. For example, the two SSTCs: (0/0_6)","_6) (0_1) (0_ n ) ( 1_2/1_2) (OPT 6)","PP (2_3/2_3) (0/3_6) (3_4/34)","de t","(4_5/4_57(56:6/5-6)","en,n.rs.n4Te rat()","with : RTC Figure 5:Two linguistic representations of the sentence John saw Mary in the boat. can be factorised into an AND-OR graph of rules R2, R3, RNP5, RPP (given below) and rules RNP1, RNP3 (given in figure 3) in the following manner: Figure 6 : An AND-OR Graph of STCG grammar","rules. 264 3. Concluding Remarks Recently, efficient context-free parsing methods such as the LR parser and Earley's Algorithm have been referred to extensively in implementing parsers for most of the formalisms used in the field of NLP. In an effort to retain the efficiency of standard context-free parsing algorithms, most recent declarative formalisms are typically restricted by the constraint of string concatenation in context-free grammars which allows a sentence to be systematically decomposed so that the parsing process can be indexed by the subparts of that decomposition (the substrings). However, it has also been widely recognised that the concatenation restriction of CFG can be problematic in handling phenomena such as lexicalisation, featurisation, and especially crossed dependencies. As an alternative, we propose the STCG formalism which allows for a more 'natural' way of specifiying the strings of the language being described, their corresponding linguistically motivated representation trees, and the correspondence between the two, where the correspondence need not be projective and hence appropriate for the said phenomena. Even though the standard CF parsing methods cannot be adopted directly in the analysis of an input sentence with respect of a STCG grammar, due to the STRING patterns of the STCG which need not submit to the concatenation restriction of CFG, in this paper we present the general layout (due to the space constraint, however interested readers may get more details in [2]) of an analyser for the STCG which is capable of mimicking some very useful features in various context-free parsing techniques. One such feature is the use of charts in tabular parsing algorithms, as exemplified in Earley's Algorithm [7], which is very helpful in avoiding redundancies that may otherwise result in a combinatorial explosion. Another is the compact way of representing possible parse trees for ambiguous sentences, such as the one seen in [8]. Furthermore, we have also provided a natural way for handling the kind of awkward phenomena such as lexicalisation, featurisation, and worst of all, crossed dependencies, while at the same time retaining much of the efficiency of standard context-free parsing algoritms [2,3].","REFERENCES","[ 1 ] Zaharin Y., String-Tree Correspondence Grammar: a declarative grammar formalism for defining the correspondence between strings of terms and tree structures, proceedings of the 3rd Conference of the European Chapter of the ACL, Copenhagen, April 1987.","[2] Tang Enya Kong, Natural languages Analysis in machine translation (MT) based on the STCG, PhD thesis, Universiti Sains Malaysia, Penang, March 1994 .","[3] Tang Enya Kong, Zaharin Y., Handling Crossed Dependecies with the STCG, proceedings of Natural Language Processing Pacific Rim Symposium (NLPRS'95), Sofitel Ambassador Hotel, Seoul, Korea, Dec. 4-6, 1995.","[4] Yves Lepage, Parsing and Generating Context-Sensitive Languages with Correspondence Identification Grammars, proceedings of the Natural Language Processing Pacific Rim Symposium (NLPRS'91), Singapore, 25-26 Nov 1991.","[5] Zaharin Yusoff, Tang Enya Kong, Generation of analysis programs in ROBRA (ARIANE) From String-Tree Correspondence Grammars (or a Strategy for Analysis in machine tranaslation), Proceedings of the 3rd Machine Translation Summit, Washington, D.C., July,1991.","[6] Zaharin Y., Tang Enya Kong, String-Tree Correspondence Grammars as a base for the automatic generation of analysis programs in machine tranaslation, proceedings of the International Conference on Current Issues in Computational Linguistics, Penang, June 1991.","[7] J. Earley, An efficient cantext-free parsing algorithm , Communications of the ACM, Vol. 13, Num. 2, Feb 1970, pp. 94-102.","[8] Lang, B., Towards a Uniform Formal Framework for Parsing, In : Current Issues in Parsing Technology, M. Tomita (ed.), Kluwer Academic Publishers, 1991, pp. 153-171.","[9] Zaharin Y., Strategies and heuristics in the analysis of natural languages in machine translation, PhD thesis, Universiti Sains Malaysia, Penang, March 1986.","[10] Y.Lepage, Un systeme de grammaires correspondancielles d'identification, these de Docteur, IMAG, Universite Joseph Fourier, Grenoble, June 1989.","[11] Zaharin Yusoff, Christian Boitet, Representation trees and string-tree correspondences, proceedings of the 12th International Conference on Computational Linguistics, COLING-88, Budapest, August 1988, pp.59-64.","[12] Ch.Boitet, P.Guillaume, M.Quezel-Ambrunaz, Le point sur ARIANE-78, debut 1982 (DSE-I ), vol.], part.] : le logiciel, GETA, avril 1982.","[13] Tong Loong Cheong, The JEMAH System : Reference Manual , UTMK document, USM, Penang, 1988. 265 266"]}]}