{"sections":[{"title":"Sorting by Sound — Arbitrary Lexical Ordering for Transcribed Thai Text","paragraphs":["Doug Cooper <doug@chula.ac.th>","Center for Research in Computational Linguistics, Bangkok When either Thai or transcribed (Romanized) Thai is sorted alphabetically, words that sound very much alike usually end up far apart. maay and may are thrown to opposite ends of the letter m entries, even though mistaking one for the other causes problems for both foreign students who cannot speak clearly, and Thais who can't spell. This paper explains how and why the difficulty occurs, and shows why both Thai and transcription are inherently difficult to sort by sound. It introduces a method of preprocessing — deriving phonemic signatures — that lets us define improved lexical or dictionary orders, yet does not require anything but standard sorting code. The method can be applied to other languages — Lao, Khmer, and Burmese — that, like Thai, distinguish words on the basis of vowel length and/or tone. Introduction Consider the dilemma of the Thai speller: these words are spelled thirteen different ways, but have essentially the same sound (t"]},{"title":"h","paragraphs":["an), and vary only in tone and vowel length: flu, lila,\\t614 111U, vntd,\\tiiiu, Thu,"]},{"title":"ru,","paragraphs":["mu. There are a remarkable number of ways to spell words with this sound. Thai has six dif-","ferent"]},{"title":"th","paragraphs":["letters, five ways to show a or aa, and six ways to write the final n. There are also four different tone marks, and a sign (over this letter 91) that means 'ignore me.' Finally, the tone mark does not actually give the tone — rather, it modifies an implicit tone that depends on the word's spelling.","Because a simple one phoneme/one grapheme (or one sound/one letter) relationship doesn't exist, words with identical or similar sounds can be widely scattered when lexically ordered. This complicates applications, ranging from 'sound-alike' spell checking to introductory language instruction, that depend on a Thai word's sound, not its spelling.","As a result, we find that sorting transcribed Thai is much more convenient that using native Thai orthography. We return to a relatively straightforward relationship between symbols and sounds; one that lets us group words with the same sounds regardless of their original Thai spelling.","Sorting transcriptions involves two basic issues: definition and implementation. First, we must define a lexical or dictionary order: if transcribed Thai adds the IPA symbols a, c, a, ti to the English a, e, o, u, what should the combined set look like? Should may come before maay or vice versa? Should two-character symbols like kh or p h be removed from the midst of the k's and p's? What is the proper order of words that vary only by tone?","Second, we have to find an easy implementation — one that uses existing sort programs, even with a new character set or lexical order.","This paper looks at the issues involved in sorting by sound. Part I states the problem: it presents the terminology and issues of ordering, describes the difficulties of languages like Thai, and looks at questions that persist even with effective transcription systems.","Part II outlines the solution. It lists considerations for defining new lexical orders, then gives an algorithm for extracting phonemic signatures as part of a sorting strategy.","Finally, Part III deals with the implementation. It shows how to derive phonemic signatures, and uses simple UNIX tools to implement the algorithm for a test alphabet. The method is easily generalized to any consistent transcription scheme. 273 Part 1: the Problem Ordering, as opposed to sorting, relies on three sequences collating, sorting, and lexical. — The collating sequence defines the order of the letters in a character set.","The ASCII set of 128 characters is the best known. Programs compare individual characters by their positions in the collating sequence; eg. b > a and 2 > 1.","But because ASCII arbitrarily defines relations like A > a and # > $, the collating sequence does not reasonably answer questions like what is the correct order of abAB? There are six equally plausible possibilities: abAB, ABab, aAbB, AaBb, AabB and aABb.","— The sorting sequence overrides the collating sequence to put characters in a reasonable order regardless of relative positions. This is useful for sets that include extended or up-per ASCII characters (eg. ISO Latin 1: AAA A A. A. AIE aa a. a a ...).","— Lexical ordering (or dictionary ordering) extends the sorting sequence by interpreting the meaning of characters. In real dictionaries, this interpretation can be fairly sophisticated; eg. the number 9 may appear with the letter n, and punctuation is typically ignored. Difficulty of Sorting by Sound in Thai Sorting Thai by sound or tone turns out to be quite difficult. Reasons include:","— Letters are not read in order as written. In Thai, a vowel's sound frequently follows the next consonant. The word an, which would be transliterated letter-for-letter as Eck, is instead transcribed as km","— There are more letters than sounds. In Thai, the initial k h (aspirated k) equivalent has three different letters devoted solely to it; t h has six, s has four, etc. A final t can be written with eighteen different letters.","— Tone production rules are not unique. Thai derives tone from a combination of the or-thographic and phonemic characteristics of opening and closing consonants, vowel length, as well as tone marks. Difficulties of Ordering Transcriptions The Haas method [1] is the best approach to Thai transcription. It relies on the International Phonetic Alphabet (IPA), and brings us close to the idyllic state — one grapheme per phoneme — that makes lexical ordering easy. I use it somewhat informally here; my apologies to the linguists in the audience. However, even Haas transcription has problems when it is used with standard sorting programs. We'll consider three of them. The Ordering Problem The IPA is a set of supplemental symbols, rather than an ordinary alphabet. In effect, IPA is sorted by the coincidental overlap of your IPA font, and whatever standard set (eg. the Windows sort sequence, or the extended ASCII position numbers) the computer follows. For example, I use the freely available SIL Premier IPA fonts. Here's how the extended vowel symbols used to transcribe Thai fit in with the ordinary vowels. Neither sort has any visible logic, and neither matches the order I find easiest to remember personally. aeioueaou\\toriginal list aseiooueu\\tWindows sort eaeiouoae\\tUNIX (positional) aoeaciouti\\tmy preferred order","Tone marks are scattered randomly through the character layout, and have the same problem. Their order makes no logical sense — lexical order must be organized externally. 274 The Intrusion Problem Transcribed Thai has 3 exceptions to a one-sound, one-letter rule:","- Ch, and the aspirated consonants kh, ph, and th are shown with two letters (possibly as ch, kh, ph, and th). — long vowels are doubled, eg. e/ee or alas. — the glottal stop is shown with ?, either before or after the vowel.","The two-letter sounds cause a problem I call intrusion — a two-letter consonant can, and invariably does, appear in the middle of another consonant's dictionary section. For example, in Thai, initial p is distinct from initial (aspirated) Ph. However, an alphabetical sort yields: pa","\\t through\\tpe\\t.. then","pha\\t through\\tp","he\\t.. then Pi","\\t through\\tpe\\t. . . and so on. The p entries are split in half by the intruding p h. k, and t have equivalent problems, as do many of the glottal, short, and long vowels. The Alternate Character Problem The undotted i character, 1, may be used to avoid conflicts with tone marks, eg.: 11, 11 vs. 11, This wreaks havoc with lexical ordering. Because the undotted i character is in the position of \" in standard character sets, ordinary sorting code handles ii and ii differently.","Tone marks also vary. The SIL IPA set has four versions of each tone mark, designed to fit appropriately around various characters. Once again, symbols with the same lexical position are found in different parts of the collating sequence. 41 \\tt\\tti Part II: the Solution Thus, sorting Thai begins with transcription, then requires decisions about the order of: — consonants, including IPA and two-letter consonants like 0 and kh. — vowels, particularly IPA vowels c a — vowel length, eg. glottal, short, long. — tones; for instance, Thai is conventionally ordered mid, low, falling, high, rising. We must also come up with ways to: — separate collating and sorting sequences, — make two-character sequences sort as though they were single characters, and — temporarily ignore tone marks or substitute characters that confuse sort programs. Picking an Order for Sounds Here's a restricted subset of the Thai alphabet that includes only the most regular of the duplicated consonant sounds: frualsoimuuthirlumwmia-r No Thai letter is used out of order. I can transcribe this 'alphabet' literally as: kkhojchdtthnbpphfmyrIwsh?oaieueeeo 275 Or, in an easier-to-remember arrangement, no English letter is out-of-order. aobchdeeefhijkkhlmnoopphrstthutivvy Suppose we assume that short vowels precede longer ones. All that's left to define is tone order, which is traditionally:","A","\\t","V\\t","mid, low, falling, high, rising Below, I've applied the rule initial consonant / vowel length / tone yields: \\t m ay\\tITU\\tmade of\\t1\\tThai \\t may\\t1 ii\\tmile\\t4\\tdictionary \\t m ay\\tchili\\tnew\\t6\\torder \\t m ay\\t1 ij\\tno, not\\t8 \\t m ay\\t11111\\tburn\\t9 \\t m ay\\t111\\twood\\t5 \\t m ay\\t1111J\\tsilk/question\\t7 \\t maay\\tU1 tl\\tmeasure, much\\t2 \\t maay\\ti1t1\\twidowed\\t3 \\t maay\\tYi 1.I 1(1\\twidow\\t11 maay\\t11 MU\\tto intend\\t10 Sorting on Phonemic Signatures Next, we must transform the information we need — phonemes — into a form ordinary sort programs can use — single letters. Turning a?, a, aa, b, Ch, d into A, B, C, D, E, F does the job, because the single upper-case letters are properly ordered in relation to each other.","Instead of editing the original words (that would destroy the useful information they contain) we extract information — the word's phonemic signature. If we prepend the signature to the word, and then sort, words will be in the order we seek: Signature\\tOriginal\\tTransformation","\\tAt\\ta?t\\ta? A","\\tBt\\tat\\ta B","\\tCt\\taat\\taa C","DBt\\tbat\\tb D, a B","EBt\\tchat\\tch E,\\tB","FBt\\tdat\\td F, a B When sorting is done, we throw the signatures away, and keep only the sorted originals.","More formally, we generate signatures and use them as sort keys. This approach is useful for sorting information, like fingerprint records, that does not easily lend itself to being ordered, and can also be applied to various programming problems (see [2]).","The example above has no tones, so one signature suffices. But multiple signatures let each signature act as the representative of a single sorting characteristic.","Suppose we have a number of characteristics — call them S, T, U — and each characteristic has alternatives, S,, 52, and so on.","words SI\\tT2\\tUl\\tword2 \\t T2\\tU2\\tword3 \\t T2\\tU3\\twordy 276 All the words with characteristic Si group together. The"]},{"title":"S1,7,,","paragraphs":["alternatives fall within this group, then the Si,T1 U,, alternative (Si , T1 U1), and Sh T2 U„ alternatives (there are three) follow. In concrete terms we say that our signatures consist of opening consonant and vowel, vowel length, closing consonant, and tone, eg: ma\\t1\\ty\\t1\\tmay\\tIll ma\\t1\\ty\\t3\\tmay\\t111 U ma\\t2\\ty\\t3\\tmbay\\tIJ1LJ ma\\t2\\ty\\t4\\tmaay\\t111J1U Each signature's influence depends on its position, left to right. Thai spellings, however different, are only considered if the signatures and the IPA transcriptions are identical."]},{"title":"Part III: Implementation","paragraphs":["First, note the ASCII collating sequence (lowest to highest) is: — all white space, through single blank","! # % &","* +","\\t. / — 0 through 9, then : ; < = > ? — A through Z, then\\t] A — a through z, then ( I } Deriving Signatures A variety of techniques are employed to derive signatures from transcriptions: — Unifying — giving different letters one value (so that i and i might both be i). — Stripping — removing characters (like tone marks) not relevant to a signature.","— Compression — turning a two-character sequence into a single character (eg. turning kh and th into K and T).","— Substitution — giving individual characters more convenient names (eg. referring to c and 4th","as E and U).","— Remapping — relocating non-contiguous characters (like stTuU...) to a sequence that sorts properly (eg. STUVW). A few UNIX tools (also available as standalone utilities under DOS) suffice for all tasks. An Example Alphabet Consider a simple alphabet that displays all of the full alphabet's problems:","d k kh ph what we hear a n 0 0 p nk kh m 0 phEdwhat we type p The transcription alphabet","Let's assume that we would like to define lexical ordering in the following way: characters are ordered as listed, single vowels follow doubled vowels, and tone marks appear in order following no tone marks.","The nonsense syllables below are properly ordered. The signatures are left in place; in a moment, we'll see how they were generated (they are the contents of file s4, below). 277 S3\\tS2\\tSI\\tsource\\tactual AB\\tAB\\tAB\\tdE\\tde AB\\tAB\\tABy\\tdE+\\tdé AB\\tAB\\tABz\\tdE—\\tdê AB\\tABa\\tABB\\tdEE\\tdee AB\\tABa\\tAByB\\tdE+E\\tdee ABD\\tABD\\tABD\\tdEk\\tdek ABD\\tABD\\tABzD\\tdE+k\\tdek ABD\\tABaD\\tABBD\\tdEEk\\tdeek ABD\\tABaD\\tAByBD\\tdE+Ek\\tdek DCI\\tDCaI\\tDCCI\\tkiip\\tkiip DCI\\tDCaI\\tDCzCI\\tkl—ip DHI\\tDHI\\tDHI\\tkop\\tkop ECI\\tECI\\tECI\\tkhip\\tkhip Signatures are generated right-to-left, starting with source. 'Extra' information is, in effect, ignored — it doesn't have to be stripped out. — SI carries the tone-mark phoneme. — S2 strips tones, but carries the vowel length and final consonant phonemes. — S3 strips vowel length, but carries the initial consonant and vowel phonemes.","a marks a doubled vowel, and y or z mark tones. These particular values are chosen because they are greater, alphabetically, than the upper-case letters used for words. For example, BAAD precedes BAD, but BAD comes before BAaD.","If the alphabet includes a glottal stop, a slightly different strategy is used. Below, we rely on the fact that the digits precede the letters. All three vowel lengths are given a two-character signature; in S2, note that B9 is glottal, BB is normal, and Ba is long. \\t","S3\\tS2\\tS.1\\tactual \\tAB\\tAB9\\tABy9\\tdo? \\t AB\\tABB\\tABy\\tda \\t AB\\tABa\\tAByB\\td6e Implementation Details To generate the signatures, we begin with a wholesale transformation, then strip or modify individual characters as we build signatures. source -> transliterate > sl sl -> strip-tones I tag-double-vowels > s2 s2 -> strip-vowel-tags > s3 assemble s3 s2 sl source I sort > s4 s4 -> take-apart > out All the intermediate files aren't necessary; I've left them to make the code easier to follow. Transliteration The transliteration step requires several transformations. Some forethought is required in the transcription alphabet's design — if k and kh are each treated as a single letter, then h can't be a unique letter in the original alphabet unless k + h is illegal (as it is in Thai). 278 original de i I kkh noopph — source d E k kti!I N o p ph+ , — compressed d E I i kKnNopP+ — unified E i i k K nNop P+ — substituted d A i i k K n N y o p P y z remapped ABCCD E FGH I J yz The transliteration step The code below creates file s 1: sed 's/kh/K/g' < source I\\tcompress kh sed 's/ph/P/g' I\\tcompress ph tr \"IE+-\" \"iAyz\" I\\tunify and substitute tr \"dAikKnNopP\" \"ABCDEFGHIJ\" > sl remap Strip-Tones, Tag-Double-Vowels Next we create file s2 (my apologies for the sed): tr -d yz < sl I\\tstrip the tones sed 's/\\([BCH]\\)\\l/\\la/g' > s2\\ttag the doubled vowels Strip-Vowel-Tags, Assemble, Take-Apart Next we'll strip the vowel tags and create file 53. Using auxiliary files in the next two steps makes the programming a bit clearer. tr -d a < s2 > s3\\tstrip the vowel tags Finally, we put the signatures together, sort, and cut the signatures out: paste s3 s2 I","\\t paste the first two paste - sl I","\\t add the third paste - source I","\\t add the original data sort > s4","\\t do the work cut -f4 < s4 > out","\\t strip off the first 3 fields Further Work The method presented here can be modified to accommodate different notions of appropriate phonemic sorting. We continue to work on additional questions, including: — deciding what the most easily understood and used phonemic orders are, — building electronic dictionaries / spelling assistants that are based on these orders,","— developing an easier user-interface for specifying how phonemic signatures should be extracted and evaluated, — automatically generating the starting transcription. References [1] Haas, Mary. The Thai System of Writing. Spoken Language Services, Inc./American Council of Learned Societies, 1956. [2] Bentley, Jon. Programming Pearls Addison-Wesley Publishing Company, Reading, Massachusetts, 1986. 279 280"]}]}