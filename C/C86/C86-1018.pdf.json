{"sections":[{"title":"CondiLioned UnificaLiou for Natural l,an~uage Processinp, A]]STV~ACT","paragraphs":["This paper prescnLs what wc c.all a condiLiol'md unification, a r'm'w meLhod of unificatiol'~ for processing natural languages. The key idea is to annotate Lhe patterns wiLh a cerLcdn sort of conditions, so that they carry abundant inforrnation. ']'his met.bed t.ransmits inforrnaLion frorn one pattern to another more efl'icienLly Lhan proecdurc aLLachmenLs, in which information cortLaincd in the procedure is embcddcd in the progranl rather Lhan dirccl./y aLLachcd Lo paLL(ms Coupled wilt techniques in forrnal linguistics> i]]orcovcr, conditiorled unification serves most. types o1\" opcrations for natlu'ai ]ar/guage processil'q~,."]},{"title":"KSiti f/asida","paragraphs":["]']]ecLroLechllica[ 1,abe ' A.ory","Ul]lczorlo I } 4, 7~aktlra MtlFa, Niibari-Gurl,","Ibaraki, [tOb Japan","([3) ptlt_tllS psrl nrnb(prcsonL, P, N) :","notAlrd ~'-tng(P, N) l~ut_Lns, psn nl:nl)(T, l\", N) : not_pres(T) noL_3rd sng(lst., ,N). not pres(past) not_~rd~'-;ng(;~nd, N) not pres(past4~a'rtlclp]e ) rlotA/rd, sr~g(,'Wd, plural) not pres(basc)."]},{"title":"1. Introduction","paragraphs":["A currcr'd, major t.rcrY.t of naturul la~/guage processing is ehara.cterized by Lhc overall use o[ unification (Sttiebc~r (198'l), Kay (1985), Proudir:~ and Pollard (1,985), Percira (198b), Shicbcr (1985), etc) reflecLing lhe recent develop merits in nonLra.nsformaLJonal linguistic [ormalisrns, such as Lexical FuncUonal Grammar (}lrcsnan (198E)), Generalizcd Phrase St.r'tJcl.ur( (]rarnrnar (GPS(]) (Gazdar, Klein, Pulhlm and Sag (I 985)), i Icad Grammar (Pol}ard (19f1,1)), and tIcadl)riven Phrase Structure Grammar (lIPS(;) (Pc]lard (1985a.,b)). These formalisnls dispense wiLt ,qlobal opcra-Lioits sueh as t.ransfornlaLion, alld instead cxp!oit h~cal operations each C'Ollf'lrled wttJ/i[l a local tree Such local operations ar'c forunulatcd in Lcrms of uni~caLion","]Iowevcr, Lhe ordinary unification as in Prolog is insufficient, seeu rrorn both scientific (here, alias liriguJsl,ic) and cngin(.'ering poilfl'.¢ of vicw '['he F, robh-'trl is that p,t tc]~[]s Lo bc tl[li(ie({ wiL]l each other lack the cape.city rot carrying irfforrnaLion","In Lhis papcr we [)rcscnl a new mcLhod of unificaLion which we (call conditioned unification. The essence of the method is t.o deal wit.h paLLcrns aimoLated by seine sort of condit, ioils. These eondiLioi<ls are so cortsl, raincd /-Is Lo 'oe cfficicntly operated on, and yet to be able to carry rich enough informaLion t.o caDLure linguistic gcneralizations."]},{"title":"2. The Problem","paragraphs":["Ordinary patterns as it/ Pr(;h)g Is.el< cxprcssivc power, t)esatlSC var[ablcs theFcirl arc Sil)i[)ly il](iClCl\"tlliltdt(7 alld Ihtis car'ry almost no irffqrrnalion 'l'hercforc, stie}l palL(ms aud unification among thcm arc msuffiei0nt for' capturlng t]le {~,i<'al/l rYlat ic al <!,>erm r'al ixat ior~ and tim process:n~> effici(ncy. ],It us look a.t some c:<amph.~s below A ~,,l'anl matical catc£>ory is assumed Lo be it llst of features A feature consisLs of a feature nalnc and a w~hic, and rcprcscnLcd as a t.cmn like"]},{"title":"tt~rn.e (vat,z().","paragraphs":["'['hc ]cxical entry of English vcrb"]},{"title":"p'u,t,","paragraphs":["for instance, can not. be described as a I'roloc patLcrn, bill needs some arlllO-Lation (i.c.,p~zt"]},{"title":"Im.s~)s?t.~zmS(T, P, N))","paragraphs":["as in (1)","(1) k:xicorl(puL, I tensc('I'), p(msorl(]')> number(N)I) :","put_Lns_ psn nrnb(T, P, N)","}let(?, fcaLLIICS olincr Lhan ten, se.,"]},{"title":"perso?t, and","paragraphs":["?lattnher arc omitLed, arm predicate p~ztmtm.spsTt~z?n.b is dcfinc.d c,s in (2)","For a biL morc COIT/I)I i:aLcd instance, conmdcr the relationship between a synLacLic gap and iLs filler. In GPSG, IIPSC, cte., tiffs relationship is; captured in terms of the SI,ASI[ fea/.urc, which"]},{"title":"reprcscnts","paragraphs":["gaps in the category of ] U~.i~tk is craz U, for cxamplc, thc SI,ASII feature is spcciflcd as [NI j] ller'e SI,ASI{ is assumed to take as its wdue alist of catcgorncs. SLaLcd below is a simplil3cd principle about the disti'ibution of this featqrc in I.yptca] cascs (3) lu a local tr'ec, Lhc rllotl;cr catcgor/s S],ASI]","tea.Lure is obl.aJncd by coneatcr~atir, g from h.fi[. Lo","rip, ht the S I,ASII fcat,wcs of hey de.,.ightcrs In order to describe: this principle, s('nnetlting :uorc than a nlerc pat t.crn ts lcquir(x] again:"]},{"title":"(i) IocalJr'cc.(lslc, sh(X)], Ismsh(¥)l, Islash(Z)])- append(Y, Z, X)","paragraphs":["l'eaturcs othcr thanSI,AS}l arc omitted herc.","The so called procedure altachmcnts is the most colnrnon way or conllflclncntJnp, the ])oor clcscriplivc capacM.y or ordinary patterns"]},{"title":"[\"or","paragraphs":["instance, you may regard Lhc bodies of ]h)rn elaus(s (1) and (4) as at la,_hed procedures","The dr'awbacl< of procedure atLachr~lcnl is ut the fact t.hnt the ouly way of using Lhc proccclurcs Is to execute thorn I\"or t.his reason, proecdur,}s arc Irmrcly embedded lu programs, rcAhcr than at.lath(x] to those paLterrls which th(sc itrotu'ams operate on The irtforrnaLion which [)ro((durcs cantain car/rx~t {U.'nera]]y be I~.',rricd aFOlllld a( ross scvc;a/ part ial s[rtlC[ tlI( s ci]ch Of which it pFoocc]arc dircclly operates on, bccausc> oncc a procc(lurc is cxc cnt.td, the informs.lion whkh it"]},{"title":"c.ontainc:d is","paragraphs":["palqially lost For instance, when Icxical entry (1) is cxploiLecl,"]},{"title":"p~ztJ.n.s pstt.n;/m,6(?', I),","paragraphs":["/\\i) is cxecut.cd and 7' and /~ arc il~stanliatcd Lo be"]},{"title":"preset~.t","paragraphs":["and Ist, icsp(cLivc[y 'l'h'ds Ic[L bchh~d is the informaLion abotlL the other ways Lo instan-LiaLc those wwiablcs.","Actual procedure attaclu'ncrd.s musL be arr-ar<e, ed so that infornlat on shouhl not be it)st whelt procedures arc cxccutcd Freeze of Prolog (Colmcraucr (1982)), for instanc/, is a mcans of tins arr~ingerncnt. ]]y exc(tll.i[]g freeze(V, \"~), atomic formula ~ is frozen; i.c , the exccuLlon of'~ is >-uspcnded until w~riable X is instanttat.cd ]f'¢ contams .'(, thcl'cforc, }lop(fully uot. so rnuch lrtforrnat.iol~ is test. whcc ¢ is cxecuLed","Ncvc.rthcless, freeze is problematic in two rcspt(ts Virsk, irJorn]ation cart still be lost when the frozen pro-- ccdtll'CS LIFe cxccnted. Seeond, too nltlCh illforrllatiol3 cat] be accumulatcd whilc several procedures arc frozen Sup pose, for itlst.ance, thaL"]},{"title":"freeze","paragraphs":["IX,"]},{"title":"t~tet~ber(.Y, [a, 6","paragraphs":["})) and"]},{"title":"fr<,t~.~<~. (r, ,~.',~,.~.,'(}'. I~'.~ I)) have","paragraphs":["bccn execut, cd '['herr, X and Y can be ulfif]cd with each other witt~ouL awakening ciLbcr procedure. In that (asc, Lho iifforn/at, ion that X may bc t) is redundant bctwccn Lhc I.wo proccdures, and Litc other part or irlfornmLion those Droecdtlres contain is Ill(Of]\" sistcitL What one might hope here is [o Jrlstitntiatc )( (and Y) to be b If we had cxectitcd"]},{"title":"freeze(Y, member(Y, It,","paragraphs":["cL ) iristcad of"]},{"title":"freeze","paragraphs":["(Y, rn.ernber(Y, Ib, c I), computational"]},{"title":"85","paragraphs":["resources would be wasted as the price for a wrong processint.","After all, it is up to a programmer to Lake a deliberate care so that information should t)e efficiently transmitted across patterns This causes sewral problems interwoven with one another. First, since those programs reflect the intended order of execution, they fad to straightforwardly capture the nniforrnitJes captured by rules or principles such as (3). Accordingly, programnnng takes rnuch labor'. Moreover, the resulting programs work efficiently only along t.he initially inLer~ded order."]},{"title":"3o Conditioned Unification 3.1.","paragraphs":["Conditioned Patterns","These problems will be. settled if we earl attach information to patterns, instead of attaching procedures to programs l[ere wc consider that such information is carried by some conditions on variables Variables are then regarded as carrying some information rather than remain:- ing simply indcterminatc","I-}y a conditioned pal.tern let. us refer to a pair o[a pat tern and a condition on the w~riables contained in that pat.- tern. l~'or simplicity, assume LhaL the condition of a conditioned pattern consists of atomic formulas of Pro/og whose argument positions are filled with variables appearing m tile pattx.'rn, and that the pre(hcates heading those atomic for mulas are defh~ed in l.erms of Horn clauses. For instance, we would hkc to regard the whole tbing in ([) or (4) as a condJtioncd pattern. • 3.2. Modular Conditions","The conditions in conditioned patterns must not be executed, or the contained information would be partially lost Tile conditions have to be somehow joined when conditioned patterns are unified, so t.hat the information they contain should be transmitted properly in tile sense that the resulting condit.ion is equivalent [o the Logical conjunction of tam input renditions and contains nciCrmr rcdnndant nor ineon sistent information. We call suet a unification a conditioned unification","A simple way to reduce redundancy and inconsistency in a ('.ondiLion is to let each part of each possible value of each variable be sLlbjcct to at, most one constraint. ],eL us formulate this below. We say that a condition is superficially modular, when no variable appears twice in that rendition For instance, (Sa) is a superficially modular condition, whereas (Sb,c) are not. (Conditions are some. times wr'itterr as lists of atomic forrnulas )"]},{"title":"(',9 a [a(X, Y), b(Z), a(U, v)]","paragraphs":["b. l a(X, Y), b(Y)]"]},{"title":"e [a(X,Y,X)]","paragraphs":["l,'urther we say that a condition ~I' is modular, when all the relevant renditions are superficially modular, lIere, the relevant, conditions are {I} and the bodies of Horn clauses reached by descending along the definitions of the predicat.es appearing in ¢. A predicate is said to be modular when its definition contains only those Iiorn clauses whose bodies are modular conditions. A predicate is potentially modular when it is equivalent to some modular predicate","A modular condition does not. impose two constraints on any one part. of any variable, and thcrcfore contains ne> kher redundancy nor ineonsistency, ltereaRer we consider that the condition m (.'very conditioned pattern should be modular. a.a. l'Jxpressive Power","Conditioned patterns can carry rich enough information for capturing the linguistic generality. Obviously, at"]},{"title":"86","paragraphs":["'st., they can describe any finite set of finite patterns. ];'or instance, (I) is regarded as a conditioned pattern with modular condition"]},{"title":"[pztt_g'ms_pstt~q,r~zb (T, P,","paragraphs":["N)]. Moreover, also some recursivc predicates are modular, as is demonstrated below.","(6) a appcnd([], Y, Y):","append([U I X], Y, [U I Z]) :- append(X, Y, Z). b sublist([], Y)."]},{"title":"sub]ist([U I<I, [U I Y]) :- sublist(X, Y).","paragraphs":["sublJst(X, [U IY]):-sublist(X, Y). Thus, (4) is also a conditioned pattern.","]lowever, some recursive predicates are not potentially modular. They include reverse (the binary predieate which is satisfied i~r its two arguments are the reversals of each oilier, as in reverse([tot, b], c, all, [d, c,[ct b]])), .perm (Lbe binary predicate satisfied iff its arguments arc permutat, ions of each other, as inperm([i, 2, 3], [2, 1, 3])), subset (the binary predicate which obtains iff the first argument is a subset of the second, as in s~zbset([d! b], to, b, c, all)), etc.","New.'rtheless, t.his causes no problem regarding natural language proeessing, because potentially infinite patterns corne up only out of features such as SLASt[, which do not require those non ruodular predicates. 3.4. The Unifier","Shown below is a'trace of the conditioned unification between conditioned patter'us (7) and (8) (here we use the same notation for eondit.ioned patterns as for IIorn clauses), where the predicates therein have been defied as in (9). (The definitions of c0 and e3 are not exploited.) First, we unify iX, )2 Z, g/] and [A, 7], C, D] with one another and get. X- A, Y : /3, Z = C, and W = D ]n the environment under lifts unification, the two conditions are concatenated, resulting in [c0(X), e I(Y, Z), e2(Z, W)]. The major task of this conditioned unification is to obtain a modular condition equivalent to this rmn-rnodular conditiorl This is tire job of funcl.ion ~tod~zlayi, ze. Mod~zla.~tze rails function ~;~ttegrctte, which r'eLtlrns an atomic formula equiwrlent Lo the gives condition. The Lcrminatior~ of a ?rtodulct,'ize or anir~fegrate is indicated by ~ preceding the reLurn-waluc, with the same amount of indentation as the outset of this functionrail was indicated witb When an {~ztegro, te calls a ~zodula~'- ize, the alphabetic identifier of the exploited Ilorn clause is indicated to the h.'ft hand side, and the temporal unification to the right-hand side. Atomic formulas made in integrate is written following 4. Each lIorn clause entered into the definition is shown following % and given an alphabetic identifier indicatedto the right-hand side. (7) IX, Y, Z, W] :-- e0(X), el (Y, Z). (8) [A, ]~, C, D] :- e2(C, D)."]},{"title":"(9) e*(0, ]). (a) e ~ (q, e) (b) ca(l, P):-e:Xl'). (c) c~(e, 0). (d)","paragraphs":["modularize([e0(X), cl(Y, Z), c2(Z, W)]) integrate([e0(X) ])","cO(X) integPate([cl(Y, Z), e2(Z, W)])","c4(Y, Z, W) (a) modularize([e2(1, W)]) Y = 0, Z = 1","integrate(to2(1' W)])"]},{"title":"* eS(W)","paragraphs":["(c) rnodularize([e3(P)]) W = P integrate([e3(P)]) =~ e3(P)"]},{"title":"tea(p)] c~(p) :- ca(P). (0 =:> eS(W)","paragraphs":["-~"]},{"title":"[c,~)(w)]","paragraphs":["1' o4(o, :, w) :. ~:',~(w). (j) (b) n:odular:'zc([c2(2, W)i) ¥ :- q, '/, :~"]},{"title":"i:,t.o~ra~,'.(Im<3(a W)])","paragraphs":["* cO(W) (d) nladularizc(l I) w =.: o"]},{"title":"=-~ [] cS(0) (k) =+ c6(W) > I cs(w)J \" o,3(q, ~, w) : o6(w). (I) => c4(Y, Z, W) - > [co(x), <:4(< z, W) l","paragraphs":["We CaN refine Lhe progra]'n o[ \"btt~.grcs, ta so that it should avoid ally predicaLe w}iose definiLion coiuLains only one llorn clause. For instance, Lhe definiLion of cb consisLs only o[(i) InsLead of (j), LhereR)re, we may }rove cd(0, 1, P) : c3(P) Also (1) can bc replaced by c 4(0, 2> 0), based on (k)","We are able Lo work out r'ccursivc condiLions from F, lvor; recursivc coI:dit.iolls, lVor example, considor how X and Z arc unifiod under\" t, ha conclit,iol: (10), whore ~rte'n~be.r is defined as in (1 1) (10) [n,e:nher(X, Y), o0(z)] (11) n/cinber(A, IA I IJl). (a)","member(A,"]},{"title":"IC I i~i) :-i","paragraphs":["....... her(A,"]},{"title":"it) (b)","paragraphs":["The Lracc of this ulfif]cat.k~n is showl~ b(']:'w, whc's'c prcdica.l~' c 1 is rccursivcly (]o/~ll/Cd based on Lhc i'(,ctlrsiv(! dcfillJLioH of 77\"~ (¢ 77}, t) I~, ?'","modularizc(lmcmbcr(X, Y), cO(X)I) int.cgraLo(I member(X,"]},{"title":"Y), cO(X)]) , el(X, Y)","paragraphs":["(a) modularize([cO(A)]) X = A, V -. [A Ill]"]},{"title":"int.e<~';ratc (I c O(A)I) = > oO(A)","paragraphs":["=~"]},{"title":"1 <:)(A)]","paragraphs":["1' c I(A, [A I ~<J) :-- c0(A)","(1)) n:odularizc(lmcn,bcr(A, 11), c0(A)l) X :: A, Y :: [c!i;I","Jnl.c<qral.e([ nlernbcr(A, I~), cO(A)I)",":~ el(A, 1~) ::> [cl(A, 33)1"]},{"title":"1'ci(A, Iclt<l): c~(A, 13). .... > c:(X, Y) :.~ [o:(x, Y)I","paragraphs":["IL Js a job of in, tegra, te, Lo handle re,cursive de,hiLton. The lasL g?l, te.g?,ts, te. above recognizes Lhat. the first 4m.tegrate, which is Lrying Lo (]cNr/c c 1, was called wit.h the same argu-ITlCrlI.S except, the variable narnes, llencc t.he last \"inttegrctte simply reLul'ns c. I(A, H), because t,hc conLent, or cl is now bring worked ouL tlrldoY Lhc J']rsl. ~?ttegro.te arid thus it is rednndanL fol' t, he lasL {~tfegrate Lo [urLhcr examine c 1.","It is not. a]ways possible fro' the above unifier t.~ unify paLL(2i\"[/s tlrl(](~r roc. tlr'sivo Col]d[Liol/S [\"or J//sLalloL', J[ Cf/illIOL unify X with )\" under [appe~td.(X, Y, Z)], becal_tsc Lhe result ing condiLion is noL potsnLia]]y rnodular, llowcver, such a situaLiol'l CtOCS FioL seoln t.o occur Jn actual [al:g:lagc proccssir:g.","4. Conclusiori","We have prc.'-~er, Led a new nle/hod a[ umfiealion, wh,ch wc call o. coildiLior~c(] tltti(loaLioli, Whcl'e paLLorils to be uniPlc(] \"'re annoLaked by a certain sort. of corldit.ions on lhe variables wifich octroi\" ill those patt.crn.<;. Theso condiLions are so r'est.ricted t.haL Lhey conlain as lit.Lie redundancy a<'; possible, and d'ms arc always assured to be satisfiable.","This method has Lhe fo/h)wtng welcome characteristics l\"h'st, I.he ])attorns to bc unified can carry at)llllda]'lL infos' mat.ion rcprcscnLcd by t.he conditions han:,~in!,; on t.hClll The expressive capacity of Lhe,<¢c condiLion,s is sl:fl'Jc{en[ for capt.uring ]JH~U, IIihLJ(: ~sCHCl'a]i',,iOS ~ccorld, such irfformat.ion is cfreclivcly Ir'ansrnitLed, by h~t.egrat.[n? the col~dil,ion.~ v;her, pat.'..crl:,<s o.ro unif'ied Unlike procedure aLLacl:ment.s, in thil~ COllne(:lion, Ll/c infornGaLioi~-conveying <.'fficicl:cy of our Colt dilioiued unif'icat.[on is no{ afl'c'(gcd by the direct.ion of t.i~c daLa.flow Therefore, O/ll\" col'l(]{lioned unifies.Lion is oo;rnplel/ly r(ver'sJbk< and ',hns is [n'on:ising its a Los] for dcscril)h'T> <~{l'all/lllilrs fOF bolh SCllL(Hb':C comprel/ensiol: slid prochl(d toll","Owing t.o Lhese cllar'act(!risLics, Otll conditioned unif'caLian l)r'avh|es a now prog, ra.unniiug 1.1aradigtn foi I/illt/l'/tl lar/y,/lag(.\" [)l'OCCSSil/lJ>, rcph~.cing proccd/1Fc aLt, o.ctl-"]},{"title":"I3:ont.s","paragraphs":["which haw3 tradlLionally el2joyed i.]lc Llbiq/lity Lhat. t.hcy do noL descrvc","Rcfer'cnees","Brc.~nan, J (cd) (1,98~) Th, a Me~ztal ifeprese.?l, tat~.o~l, uf ()rcv,>n?n:l./'/,ctz/, /fetc#./'~o?l.s, MI'P Press, C0.rnbFidFc , Massa( htmeLt.s","Colnmraucr, A. (198g) I'roLog 11 ]fefere~a, ce Mc~.mt~.f.o.n.d 77t, eoretical. Model, I!',I{A CNRS [163, Groupe d'InLelligcnce Arti~ciclh:, Univcrsit.L' dc Marseille, Marselle.","(b:zdar, G, E. Klein, C, K. Pu{hlm, and ] A %ag (198'0) Ca'e'Klr ercllized. [-'h,rase St, ru, ct~zre. (,)'omzmct~', Hasil I~lackwcll, Oxford.","Kay, M (1985) \"]bwsing in ]\"unctiona/ l]nffk:ation (h'am. nlar,\" Ncs, t~x.rat /,csm,g~zaga /J~s, rs'Otg, pp 251 278, C,,anl bri<t<e>e 1.Jldversi/y Press, Cambridge, ]'hl<q]and","lJereira, I\", (;. N (198'o) \"A SI.rllettlse-~harJrLt ~ ]&'pr'escntatiou for Unif]caLiol! [~ascd (;roml/lar J\"orrua]isi'ns,' I:~'occerecl,7]7),(JS of th.e. iT<'h'c/. All.Tt%czl, Mee£'i,?),[] of the AssQcI,u, tioTi, for O)Trtp7l.tcs.i;,io?),{¢l [,q,'n,g~zgstT,c& LJnlversity of Clu ca.go, (;hic~,fV), Illinois.","Pollard, C J (198,1) Ce~i.eral'i, zed /Jh,rq, me h'trizct~zre .O'q.~Y,. • m.ar, /lead (#'tl.~zT)wt.rs, cz~rl, Nahl.ra, f, Lmtg~x.u.ges, ])oc.'- 1oral di.'-;sertat.ion, .<'gt.anford /.JlliVCrsiLv, SLalqford, Cai{ fornia","I'ollard, (7 J. (198ha) l,~cDzre N~te.~ mi. ttead-Drivcm. ]qu'cs,se ~'~?'ttc~[l/.'/'ck (,~Przt7%Tn, u.?', (](?il{.(~l' for I]V: Sitldy of l,atlytlagc and [n forI/Mtt iOlL","Pollard, C <J (l{){~{)b) \"[qn'ase S[.l'llcLtlFe (]ralnmar ~4,1LhotlL Mot altll( s,\" ]Troceeel.{'n.gs Of th,7 l 7)l/,rfh, Ig: eS, t (.'O U.:~ t ('n ~tfe're. \"n, ce o'n, ]<'or?~csl /,zlU/~z'L<~'Zt, cs, I.Jtlivcr,'siLy of Lgouth ern California, Los Ar:gelc.s, Ca/i fort/is","])roudin, I) and C. J Pollard (]gfk)) \"Pal'.<;ing llcad Driven IJi/i<'as( St.iu.lct.Hro (b'alnn/ar,\" /5\"oceeU.i?Ws of H~.e 2,'}rcl, A?t?ttDcd, Mc..r;f'/,'n.g of :,h,e AS.S'OC?.a.~'/,O?Z for CoT~tplx,~ci, tmor~z/. /ittgw, Tlslic.s, {JniversiLy of Chicago, Chicago, Illinois.","Shiebcr, S M (198,t) \"The I)csi?n of a ('omputer I,ar/guage for I,in,o::i:-;I.ic h:folrtw.Lion,\" /Xrsc~eel'i?tcj.~ cJf ti?:. 7Of, h, l?~,ter?m,~io?ta.t L?mfere~?.ce o'n. Co?n.pw.ta.tio?w*l [mWu,3,s if.on, SLanfovd Ur~i,:ersiLy, Stratford, C.alJfornia","Shiel>ci, S M (198b) -b':-dn<q rrmlvict:<'>n t.o I';xlcnd [Jarsillg AIForit.hlus for (7onlp]cx-Feal.tlre-Based ]'ornlalisms,\" lS\"cceecli'n,<js ~f th.e 23rcl Al),n, lm.1. Mee/b:Tt.q f)f tli,e. Assoczo, tzo?,., fnr (.'e~?Aplztu, tiottat /,7,t~,gn.i, sti, cs, Umwn'sil.y o[ Ch/ (:ago, (;llJca/;o, Illinois"]},{"title":"87","paragraphs":[]}]}