{"sections":[{"title":"Uniform Recognition tbr Acyclic Context-Sensitive Grammars is Nil '-complete","paragraphs":["F, rik Aarts*","l/.escarch Institute for L~mguagc & Speech","Trans 10 3512 JK Utrecht The Netherlands"]},{"title":"Abstract","paragraphs":["Context-sensitive grammars in which each rule is of the forln aZfl - -~ (-*Tfl are acyclic if the associated context-free grammar with the rules Z ~ 3' is acyclic. The problem whether an intmt string is in the language generated by an acyclic context-sensitive grammar is NP-conlplete."]},{"title":"Introduction","paragraphs":["One of the most well-known classifications of rewrite grammars is the Chomsky hierarchy. Grammars and languages ~Lre of type 3 (regular), type 2 (context-free), type 1 (context-sensitive) or of type 0 (unrestricted). It is easy to decide whether a string is in tile language generated by a regular or (:ontext-free gralntnar. For context-.free grammars input strings can be re(: ogmzed in a time that is polynomiM in the length of the input string as well as in the length of the grammar. Earley [197(I] ha.s shown a t)ound of O([GI2n a) where G is the size of the grammar and n the length of the inlmt string, l/.ecognilion for context-sensitive gralnmars is harder: it is PSPACE-complete [Garey aaM Johnson, 1979], referring to [Kuroda, 1964] and [Karp, 1972 t. II.ecognition of type 0 hulguages is undccidat)le (see e.g. Lewis and Papadimitriou [1981]). The area between context-free grammars and context-sensitive grammars is interesting for two rea.sons. First, people have tried to describe natural languages with rewrite grammars. Context-free grammars do not seem powerfull enough to descrihe natural languages. Context-free grammars generate context-free languages. Natural","*The author was sponsored by project NF 102/62-356 ('StructurM and Semantic Parallels in Natural Languages and Programming Languages'), flmded by the Netherlands Organization for the Advancement of l[escarch (NWO). languages are probal)ly not context-free. The eounterexamples of sentences that caal not be described with a context-free grammar are always a bit artifieiah Very big subparts of nat-IlEal languages are context-free. A grammar for naturM languages has to be only a bit stronger than context-free. That's why we are interested in grammars that are between context-free and context-sensitive. The second perspective is the one of efficient proeessability, lu a context-free model, sentences can be processed ellMently. In a context-sensitive one, they can not. It is very interesting to know where the border lies: in which models sentences can be processed efficiently and in which ones they Call not'? In tile 60's and 70's, attempts have been made to put restrictions on context-sensitive grammars in order to generate context-fl-ee lmtguages. Ex-a:mples are Book [1972[, till)bard [1974] and Ginsburg aud Greibaeh [1966 I. Baker [1974] has shown that these methods come down to tile same more or less. They all block the use of eontex~ to pass information through the string. Book [1973] gives ;m ow~rview of atteHtpts to generate context-flee languages with non-context-free grammars. How to restrict permutative grammars in order to generate context-free languages is described in MiLkkinen [1985]. t'eters 3r. and Ritchie [1973] proposed a linguisticMly motivated chaatge in the definition of the notion grammar. Subsequent replacements in a string are relflaced by node admissibility constraints in the parse trees of sentences in a con(ext.-flee grammar. However, this formalism leads to generation of context-free 1,'mguages too. The approach of restricting gramlnaxs such that they generate context-tree languages does not seem interesting from the natural language perspective nor fi'o~l the efficiency perspective. Thc Acrl,:s DE COLING-92, NANTES, 23-28 AO()I 1992 1 1 5 7 ~RO¢ O: COI.ING 92 NnNIES, AUG. 23-28, 1992 oMy advantages of tlfis kind of restrictions lie in the possibilty to describe a context-free language in a different way, which may be easier for some purpose.","Another argument agMnst blocking information [/3aker, ] 974] is the problem of unbounded dependencies. Unbounded dependencies are dependencies over an mlbounded distance. Wh-movcment is an examI)le of it. The number of unbounded dependencies in naturM hmguage is (almost) always restricted. Models that restrict the amount of information that can be sent seem to come closer to models of hummL language than models restrict the distance over wlfich information can be sent. In the 70's and 80's attention has shifted to the perspective of efficient processing. Context-sensitive grammars have been restricted so that complexity of recognition lies somewhere between 7)SPAC$ and T'. Book [1978] has shown that for linear time context-sensitive grammars recognition is NP-complete even for (some) fixed grammars. l~lrthermore there is a result that recognition for growing context-sensitive grammars is t)olynomial for tLxed grammars [Dalflhaus and Warmuth, t986]. This article also tries to define a border between nearly-eflicient and just-efficient nmdels. We can define the notions uniform (or universal) recognition and recognition for a fixed grammar as follows. UNIFORM RECOGNITION INSTANCE: A grammar G and a string w. QUESTION: Is w in the language generated by G ? The grammar, as well ms the input string are inputs for the problem (these two types of input are easily confused!). The uniform recognition problena is one problem. There are infinitely many other problems: Suppose we have a grammar G. RECOGNITION FOR, FIXED GRAMMAR G INSTANCE: A string w. QUESTION: Is w in the language generated by G v Things are getting even more difficult when we say things fikc: \"For every grammar G RECOGNITION FOR FD(ED GRAMMAR G ...\". The difference between uniform recognition and recognition for all fixed G can be illustrated with an example from Barton Jr., Berwick and l~istad [1987]. They show that uniform recognition for unordered context-free grammar (UCFG) can be done in time O(21C;In3). It has not been shown that the mfiform recognition problem is in 3 °. For every G, however, tile fixed recognition problem can be solved in time O(n 3) and all these problems are in 7 ~. Barton Jr., Berwick and Ristad [1987] show the problem to be polynomial for any fixed grammar by a compilation step. The UCFG is compiled into a big context-free grammar. They use this grammar and the Earley algorithm in order to prove a polynomial bound. Just forgetting about the grammar size (replacing IGI by a constaslt) gives a polynomial bound too. It is not clear why Barton Jr., Berwick and Ristad [1987] always associate the fixed grarnmar problem with compilation (cf. their pp. 27-30, 64-79 and 202-206). This article is about uniform recognition for one type of restricted context-sensitive grammars, the acyclie context sensitive grammars (ACSG's). We prove it to be NP-complete. This means they are as complex as the Agreement Grammars and the Unordered CFG's of Barton Jr., Berwick and Ristad [1987]. ACSG's are the pure rewrite grammars in this group. They fit in the Chomsky hi~ erarchy. The Uniform Recognition Problem PSPACE--complete NP--complete P","One might ask when we can use acycfic context-sensitive grammars. One can use them every-where where one wants to use context-sensitive granlmars. But one has to be careful: cycles are not allowed. This property of acyclicity can be checked easily 1. For most purposes one does not need cycles at all. One field where context-sensitive grammars can be used is e.g. morphology. Characters in a word are often changed when","1 It is much easier than checking whether a CSG is t~ linear time CSG as defined by Book [1978]. One has to reason about length of possible derivations. In ACSG, derivations a.t'e short as a result of their acyclicity. ACnT~S DE COIJNG-92, NAIgfES, 2.3-28 ao~r 1992 1 15 8 PRO(:. OF COLlNG-92, Nr̂¢ll~s, AuG. 23-28, 1992 some suffix is added. These changes in a word are context-sensitive aald can be described by a context-sensitivc grammar. Once a character is changed, we normally do not want to change it back, the grammax we use is an acychc one. The complexity of recognition for ACSG is lower thmt in the unrestricted case (CSG, with complexity PSPACE) because we restrict the"]},{"title":"amount","paragraphs":["of information that can be passed through the sentence. The number of messages that e~'ut be sent is limited (and we do not block the messages by barriers as in Baker [1974] !). In the unrestricted case we can send messages that"]},{"title":"leave no trace.","paragraphs":["E.g. after a message that changes 0~s into l~s we can send a message that does the reverse. In sending a message from one position in the sentence to another~ the intermediate symbols are not chazlged. In fact they are changed twice: back and forth. With acycllc context-sensitive grammars, this is not possible. Every messages leaves a trace aatd the amount of information that ca~t be sent, is restricted by the gr~munar."]},{"title":"Definitions A grammar","paragraphs":["is a 4-tuple, G = (V, E, R, S), where V is a set of symbols, :E C V is the set of terminal symbols. R C V ~ x V* is a relation defined on strings. Elements of _R arc called rules. S E V \\ is the startsymbol. A grammar is"]},{"title":"context-sensitive","paragraphs":["if each rule is of the form"]},{"title":"aZfl ---* ¢~7fl","paragraphs":["where Z ff V \\ E ; c¢,/~, 7 G V* ; 7 5 L e. A granLmar is"]},{"title":"context-free","paragraphs":["if each rule is of the form Z -~ 3' where Z C V \\ ;TEV*."]},{"title":"Derivability","paragraphs":["(-%) between strings is defined as follows:"]},{"title":"uc~v ~ uflv (u,v,c*,fl E V*)","paragraphs":["iff (~,fl) E R. The transitive closure of -% is denoted by =L~. The transitive rettcxive closure of =4- is denoted by :~. The"]},{"title":"language","paragraphs":["generated by G is defined ms"]},{"title":"L(G) = {w E E* I S ~ w}. A derivation","paragraphs":["of a string ~ is a sequence of strings"]},{"title":"zl,x2,...,x,~","paragraphs":["with xa = S, for \"all i (1 < i < n) Xi =2- Xi+l and X n = ~. A context-free grammar is"]},{"title":"acyclic","paragraphs":["if there is no Z E V\\E such that Z ~+ Z. Thisimphes that there is no string a E V* such that cr ~ a. We can map a context-sensitive grammar G onto its"]},{"title":"associated","paragraphs":["context-free grammar G ~ as follows: If G is"]},{"title":"(V,E,R,S)","paragraphs":["then"]},{"title":"G'","paragraphs":["is"]},{"title":"(V,E,R',S)","paragraphs":["where for every rule"]},{"title":"aZfl -~ oeTfl E R","paragraphs":["there is a rule Z -~ 7 ff R r. There axe no other rules in R I. Note that the associated grammar does not contain empty productions. We"]},{"title":"cefll G aeyclic","paragraphs":["iff the associated context-flee grammar C is acycllc. The notation we use for context-sensitive rules is ms follows: the rule"]},{"title":"aZfl ---* ceTfl","paragraphs":["is written as Z -~ [all[a~]...iakl 3' [flllL621 ...[fill with ~ : C~la2...¢~k andfl ="]},{"title":"fllfl2...fll, ai,flj E V (l <i<k,l < j_<l).","paragraphs":["An example of a context-sensitive grammar with the corresponding context-flee rules is: context-sensitive rules context-free part 1 -~ [0] 2 1 ~ 2 0-~ i [21 0 -~ 1 2 -, [1] 0 2-~ 0 This contextMsensitive grammaris cyclic. Iris able to permute (}'s and its, Recognition is NP-complete UNIFORM RECOGNITION FOR ACYCLIC CONTEXT-SENSITIVE GRAMMAR INSTANCE: An acyehc context-sensitive grammar G = (V, Z,R,S) and a string w G E*. QUESTION: Is w in the language generated by G ?","The proof can be found in Aarts [1991b]. To prove that it is in NP wc have to prove that derivations ill ACSG's aa'e short (have polynomial length). Tiffs follows from the fact that derivations in context-free grammars have polynomial length. Derivations in an acyclie CSG are identical with derivations in the associated context-free grammar. The proof of NP-hardness is more complicated. The known NP-hard problem 3-SAT can be reduced to UNIFORM RECOGNITION for ACSG. Any 3-SAT formula can be translated in a grammar and an input for ACSG-recogultion. AcrEs DE COLING-92, NANTES, 23-28 Aour 1992 1 1 5 9 PROc, O1: COLING-92. NAbrl'ES, AUG. 23-28, 1992"]},{"title":"Recognizing Power","paragraphs":["Any context-free grammar can be transformed into ant acyclic context-free grammar without loss of recognizing power. A cycle can be removed by introduction of a new symbol. This symbol rewrites to any member of the cycle. Any context-free grammar with empty productions can bc changed into a context-free grammar without empty productions that recognizes the same language. There's one exception here: languages containing the empty string can not be generated. Any acyclic context-free grammar withont empty productions is an acyclic context-sensitive granlmar. Therefore, ACSG's recognize all context-free 10alguages that do not contain the empty word. Furthermore, acyclic context-sensitive grana-mars recognize languages that are not context-free. One example is the language"]},{"title":"{anb2~c**","paragraphs":["In > 1} This language is recognized by the grammar (\"X\" is a nouternfinM): X~ [A] ABB [B] B-~[A]X[X] A-4a x -~ IX] B B[B] B -. [B] X [Xl B -~ b X-,[X]BnC[C] ~ ~[B]X[C] C~e S -~ A B B C Aderivationof\"AABBBBCC\" S~ABBC-~ABXC~AXXC~ AXBBCC~AABBBBCC~ aabbbbcc. With the pumping lemma one caal prove that the l~tbmage is not context-free."]},{"title":"Discussion","paragraphs":["We have proved that UNIFORM RECOGNITION FOR. ACYCLIC CONTEXT-SENSITIVE Gf[AMMAR is NP-complete. It turns out to be important for complexity of recognition with context-sensitive grammars whether sending information leaves a trace. We have reduced 3-SAT to the uniform recognition problem for acyclic context-sensitive grammars. Every 3-SAT formula results in a different grammar. Probably it is not possible to construct an acyclic context-sensitive grammar that recognizes"]},{"title":"all","paragraphs":["3-SAT formulas. My conjecture is that ACSG-recognition is not NP-hard for any fixed grammar. If this is not true, there would exist a grammar that recognizes all 3-SAT formulas. For this grammar the recognition problem would be NP-hard. In such a grammar, not every 3-SAT variable is encoded in a different symbol in the grammar. The variables are numbered and their numbers are encoded in sequences of O's and l's e.g.. A grammar that recognizes all 3-SAT for-muta's must be able to compare such sequences. It must e.g. be able to recognize tile language"]},{"title":"{ww I w •","paragraphs":["V*}. Ifwis anumber, two numbers are compared. Context-sensitive grammars can recognize"]},{"title":"ww.","paragraphs":["Some can even recognize all 3-SAT formula's. ACSG's are not that strong. They can not even recognize"]},{"title":"ww.","paragraphs":["Any"]},{"title":"ACSG","paragraphs":["can compare only a fixed number of characters (only fixed amounts of information cazt be sent). Therefore my conjecture is that the recognition problem for any"]},{"title":"fixed","paragraphs":["grammar is not so hard: it's polynomial. Chart parsers for ACSG have been designed and implemented [Aarts, 1991]. They recognize inputs for many hard grammars in polynomial time. It is hard to prove, however, that they run in polynomial time for every grammar. If it could be proved, complexity of ACSG-recognition is similar to complexity of UCFG-recognition: NP-complete for the uniform case and a known algorithm that runs in time something like"]},{"title":"O(21GIna))","paragraphs":["(polynomial in n but not in G).","The polynmnial bound (which has not been proved yet) would be an explanation of the fact that humans can process language efllcicntly. Humans have a fixed grammar in mind which does not change. The complexity of recognition with a fixed grammar should be compared with the speed of human language processing. The arguments of Barton Jr., Berwick and Ristad [1987] against this are based on two kinds of arguments. The first has to do with compilation or preprocessing. We have polynomial bounds without compilation or preprocessing (just fix IGD. These arguments do not seem to hold. The other ones have to do with language acq~fisition. When a child is learning a language, the grammar she uses is changing. At every sentence utterance or understanding the graramar seems to be fixed. The difference between uniform recognition and recognition for any fixed grammar is that small that we can not draw conclusions about what kind of processing children perform when learning a language. AcrEs DE COLING-92, NAbrrES, 23-28 Ô~q\" 1992 1 1 6 0 PROC. OF COLING-92, NAh'rES, AUG. 23-28, 1992 Acknowledgements I want to thank Peter van Erode Boa.s, Reinhard Muskens, Mart Trautwein and Theo Jansen for their comments on carher versions of this paper. References","Aarts, E., Itecognition for Acychc Context-Sensitive Grammars is probably Polynomial for Fixed Grammars, Tillmrg University, ITK Research Memo no. 8, 199L.","Aarts, E., Uniform Recognition for Acychc Context-Sensitive Grazumars is NP-complete, paper presented at Computing Science in the Netherlands, Amstcrdam, 19911).","Baker, B. S., Non-context-Free Grammars Generating Context-Frec Languages,"]},{"title":"Inform. and Control, 24,231","paragraphs":["-246, 1974.","Barton Jr., G. E., R. C. Berwick ~ld E. S. Ristad,"]},{"title":"Computational complexity and naturM language,","paragraphs":["MIT Press, Cambridge, MA, 1987.","Book, R. V., Terminal context in context-sensitive gramanars,"]},{"title":"SIAM J. Comput., 1,","paragraphs":["20-30, 1972.","Book, R. V., On the Structure of Context-Sensitive Grammars,"]},{"title":"lnternat. J. Comput.","paragraphs":["lnform."]},{"title":"Sci., 2,","paragraphs":["129 139, 1973.","Book, R. V., On the Complexity of Formal Grain-mars,"]},{"title":"Acta/nform.,","paragraphs":["9,171 181, 1978.","Dahlhaus, E. and M. K. Warmuth, Membershil) for Growing Context-Sensitive Grammars Is Polynomial,"]},{"title":"lnternat. J. Comput. 1n-","paragraphs":["form. Sci.,"]},{"title":"33,456--472,","paragraphs":["1986.","Earley, J., An Efficient Context-Free Parsing Algorithm, Comm."]},{"title":"ACM,","paragraphs":["13(2), 94-102, Feb. 1970.","(~arey, M. R. aztd D. S. Johnson,"]},{"title":"Computers and lntractabillty: A C~uide to the The-","paragraphs":["ory of"]},{"title":"NP-Completeness,","paragraphs":["W. H. Freemall and Company, San l~rancisco, CA, 1979.","Ginsburg, S. and S. A. Greibach, Mappings which Preserve Context Sensitive Languages,/n-"]},{"title":"form. and Control, 9,","paragraphs":["563-582, 1966. Hibbard, T. N., Context-Limited Grammars, J."]},{"title":"Assoc. Comput. Mach.,","paragraphs":["21(3), 446-453, July 1974.","Karl), R. M., Reducibihty among combinatorim problems, in"]},{"title":"CompleJdty of Computer Computations,","paragraphs":["edited by R. E. Miller and J. W. Thatcher, pp. 85-103, Plenum Press, New York, 1972.","Kuroda, S. oY., Classes of Languages and Linear° Bounded Automata,/nform."]},{"title":"and Control,","paragraphs":["7, 207-223, 1964. Lewis, H. R. and C. H. Papadlmitriou,"]},{"title":"Elements of the theory of computation,","paragraphs":["Prentice-Hall, Englewood Cliffs, N J, 1981.","M£kklnen, E., On Permntative Gra~nmars Generating Context-Free Lang~tagcs,"]},{"title":"BIT, 25,","paragraphs":["604-610, 1985.","Peters Jr., P. S. mad R. W. Ritchie, Context-Sensitive Immediate Constituent Analysis: Context-Free Languages Revisited,"]},{"title":"Math.","paragraphs":["Systems"]},{"title":"Theory,","paragraphs":["6(4), 324-333, 1973. AcrF.s DE COLlNG-92, NAMES, 23-28 AOr~q ' 1992 1 1 6 1 PRO(:. OF COLING-92, NANteS. AUG. 23-28, 1992"]}]}