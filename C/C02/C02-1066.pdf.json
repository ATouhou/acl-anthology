{"sections":[{"title":"Guaranteeing Parsing Termination of Unication Grammars Efrat Jaeger and Nissim Francez Department of Computer Science Technion, Israel Institute of Technology 32000 Haifa, Israel Shuly Wintner Department of Computer Science University of Haifa 31905 Haifa, Israel Abstract","paragraphs":["Unication grammars are known to be Turing-equivalent; given a grammar ","and a word , it is undecidable whether ",". In order to ensure decidability, several constraints on grammars, commonly known as off-line parsability (OLP) were suggested. The recognition problem is decidable for grammars which satisfy OLP. An open question is whether it is decidable if a given grammar satises OLP. In this paper we investigate various denitions of OLP, discuss their inter-relations and show that some of them are undecidable."]},{"title":"1 Introduction","paragraphs":["Context-free grammars are considered to lack the expressive power needed for modelling natural languages. Unication grammars have originated as an extension of context-free grammars, the basic idea being to augment the context-free rules with feature structures (FSs) in order to express additional information. Today, several variants of unication grammars exist, some of which do not necessarily assume an explicit context-free backbone.","The recognition problem (also known as the membership problem), for a grammar  and a string  , is whether  . The parsing problem, for a grammar ","and a string , is to deliver all parse trees that  induces on",", determining what struc-","tural descriptions are assigned by ","to",". The rest of this paper is concerned with recognition.","Unication grammars have the formal power of Turing machines, thus the recognition problem for them is undecidable. In order to ensure decidability of the recognition problem, a constraint called off-line parsability (OLP) was suggested. The recognition problem is decidable for OLP grammars. There exist several variants of OLP in the literature (Pereira and Warren, 1983; Johnson, 1988; Haas, 1989; Torenvliet and Trautwein, 1995; Shieber, 1992; Wintner and Francez, 1999; Kuhn, 1999).","Some variants of OLP were suggested without recognizing the existence of all other variants. In this paper we make a comparative analysis of the different OLP variants for the rst time. Some researchers (Haas, 1989; Torenvliet and Trautwein, 1995) conjecture that some of the OLP variants are undecidable (it is undecidable whether a grammar satises the constraint), although none of them gives any proof of it. There exist some variants of OLP for which decidability holds, but these conditions are too restrictive; there is a large class of non-OLP grammars for which parsing termination is guaranteed. Our main contribution is to show proofs of undecidability for three OLP denitions.","Section 2 denes the basic concepts of our formalism. Section 3 discusses the different OLP denitions. Section 4 gives an analysis of several OLP denitions and the inter-relations among them. Section 5 proves the undecidability of three of the OLP conditions."]},{"title":"2 Preliminaries","paragraphs":["The following denitions are based on Francez and Wintner (In preperation) and Carpenter (1992). Grammars are dened over a nite set FEATS of features, a nite set ATOMS of atoms, and a nite set CATS of categories. A multi-rooted feature structure (MRS) is a pair  where    is a nite, directed, labelled graph consisting of a set"," ","NODES of nodes, a partial function, FEATS  , specifying the arcs and a partial function, "," ATOMS, labelling the sinks, and  is an ordered set of distinguished nodes in  called roots. ","is not necessarily connected, but the union of all the nodes reachable from all the roots in   is required to yield exactly  . The length of an","MRS is the number of its roots,    . Meta-variables ","range over MRSs, and   over their constituents. If    ","is an MRS and is a root in","then naturally","induces an FS "," ","   ","","  ",""," , where","  is","the set of nodes reachable from",", ","","","","and","","  ",". Thus","can be viewed as an ordered","sequence   ","of (not necessarily disjoint) FSs. We use the two views of MRSs interchangeably. The sub-structure of      , induced by the pair  and denoted"," ",", is      . If  ,","   . If  ,  is used for","  . An MRS    subsumes an MRS        ","(denoted by  ) iff","         and there exists a total function     such","that for every root ","","      ; for ev-","ery ","and FEATS, if       then       ","    ","; and for every","","if","",""," then    ","  ","",".","Skeletal grammars are a variant of unication grammars which have an explicit context-free backbone/skeleton. These grammars can be viewed as an extension of context-free grammars, where every category is associated with an informative FS. An extended category is a pair ","where is an FS and "," CATS. Denition 2.1. A skeletal grammar (over FEATS, ATOMS and CATS) is a tuple     ","where  is a nite set of rules, each of which is an MRS of length","(with a designated rst element, the head of the rule), and a sequence of length","of categories;  is a lexicon, which associates with every","terminal (over a xed nite set","of terminals) a","nite set of extended categories   ",";  is the start symbol (an extended category). A skeletal form is a pair  ",", where is an","MRS of length and  ","is a sequence of categories (  "," CATS for","). Denition 2.2 (Derivation). Let     and     ","be forms such that      ","and  ","     .     immediately derives     iff there exist a skeletal rule     "," of length","and an MRS  ,    ,","such that: ",""," ;"," ","’s head is some element","of","",":       ;"," ","’s body is a sub-structure of :","  "," ","  ",""," ;","","The rst","elements of","","and","are iden-","tical:           "," ;"," The last","","elements of ","and","are identical:","  ","   ","","  ","",""," ;","  "," is obtained by replacing the","-th element of  "," by the body of    . The reexive transitive closure of ‘","’ is denoted ‘ ","’. A form    ","derives      (denoted       ","     ",") iff there exist MRSs      ","such that","","  ,","","and","      ","       . Denition 2.3 (Pre-terminals). Let ","","  ",".  is dened if     ",", in which case it is the skeletal","form,    ","  ","    ","  ","where       ","   for    . Denition 2.4 (Language). The language of a skeletal grammar  is "," ","","  "," "," and","             , where","       ","   for    . Denition 2.5 (Derivation trees). (also known as constituent structures, c-structure) Let","   ","  ","be a skeletal grammar. A tree is a derivation tree admitted by ","iff:"," The root of the tree is the start symbol","",";"," The internal vertices are extended categories (over the same features, atoms and categories as the grammar ",");"," The leaves are pre-terminals of length",";"," If a vertex has  descendants,   ","         , then    immediately derives           with respect to some rule"," "," . Denition 2.6. A general unication grammar (over FEATS and ATOMS) is a tuple","   ","  ","where","is a nite set of rules, each of","which is an MRS of length","; ","is a lexicon,","which associates with every terminal","a nite set","of FSs   ",";  is the start symbol (an FS).","General unication grammar formalism do not assume the existence of a context-free backbone. Derivations, pre-terminals, languages and derivation trees for general unication grammars are dened similarly to skeletal grammars, ignoring all categories."]},{"title":"3 Off-line-parsability constraints","paragraphs":["It is well known that unication based grammar formalisms are Turing-equivalent in their generative capacity (Pereira and Warren, 1983; Johnson, 1988, 87-93); determining whether a given string ","is generated by a given grammar ","is equivalent to deciding whether a Turing machine","halts on an empty input, which is known to be undecidable. Therefore, the recognition problem is undecidable in the general case. However, for grammars that satisfy a certain restriction, called off-line parsability constraint (OLP), decidability of the recognition problem is guaranteed. In this section we present some different variants of the OLP constraint suggested in the literature. Some of the constraints (Pereira and Warren, 1983; Kaplan and Bresnan, 1982; Johnson, 1988; Kuhn, 1999) apply only to skeletal grammars since they use the term category which is not well dened for general unication grammars. Others (Haas, 1989; Shieber, 1992; Torenvliet and Trautwein, 1995; Wintner and Francez, 1999) are applicable to both skeletal and general unication grammars.","Some of the constraints impose a restriction on allowable derivation trees, but provide no explicit denition of an OLP grammar. Such a denition can be understood in (at least) two manners: Denition 3.1 (OLP grammar). 1. A grammar  is OLP iff for every  every derivation tree for","satises the OLP constraint. 2. A grammar  is OLP iff for every  there exists a derivation tree which satises the OLP constraint.","We begin the discussion with OLP constraints for skeletal grammars. One of the rst denitions was suggested by Pereira and Warren (1983). Their constraint was designed for DCGs (a skeletal unication grammar formalism which assumes an explicit context-free backbone) for guaranteeing termination of general proof procedures of denite clause sets. Rephrased in terms of skeletal grammars, the denition is as follows: Denition 3.2 (Pereira and Warren’s OLP for skeletal grammars (",")). A grammar is off-line parsable iff its context-free skeleton is not innitely ambiguous.","The context-free skeleton is obtained by ignoring all FSs of the grammar rules and considering only the categories. In Jaeger et al. (2002) we prove that the depth of every derivation tree generated by a grammar whose context-free skeleton is nitely ambiguous is bounded by the number of syntactic categories times the size of its yield, therefore the recognition problem is decidable.","Kaplan and Bresnan (1982) suggested a linguisticly motivated OLP constraint which refers to valid derivations for the lexical functional grammar formalism (LFG), a skeletal grammar formalism. They impose constraints on two kinds of","’s, optionality and controlled","’s, but as these terms are not for-mally dened, we use a variant of their constraint, suggested by Johnson (1988, 95-97), eliminating all  ’s of any kind. Denition 3.3 (Johnson’s OLP (",")). A constituent structure satises the off-line parsability constraint iff it does not include a non-branching dominance chain in which the same category appears twice and the empty string","does not appear as a lexical form annotation of any (terminal) node.","This constraint bounds the depth of any OLP derivation tree by a linear function of the size of its yield, thus ensuring decidability of the recognition problem.","Johnson’s denition is a restriction on allowable c-structures rather than on the grammar itself. We use denition 3.1 for","","grammars and refer only to its second part since it is less restrictive.","The next denition is also based on Kaplan and Bresnan’s constraint and is also dealing only with OLP derivations. OLP grammar denitions are according to denition 3.1.","X-bar theory grammars (Chomsky, 1975) have a strong linguistic justication in describing natural languages. Unfortunately neither Kaplan and Bresnan’s nor Johnson’s constraints allow such grammars, since they do not allow derivation trees in which the same category appears twice in a non-branching dominance chain. Kuhn (1999) refers to the problem from a linguist’s point of view. The purpose of his constraint was to expand the class of grammars which satisfy Kaplan and Bresnan’s constraint in order to allow X-bar derivations. Again, since there exists no formal denition of the different kinds of","’s we assume that","does not represent a lexical item (no","-rules). Denition 3.4 (Kuhn’s OLP (",")). A c-structure derivation is valid iff no category appears twice in a non-branching dominance chain with the same f-annotation.","Kuhn (1999) gives some examples of X-bar theory derivation trees of German and Italian sentences which contain the same category twice in a non-branching dominance chain with a different fannotation. Therefore they are invalid OLP derivation trees (by both Kaplan and Bresnan’s and Johnson’s constraints), but they satisfy Kuhn’s OLP constraint.","According to Kuhn (1999), The Off-line parsability condition is a restriction on allowable c-structures excluding that for a given string, innitely many c-structure analyses are possible. In other words, Kuhn assumes that OLP is, in fact, a condition that is intended to guarantee nite ambiguity. Kuhn’s denition may allow X-bar derivations, but it does not ensure nite ambiguity. The following grammar is an LFG grammar generating c-structures in which the same category appears twice in a non-branching dominance chain only with a different f-annotation, therefore it satises Kuhn’s definition of OLP. But the grammar is innitely ambiguous:","","  ","","",""," ","","",""," ","P       ","   ","P    ","     . . . P","","  ","Therefore, it is not clear whether the condition guarantees parsing termination nor decidability of the recognition problem and we exclude Kuhn’s denition from further analysis.","The following denitions are applicable to both skeletal and general unication grammars. The rst constraint was suggested by Haas (1989). Based on the fact that not every natural unication grammar has an obvious context-free backbone, Haas suggested a constraint for guaranteeing solvability of the parsing problem which is applicable to all unication grammar formalisms.","Haas’ denition of a derivation tree is slightly different from the denition given above (denition 2.5). He allows derivation trees with nonterminals at their leaves, therefore a tree may represent a partial derivation.","Denition 3.5 (Haas’ Depth-boundedness (",")).","A unication grammar is depth-bounded iff for ev-","ery","there is a","such that every parse","tree for a sentential form of","symbols has depth","less than",".","According to Haas (1989), a depth-bounded grammar cannot build an unbounded amount of tree structure from a bounded number of symbols. Therefore, for each sentential form of length","there exist a nite number of partial derivation trees, guaranteeing parsing termination.","The","","denition applies only to skeletal grammars, general unication grammars do not necessarily yield an explicit context-free skeleton. But the denition can be extended for all unication grammar formalisms: Denition 3.6 (Finite ambiguity for unication grammars (",")). A unication grammar ","is","OLP iff for every string","there exist a nite number","of derivation trees.","Shieber’s OLP denition (Shieber, 1992, 7982) is dened in terms of logical constraint based grammar formalisms. His constraint is dened in logical terms, such as models and operations on models. We reformulate the denition in terms of FSs. Denition 3.7 (Shieber’s OLP (",")). A grammar  is off-line parsable iff there exists a nite-","ranged function","on FSs such that   for all","and there are no derivation trees admitted by  in which a node  dominates a node ",", both are roots of sub-trees with an identical yield and    .","The constraint is intended to bound the depth of every derivation tree by the range of","times the size of its yield. Thus the recognition problem is decidable.","Johnson’s OLP constraint is too restrictive, since it excludes all repetitive unary branching chains and  - rules, furthermore, it is applicable only to skeletal grammars. Therefore, Torenvliet and Trautwein (1995) have suggested a more liberal constraint, which is applicable to all unication grammar formalisms. Denition 3.8 (Honest parsability constraint (",")). A grammar ","satises the Honest Parsability Constraint (HPC) iff there exists a polynomial s.t. for each  there exists a derivation with at most  steps.","The denition guarantees that for every string of the grammar’s language there exists at least one polynomial depth (in the size of the derived string) derivation tree. Furthermore, the denition allows X-bar theory derivation trees, since a category may appear twice in a non-branching dominance chain as long as the depth of the tree is bounded by a polynomial function of its yield."]},{"title":"4 OLP Analysis","paragraphs":["In this section we rst give some grammar examples and mention their OLP properties, then compare the different variants of OLP denitions using these examples. The examples use a straightforward encoding of lists as FSs, where an empty list is denoted by ",", and head","tail ","represents a list whose rst","item is",", followed by",".","Figure 1 lists an example unication grammar","generating the language"," ",". A string of occurrences of ","has exactly one parse tree and its","depth is . Therefore, ","","is","and",". ","","is neither","nor","","; it may generate arbitrarily deep derivation trees (containing lists of increasing length) whose frontier consists of only one symbol, and thus there exists no nite-ranged function mapping each FS on such a derivation to a nite set of FSs."," ","CAT  WORD  s ","                          CAT  WORD  s ","  CAT"," WORD  t   CAT   WORD","  ","  CAT   WORD  t     CAT   WORD","  ","  CAT  WORD     CAT  WORD  t  ","   CAT  WORD","  ","","CAT  WORD  t                            ","","","CAT","WORD  t   Figure 1: A unication grammar,  ,  .","Figure 2 lists an example unication grammar generating the language ",". There exist innitely many derivation trees, of arbitrary depths, for the string  , therefore, ","","is neither","nor","nor","  .   is","; there exists a derivation tree for  of depth",". Figure 3 lists an example unication grammar","generating the language"," ",". A string of occur-","  ","","CAT  WORD  s  ","                          CAT   WORD  s  ","  CAT","  WORD  t    CAT","  WORD","  ","  CAT","  WORD  t     CAT","  WORD","  ","  CAT  WORD"," ","  CAT  WORD  t  ","   CAT  WORD"," ","                          ",""," ","CAT","WORD  t  ","Figure 2: A unication grammar, ,  . rences of ","has exactly one parse tree. The feature DEPTH represents the current depth of the derivation tree; at each derivation step an item is added to the DEPTH list. The feature TEMP represents the number of derivation steps before generating the next  symbol. Every application of the second rule doubles the depth of TEMP list (with respect to its length after the previous application of the rule). Thus the number of derivation steps for generating each ","is always twice the number of steps for generating its predecessor, and for every sentential form of length ","any partial derivation tree’s depth is bounded by an exponential function of","(approximately","). Therefore ","is","and but neither","","nor"," .","  ","CAT   DEPTH   TEMP  ","                                      CAT   DEPTH   TEMP   ","  CAT   DEPTH  t  TEMP ","   CAT   DEPTH","  TEMP "," ","  CAT   DEPTH  t   TEMP     CAT LEX  t   CAT   DEPTH","  TEMP ","t   ","  CAT   DEPTH  t   TEMP ","   CAT   DEPTH  TEMP   ","  CAT LEX  t                                       ",""," ","CAT","LEX  t ","Figure 3: A unication grammar, ,  . Inter-relations among the OLP denitions","Below we make a comparison of all given OLP def-","initions; such relationships were not investigated in","the past. We begin by considering skeletal gram-","mars.","Johnson’s condition is the only one omitting all","","’s, thus none of the others implies",".","","",": The depth of any","deriva-","tion tree is bounded by a linear function of its yield,","therefore for every string there exists a derivation","tree of at most a polynomial depth, and an","","grammar is","."," ","",",",",",",","",": The gram-","mar of gure 2 is an","","grammar (viewing CAT","as the category) but it does not satisfy the other con-","straints."," ","",",",",",",",": By Jaeger et","al. (2002), the depth of any derivation tree","(partial/non-partial) admitted by an","","gram-","mar is bounded by a linear function of the size of","its yield, thus an","","grammar satises all","the other constraints. A grammar satisfying the","constraints may still have an innitely ambiguous","context-free backbone.","We continue the analysis by comparing the def-","initions which are applicable to general unication","grammars."," ",": A","grammar is also","; it","can only generate derivation trees whose depth is","bounded by a function of their yield, and there ex-","ist only a nite number of derivation trees up to a","certain depth. By gure 1, an","grammar is not","necessarily","."," ","",": None of the conditions implies","the other. The grammar of gure 3 is","but not","  . A grammar whose language consists of","only one word, and its derivation is of a constant","depth, may still contain a redundant rule generating","arbitrarily deep trees whose frontier is of length",".","Thus it is","","but not","."," ,","",":","means that every derivation","tree is bounded by some function of its yield.","means that for every string there exist at least one","derivation tree of a polynomial depth of its yield.","The grammar of gure 3 is","and",", but since","every derivation tree’s depth is exponential in the","size of its yield, it is not",". The grammar of gure","2 is",", but since it is innitely ambiguous, it is","neither","nor","."," ,","","",": The depth of any derivation","tree admitted by an","","grammar is bounded by","a linear function of its yield. Thus an","","gram-","mar is","and",". By gure 1, an","and","grammar is not necessarily","",".","Figure 4 depicts the inter-relations hierarchy dia-","gram of the OLP denitions, separated for skeletal","and general unication grammars. The arrows rep-","resent the implications discussed above.","skeletal grammars.","","  ","","","","  ","","","general unication grammars.","","  ","","","  Figure 4: Inter-relations Hierarchy diagram."]},{"title":"5 Undecidability proofs","paragraphs":["For the denitions which are applicable only to skeletal grammars it is easy to verify whether a grammar satises the constraint. The denitions that apply to arbitrary unication grammars are harder to check. In this section we give sketches of proofs of undecidability of three of the OLP denitions: Finite Ambiguity (","), Depth-Boundedness (",") and Shieber’s OLP (","","). Theorem 1. Finite ambiguity is undecidable. Proof sketch. In order to show that nite ambiguity is undecidable, we use a reduction from the membership problem, which is known to be undecidable (Johnson, 1988). We assume that there exists an algorithm,","",", for deciding","and show how it can be used to decide whether  .","Given a string and a grammar ",", construct","",", by adding the rule  ","","to  ’s set of rules.","Apply ","to   , ","","is on","iff","  . If   then   ",", therefore by applying","the rule  ","","innitely many times, there exist","an innite number of derivation trees for","admitted","by   . If"," ","then     ",", no application","of the additional rule would generate any derivation","tree for",", and ","","is nitely ambiguous.","Since the membership problem is undecidable, it","is undecidable whether there exist only a nite num-","ber of derivation trees for a string","admitted by  . Hence nite ambiguity is undecidable. Theorem 2. Depth-boundedness is undecidable. Proof sketch. In order to prove undecidability of depth-boundedness, we use a reduction from the Turing machines halting problem, which is known to be undecidable (Hopcroft and Ullman, 1979, 183-185). We assume that there exists an algorithm, ","","",", for deciding","and show how it can be used to decide whether a Turing machine","terminates on the empty input",".","Johnson (1988) suggested a transformation from the Turing machines halting problem to unication grammars. The transformation generates a grammar,"," ",", which consists of unit-rules only, and can","generate at most one complete derivation tree. As-","sume the existence of an algorithm","","",". Apply","",""," to"," . If"," ","is","then the grammar gen-","erates a complete derivation tree, therefore its lan-","guage is non empty and","terminates on the empty","input. Otherwise,  ","and","does not termi-","nate on the empty input. Thus, we have decided the","Turing machines halting problem.","Theorem 3. ","is undecidable.","Proof sketch. In order to prove undecidability of","  , we use a combination of the undecidability","proofs of","and",". Given a Turing machine",",","construct","  using Johnson’s reduction, then construct ","","","by adding  ","","","to"," ",". Assume the","existence of an algorithm","",", deciding","",".   ","is"," iff","does not terminate on the empty in-","put. Thus, by applying","","on   ",", we have decided","the Turing machines halting problem."]},{"title":"6 Conclusions","paragraphs":["In this paper we compare several variants of the OLP constraint for the rst time. We give sketches of proofs of undecidability of three OLP conditions, full proofs along with undecidability proofs of other conditions are given in Jaeger et al. (2002). In Jaeger et al. (2002) we also give a novel OLP constraint as well as an algorithm for deciding whether a grammar satises it. The constraint is applicable to all unication grammar formalisms. It is more liberal than the existing constraints that are limited to skeletal grammars only, yet, unlike all denitions that are applicable to general unication grammars, it can be tested efciently. Acknowledgements The work of Nissim Francez was partially funded by the vice-president’s fund for the promotion of research at the Technion. The work of Shuly Wintner was supported by the Israeli Science Foundation (grant no. 136/1)."]},{"title":"References","paragraphs":["Bob Carpenter. 1992. The Logic of Typed Feature Structures. Cambridge Tracts in Theoretical Computer Science. Cambridge University Press.","Noam Chomsky. 1975. Remarks on nominaliza-tion. In Donald Davidson and Gilbert H. Harman, editors, The Logic of Grammar, pages 262 289. Dickenson Publishing Co., Encino, California.","Nissim Francez and Shuly Wintner. In preperation. Feature structure based linguistic formalisms.","Andrew Haas. 1989. A parsing algorithm for unication grammar. Computational Linguistics, 15(4):219232.","J. Hopcroft and J. Ullman. 1979. Introduction to automata theory languages and computation.","Efrat Jaeger, Nissim Francez, and Shuly Wintner. 2002. Unication grammars and off-line parsability. Technical report, Technion, Israel In-stitute of Technology.","Mark Johnson. 1988. Attribute-Value Logic and the Theory of Grammar. CSLI Lecture Notes. CSLI.","Ronald M. Kaplan and Joan Bresnan. 1982. Lexical-functional grammar: A formal system for grammatical representation. The MIT Press, page 266.","Jonas Kuhn. 1999. Towards a simple architecture for the structure-function mapping. Proceedings of the LFG99 Conference.","Fernando C. N. Pereira and David H. D. Warren. 1983. Parsing as deduction. Proceedings of ACL - 21.","Stuart M. Shieber. 1992. Constraint-based grammar formalisms. MIT Press.","Leen Torenvliet and Marten Trautwein. 1995. A note on the complexity of restricted attributevalue grammars. ILLC Research Report and Technical Notes Series CT-95-02, University of Amsterdam, Amsterdam.","Shuly Wintner and Nissim Francez. 1999. Off-line parsability and the well-foundedness of subsump-tion. Journal of Logic, Language and Informa-tion, 8(1):1-16, January."]}]}