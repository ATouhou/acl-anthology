{"sections":[{"title":"","paragraphs":["Proceedings of the 4th International Workshop on Semantic Evaluations (SemEval-2007), pages 398–401, Prague, June 2007. c⃝2007 Association for Computational Linguistics"]},{"title":"UNIBA: JIGSAW algorithm for Word Sense Disambiguation P. Basile and M. de Gemmis and A.L. Gentile and P. Lops and G. Semeraro Department of Computer Science - University of Bari - Via E. Orabona, 4 70125 Bari ITALY {basilepp, degemmis, al.gentile, lops, semeraro}@di.uniba.it Abstract","paragraphs":["Word Sense Disambiguation (WSD) is traditionally considered an AI-hard problem. A breakthrough in this field would have a significant impact on many relevant web-based applications, such as information retrieval and information extraction. This paper describes JIGSAW, a knowledge-based WSD system that attemps to disambiguate all words in a text by exploiting WordNet1 senses. The main assumption is that a specific strategy for each Part-Of-Speech (POS) is better than a single strategy. We evaluated the accuracy of JIGSAW on SemEval-2007 task 1 competition2",". This task is an application-driven one, where the applica-tion is a fixed cross-lingual information retrieval system. Participants disambiguate text by assigning WordNet synsets, then the system has to do the expansion to other languages, index the expanded documents and run the retrieval for all the languages in batch. The retrieval results are taken as a measure for the effectiveness of the disambiguation."]},{"title":"1 The JIGSAW algorithm","paragraphs":["The goal of a WSD algorithm consists in assigning a word wi occurring in a document d with its appropriate meaning or sense s, by exploiting the context C in where wi is found. The context C for wi is defined as a set of words that precede and follow wi. The sense s is selected from a predefined set of possibilities, usually known as sense inventory. In the proposed algorithm, the sense inventory is obtained from WordNet 1.6, according to SemEval-2007 task 1 instructions. JIGSAW is a WSD algorithm based on the idea of combining three different strategies to disambiguate nouns, verbs, adjectives and adverbs. The main motivation behind our approach is that","1","http://wordnet.princeton.edu/","2","http://www.senseval.org/ the effectiveness of a WSD algorithm is strongly influenced by the POS tag of the target word. An adaptation of Lesk dictionary-based WSD algorithm has been used to disambiguate adjectives and adverbs (Banerjee and Pedersen, 2002), an adaptation of the Resnik algorithm has been used to disambiguate nouns (Resnik, 1995), while the algorithm we developed for disambiguating verbs exploits the nouns in the context of the verb as well as the nouns both in the glosses and in the phrases that WordNet utilizes to describe the usage of a verb. JIGSAW takes as input a document d = {w1, w2,...,wh} and returns a list of WordNet synsets X = {s1, s2, ..., sk} in which each element si is obtained by disambiguating the target word wi based on the information obtained from WordNet about a few immediately surrounding words. We define the context C of the target word to be a window of n words to the left and another n words to the right, for a total of 2n surrounding words. The algorithm is based on three different procedures for nouns, verbs, adverbs and adjectives, called JIGSAWnouns, JIGSAWverbs, JIGSAWothers, respectively. More details for each one of the above mentioned procedures follow. 1.1 JIGSAWnouns The procedure is obtained by making some variations to the algorithm designed by Resnik (1995) for disambiguating noun groups. Given a set of nouns W = {w1,w2,...,wn}, obtained from document d, with each wi having an associated sense inventory Si = {si1,si2,...,sik} of possible senses, the goal is assigning each wi with the most appropriate sense sih ∈ Si, according to the similarity of wi with the other words in W (the context for wi). The idea is to define a function φ (wi,sij), wi ∈ W , sij ∈ Si, that computes a value in [0, 1] representing the confidence with which word wi can be assigned with sense sij. The intuition behind this algorithm is essentially the same exploited by Lesk (1986) and other authors: The most plausible assignment of senses to multiple co-occurring words is the one that maximizes relatedness of meanings among the cho-398 sen senses. JIGSAWnouns differs from the original algorithm by Resnik (1995) in the similarity measure used to compute relatedness of two senses. We adopted the Leacock-Chodorow measure (Leacock and Chodorow, 1998), which is based on the length of the path between concepts in an IS-A hierarchy. The idea behind this measure is that similarity between two synsets, s1 and s2, is inversely proportional to their distance in the WordNet IS-A hierarchy. The distance is computed by finding the most specific subsumer (MSS) between s1 and s2 (each ancestor of both s1 and s2 in the WordNet hierarchy is a subsumer, the MSS is the one at the lowest level) and counting the number of nodes in the path between s1 and s2 that traverse their MSS. We extended this measure by introducing a parameter k that limits the search for the MSS to k ancestors (i.e. that climbs the WordNet IS-A hierarchy until either it finds the MSS or k +1ancestors of both s1 and s2 have been explored). This guarantees that “too abstract” (i.e. “less informative”) MSSs will be ignored. In addition to the semantic similarity function, JIGSAWnouns differs from the Resnik algorithm in the use of:","1. a Gaussian factor G, which takes into account the distance between the words in the text to be disambiguated;","2. a factor R, which gives more importance to the synsets that are more common than others, according to the frequency score in WordNet;","3. a parametrized search for the MSS between two concepts (the search is limited to a certain number of ancestors). Algorithm 1 describes the complete procedure for the disambiguation of nouns. This algorithm considers the words in W pairwise. For each pair (wi,wj), the most specific subsumer MSSij is identified, by reducing the search to depth1 ancestors at most. Then, the similarity sim(wi,wj, depth2) between the two words is computed, by reducing the search for the MSS to depth2 ancestors at most. MSSij is considered as supporting evidence for those synsets sik in Si and sjh in Sj that are descendants of MSSij. The MSS search is computed choosing the nearest MSS in all pairs of synsets sik,sjh. Likewise, the similarity for (wi,wj) is the max similarity computed in all pairs of sik,sjh and is weighted by a gaussian factor that takes into account the position of wi and wj in W (the shorter is the distance Algorithm 1 The procedure for disambiguating nouns derived from the algorithm by Resnik 1: procedure JIGSAWnouns(W, depth1,depth2) ▷","finds the proper synset for each polysemous noun in the set","W = {w1,w2,...,wn}, depth1 and depth2 are used in","the computation of MSS 2: for all wi,wj ∈ W do 3: if i<jthen 4: sim ← sim(wi,wj,depth1) ∗","G(pos(wi),pos(wj)) ▷G(x, y) is a Gaussian","function which takes into account the difference between","the positions of wi and wj 5: MSSij ← MSS(wi,wj,depth2) ▷","MSSij is the most specific subsumer between wi and wj,","search for MSS restricted to depth2 ancestors 6: for all sik ∈ Si do 7: if is-ancestor(MSSij,sik) then ▷ if","MSSij is an ancestor of sik 8: supik ← supik + sim 9: end if 10: end for 11: for all sjh ∈ Sj do 12: if is-ancestor(MSSij,sjh) then 13: supjh ← supjh + sim 14: end if 15: end for 16: normi ← normi + sim 17: normj ← normj + sim 18: end if 19: end for 20: for all wi ∈ W do 21: for all sik ∈ Si do 22: if normi > 0 then 23: φ (i, k) ← α ∗ supik/norm i + β ∗ R(k) 24: else 25: φ (i, k) ← α/ |Si| + β ∗ R(k) 26: end if 27: end for 28: end for 29: end procedure between the words, the higher is the weight). The value φ (i, k) assigned to each candidate synset sik for the word wi is the sum of two elements. The first one is the proportion of support it received, out of the support possible, computed as supik/norm i in Algorithm 1. The other element that contributes to φ (i, k) is a factor R(k) that takes into account the rank of sik in WordNet, i.e. how common is the sense sik for the word wi. R(k) is computed as: R(k)=1− 0.8 ∗","k n − 1 (1) where n is the cardinality of the sense inventory Si for wi, and k is the rank of sik in Si, starting from 0.","Finally, both elements are weighted by two parameters: α, which controls the contribution given 399 to φ (i, k) by the normalized support, and β , which controls the contribution given by the rank of sik. We set α =0.7 and β =0.3. The synset assigned to each word in W is the one with the highest φ value. Notice that we used two different parameters, depth1 and depth2 for setting the maximum depth for the search of the MSS: depth1 limits the search for the MSS computed in the similarity function, while depth2 limits the computation of the MSS used for assigning support to candidate synsets. We set depth1=6and depth2=3. 1.2 JIGSAWverbs Before describing the JIGSAWverbs procedure, the description of a synset must be defined. It is the string obtained by concatenating the gloss and the sentences that WordNet uses to explain the usage of a synset. First, JIGSAWverbs includes, in the context C for the target verb wi, all the nouns in the window of 2n words surrounding wi. For each candidate synset sik of wi, the algorithm computes nouns(i, k), that is the set of nouns in the description for sik.","maxjk = maxw l∈nouns(i,k) {sim(wj,wl,depth)} (2) where sim(wj,wl,depth) is defined as in J IGSAW nouns. In other words, maxjk is the highest similarity value for wj wrt the nouns related to the k-th sense for wi. Finally, an overall similarity score among sik and the whole context C is computed: φ (i, k)=R(k) ·","P w j∈CG(pos(wi),pos(wj)) · maxjk","P","hG(pos(wi),pos(wh)) (3) where R(k) is defined as in Equation 1 with a different constant factor (0.9) and G(pos(wi),pos(wj)) is the same Gaussian factor used in J IGSAW nouns, that gives a higher weight to words closer to the target word. The synset assigned to wi is the one with the highest φ value. Algorithm 2 provides a detailed description of the procedure. 1.3 JIGSAWothers This procedure is based on the WSD algorithm proposed by Banerjee and Pedersen (2002). The idea is to compare the glosses of each candidate sense for Algorithm 2 The procedure for the disambiguation of verbs 1: procedure JIGSAWverbs(wi,d,depth) ▷ finds the","proper synset of a polysemous verb wi in document d 2: C ←{ w1,...,wn} ▷Cis","the context for wi. For example, C = {w1,w2,w4,w5},","if the sequence of words {w1,w2,w3,w4,w5} occurs in d,","w3 being the target verb, wj being nouns, j ̸=3 3: Si ←{ si1,...sim} ▷Si","is the sense inventory for wi, that is the set of all candidate","synsets for wi returned by WordNet 4: s ← null ▷ s is the synset to be returned 5: score ←− MAXDOUBLE ▷ score is the","similarity score assigned to s 6: p ← 1 ▷pis the position of the synsets for wi 7: for all sik ∈ Si do 8: max ←{ max1k,...,maxnk} 9: nouns(i, k) ←{ noun1,...,nounz} ▷","nouns(i, k) is the set of all nouns in the description of sik 10: sumGauss ← 0 11: sumT ot ← 0 12: for all wj ∈ C do ▷ computation of the similarity","between C and sik 13: maxjk ← 0 ▷maxjk is the highest similarity","value for wj, wrt the nouns related to the k-th sense for wi. 14: sumGauss ← G(pos(wi),pos(wj)) ▷","Gaussian function which takes into account the difference","between the positions of the nouns in d 15: for all nounl ∈ nouns(i, k) do 16: sim ← sim(wj,nounl,depth) ▷simis","the similarity between the j-th noun in C and l-th noun in","nouns(i, k) 17: if sim > maxjk then 18: maxjk ← sim 19: end if 20: end for 21: end for 22: for all wj ∈ C do 23: sumT ot ← sumT ot+G(pos(wi),pos(wj))∗","maxjk 24: end for 25: sumT ot ← sumT ot/sumGauss 26: φ (i, k) ← R(k) ∗ sumT ot ▷ R(k) is defined as in","JIGSAWnouns 27: if φ (i, k) >scorethen 28: score ← φ (i, k) 29: p ← k 30: end if 31: end for 32: s ← sip 33: return s 34: end procedure the target word to the glosses of all the words in its context. Let Wi be the sense inventory for the target word wi. For each sik ∈ Wi, JIGSAWothers computes the string targetGlossik that contains the words in the gloss of sik. Then, the procedure computes the string contextGlossi, which contains the words in the glosses of all the synsets corre-400 sponding to each word in the context for wi. Finally, the procedure computes the overlap between contextGlossi and targetGlossik, and assigns the synset with the highest overlap score to wi. This score is computed by counting the words that occur both in targetGlossik and in contextGlossi. If ties occur, the most common synset in WordNet is chosen."]},{"title":"2 Experiment","paragraphs":["We performed the experiment following the instructions for SemEval-2007 task 1 (Agirre et al., 2007). JIGSAW is implemented in JAVA, by using JWNL library3","in order to access WordNet 1.6 dictionary. We ran the experiment on a Linux-based PC with Intel Pentium D processor having a speed of 3 GHz and 2 GB of RAM. The dataset consists of 29,681 documents, including 300 topics. Results are reported in Table 1. Only two systems (PART-A and PART-B) partecipated to the competition, thus the organizers decided to add a third system (ORGANIZERS) developed by themselves. The systems were scored according to standard IR/CLIR measures as implemented in the TREC evaluation package4",". Our system is labelled as PART-A. system IR documents IR topics CLIR no expansion 0.3599 0.1446 full expansion 0.1610 0.1410 0.2676 1st sense 0.2862 0.1172 0.2637 ORGANIZERS 0.2886 0.1587 0.2664 PART-A 0.3030 0.1521 0.1373 PART-B 0.3036 0.1482 0.1734 Table 1: SemEval-2007 task 1 Results","All systems show similar results in IR tasks, while their behaviour is extremely different on CLIR task. WSD results are reported in Table 2. These results are encouraging as regard precision, considering that our system exploits only WordNet as kwnoledge-base, while ORGANIZERS uses a supervised method that exploits SemCor to train a kNN classifier."]},{"title":"3 Conclusions","paragraphs":["In this paper we have presented a WSD algorithm","that exploits WordNet as knowledge-base and uses 3 http://sourceforge.net/projects/jwordnet 4 http://trec.nist.gov/ system precision recall attempted SENSEVAL-2 ORGANIZERS 0.584 0.577 93.61% PART-A 0.498 0.375 75.39% PART-B 0.388 0.240 61.92% SENSEVAL-3 ORGANIZERS 0.591 0.566 95.76% PART-A 0.484 0.338 69.98% PART-B 0.334 0.186 55.68% Table 2: WSD results on all-words task three different methods for each part-of-speech. The algorithm has been evaluated by SemEval-2007 task 1. The system shows a good performance in all tasks, but low precision in CLIR evaluation. Probably, the negative result in CLIR task depends on complex interaction of WSD, expansion and indexing. Contrarily to other tasks, organizers do not plan to provide a ranking of systems on SemEval-2007 task 1. As a consequence, the goal of this task - what is the best WSD system in the context of a CLIR system? - is still open. This is why the organizers stressed in the call that this was ”a first try”."]},{"title":"References","paragraphs":["E. Agirre, B. Magnini, o. Lopez de Lacalle, A. Otegi, G. Rigau, and Vossen. 2007. Semeval-2007 task 1: Evaluating wsd on cross-language information retrieval. In Proceedings of SemEval-2007. Association for Computational Linguistics.","S. Banerjee and T. Pedersen. 2002. An adapted lesk algorithm for word sense disambiguation using wordnet. In CICLing’02: Proc. 3rd Int’l Conf. on Computational Linguistics and Intelligent Text Processing, pages 136–145, London, UK. Springer-Verlag.","C. Leacock and M. Chodorow. 1998. Combining local context and wordnet similarity for word sense identification. In C. Fellbaum (Ed.), WordNet: An Electronic Lexical Database, pages 305–332. MIT Press.","M. Lesk. 1986. Automatic sense disambiguation using machine readable dictionaries: how to tell a pine cone from an ice cream cone. In Proceedings of the 1986 SIGDOC Conference, pages 20–29. ACM Press.","P. Resnik. 1995. Disambiguating noun groupings with respect to WordNet senses. In Proceedings of the Third Workshop on Very Large Corpora, pages 54–68. Association for Computational Linguistics. 401"]}]}