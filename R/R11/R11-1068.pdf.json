{"sections":[{"title":"","paragraphs":["Proceedings of Recent Advances in Natural Language Processing, pages 495‚Äì502, Hissar, Bulgaria, 12-14 September 2011."]},{"title":"A Mechanism to Restrict the Scope of Clause-Bounded Quantifiers in ‚ÄòContinuation‚Äô Semantics   Anca Dinu Faculty of Foreign Languages and Literatures, University of Bucharest anca_d_dinu@yahoo.com    Abstract ","paragraphs":["This paper presents a formal mechanism to properly constrain the scope of negation and of certain quantificational determiners to their minimal clause in continuation semantics framework introduced in Barker and Shan (2008) and which was subsequently extended from sentential level to discourse level in Dinu (2011). In these works, type shifting is employed to account for side effects such as pronominal anaphora binding or quantifier scope. However, allowing arbitrary type shifting will result in overgenerating interpretations impossible in natural language. To filter out some of these impossible interpretations, once the negation or the quantifiers reach their maximal scope limits (that is their minimal clause), one should force their scope closing by applying a standard type shifter Lower. But the actual mechanism that forces the scope closing was left underspecified in previous work on continuation semantics. We propose here such a mechanism, designed to ensure that no lexical entries having the scope bounded to their minimal clause (such as not, no, every, each, any, etc) will ever take scope outside."]},{"title":"1 Introduction","paragraphs":["The starting point of this paper is the continuation semantics introduced in Barker and Shan (2008) and extended from sentential level to discourse level in Dinu (2011). In this framework, type shifting is used to account for side effects such as pronominal anaphora binding or quantifier scope. However, allowing arbitrary type shifting will result in overgenerating interpretations impossible in natural language. To filter out these impossible interpretations, we first need to understand the scope behavior of each scope-taking lexical entry: its maximal scope limits and the scope precedence preferences w.r.t. other lexical entries. Second, we should force the scope closing of the quantifiers by applying a standard type shifter Lower (which is equivalent to identity function application), once their scope limits were reached. But the actual mechanism that ensures the scope closing was left underspecified in previous work on continuation semantics.","In what follows, we propose such a mechanism, designed to ensure that no lexical entry having the scope bounded to its minimal clause (such as not, no, every, each, any, etc) will ever take scope outside, thus getting right discourse truth conditions.","The programming language concept of continuations was successfully used by Barker and Shan in a series of articles (Barker 2002, Barker 2004, Shan 2005, Shan and Barker 2006, Barker and Shan 2008) to analyze intra-sentential linguistic phenomena (focus fronting, donkey anaphora, presupposition, crossover, superiority, etc). Moreover, (de Groote, 2006) proposed an elegant discourse semantics based on continuations. Continuations are a standard tool in computer science, used to control side effects of computation. They are a notoriously hard to understand notion. Actually, understanding what a continuation is per se is not so hard. What is more difficult is to understand how a grammar based on continuations (a ‚Äûcontinuized‚Äü grammar) works. The basic idea of continuizing a grammar is to provide subexpressions with direct access to their own continuations (future context), so subexpressions are modified to take a continuation as an argument. A continuized grammar is said to be written in continuation 495 passing style. Continuation passing style is in fact a restricted (typed) form of Œª-calculus.","Historically, the first continuation operators were undelimited (e.g., call/cc or J). An undelimited continuation of an expression represents ‚Äúthe entire (default) future for the computation‚Äù of that expression. Felleisen (1988) introduced delimited continuations (sometimes called ‚Äûcomposable‚Äü continuations) such as control (‚ÄûC‚Äü) and prompt (‚Äû%‚Äü). Delimited continuations represent the future of the computation of the expression up to a certain boundary. Interestingly, the natural-language phenomena discussed here make use only of delimited continuations.","For instance, if we take the local context to be restricted to the sentence, when computing the meaning of the sentence John saw Mary., the default future of the value denoted by the subject is that it is destined to have the property of seeing Mary predicated of it. In symbols, the continuation of the subject denotation j is the function Œªx. saw m x. Similarly, the default future of the object denotation m is the property of being seen by John, the function Œªy. saw y j; the continuation of the transitive verb denotation saw is the function ŒªR. R m j; and the continuation of the verb phrase saw Mary is the function ŒªP. P j. This simple example illustrates two important aspects of continuations:","(1) every meaningful subexpression has a continuation;","(2) the continuation of an expression is always relative to some larger expression containing it.","Thus, when John occurs in the sentence John left yesterday., its continuation is the property Œªx. yesterday left x; when it occurs in Mary thought John left., its continuation is the property Œªx. thought (left x) m and when it occurs in the sentence Mary or John left., its continuation is Œªx. (left m) ‚à® (left x) and so on.","It is worth mentioning that some results of traditional semantic theories are particular cases of results in continuation semantics: ÔÇ∑ The generalized quantifier type from","Montague grammar (Montague, 1970)","<<<e,t>,t>,t> is exactly the type of","quantificational determiners in continuation-","based semantics;","ÔÇ∑ The <<t,t>,t> type of sentences in dynamic semantics is exactly the type of sentences in continuation-based semantics. In fact, dynamic interpretation constitutes a partial continuization in which only the category S has been continuized.","This is by no means a coincidence, MG only continuizes the noun phrase meanings and dynamic semantics only continuizes the sentence meanings, rather than continuizing uniformly throughout the grammar as it is done in continuation semantics."]},{"title":"2 Preliminaries","paragraphs":["We use Barker and Shan‚Äüs (2008) tower notation for a given expression, which consists of three levels: the top level specifies the syntactic category of the expression couched in categorial grammar, the middle level is the expression itself and the bottom level is the semantic value:  syntactic category","expression semantic value   The syntactic categories are written C|B A",", where A, B and C can be any categories. We read this counter clockwise as ‚Äúthe expression functions as a category A in local context, takes scope at an expression of category B to form an expression of category C.‚Äù","The semantic value in linear notation Œªk. f[k(x)] is equivalently written vertically as f[ ] x","omitting the future context (continuation) k. Here, x can be any expression, and f[ ] can be any expression with a gap [ ]. Free variables in x can be bound by binders in f [ ]. This vertical (layered) notational convention is meant to make the combination process of two expressions easier (more visual) then in linear notation. Here there are the two possible modes of combination (Barker and Shan 2008):","   C|D A/B","D|E","B","left ‚àí exp rigùëït ‚àí exp g[ ] f ùëï[ ] x  = C|E A","left ‚àí exp rigùëït ‚àí exp g[ùëï ] f(x)     C|D B","D|E","B\\A","left ‚àí exp rigùëït ‚àí exp g[ ] x ùëï[ ] f  = C|E A","left ‚àí exp rigùëït ‚àí exp g[ùëï ] f(x) ","","Below the horizontal lines, combination proceeds simply as in combinatory categorial grammar: in the syntax, B combines with A/B or B\\A to form A; in the semantics, x combines with f to form f(x). Above the lines is where the 496 combination machinery for continuations kicks in. The syntax combines the two pairs of categories by a kind of cancellation: the D on the left cancels with the D on the right. The semantics combines the two expressions with gaps by a kind of composition: we plug h[ ] to the right into the gap of g[ ] to the left, to form g[h[ ]]. The expression with a gap on the left, g[ ], always surrounds the expression with a gap on the right, h[ ], no matter which side supplies the function and which side supplies the argument below the lines. This fact expresses the generalization that the default order of semantic evaluation is left-to-right.","When there is no quantification or anaphora involved, a simple sentence like John came. is derived as follows:","  DP DP\\S Joùëïn came j came =","S Joùëïn came came j ","","In the syntactic layer, as usual in categorical grammar, the category under slash (here DP) cancels with the category of the argument expression; the semantics is function application.","Quantificational expressions have extra layers on top of their syntactic category and on top of their semantic value, making essential use of the powerful mechanism of continuations in ways proper names or definite descriptions do not. For instance, below is the derivation of A man came.:","   S|S DP /N a ŒªP.","‚àÉx. P x x  N man man S|S DP\\S came  came  =","S|S","S","a man came","‚àÉx. man x came x ","","Comparing the analysis above of John came with that of A man came reveals that came has been given two distinct values. The first, simpler value is the basic lexical entry, the more complex value being derived through the standard type-shifter Lift, proposed by Partee and Rooth (1983), Jacobson (1999), Steedman (2000), and many others:  A","expression x Lift  B|B A","expression [ ] x ","","Syntactically, Lift adds a layer with arbitrary (but matching!) syntactic categories. Semantically, it adds a layer with empty brackets. In linear notation we have: x Lift Œªk. k(x).","To derive the syntactic category and a semantic value with no horizontal line, Barker and Shan (2008) introduce the type-shifter Lower. In general, for any category A, any value x, and any semantic expression f[ ] with a gap, the following type-shifter is available:","  A|S S","expression f[ ] x Lower  A","expression f[x] ","","Syntactically, Lower cancels an S above the line to the right with an S below the line. Semantically, Lower collapses a two-level meaning into a single level by plugging the value x below the line into the gap [ ] in the expression f[ ] above the line. Lower is equivalent to identity function application.","The third and the last type shifter we need is one that accounts for binding. We adopt the idea (in line with Barker and Shan (2008)) that the mechanism of binding is the same as the mechanism of scope taking. Binding is a term used both in logics and in linguistics with analog (but not identical) meaning. In logics, a variable is said to be bound by an operator (as the universal or existential operators) if the variable is inside the scope of the operator. If a variable is not in the scope of any operator, than the variable is said to be free. In linguistics, a binder may be a constituent such as a proper name (John), an indefinite common noun (a book), an event or a situation, etc. Anaphoric expressions such as pronouns (he, she, it, him, himself, etc), definite common nouns (the book, the book that John read), demonstrative pronouns (like this, that), etc. act as variables that take the value of (are bind by) a previous binder.","In order to give a proper account of anaphoric relations in discourse, we need to formulate an explicit semantics for both the binder and the anaphoric expressions to be bound. Any determiner phrase (DP) may act as a binder, as the Bind rule from Barker and Shan (2008) explicitly states:","  A|B DP","expression f[ ] x Bind  A|DP ‚ä≥ B DP","expression f([ ]x)","x   At the syntactic level, the Bind rule says that an expression that functions in local context as a DP may offer to bind an anaphoric expression to 497 the right ((Barker and Shan 2008) encode that by the sign ‚ä≥). At the semantic level, the expression transmits (copies) the value of the variable x. In linear notation, the semantic part of the Bind rule looks like this: Œªk. f[k(x)]","Bind","Œªk. f( k x x) As for the elements that may be bound,","(Barker and Shan 2008) give the following","lexical entry for the singular pronoun he: ","DP ‚ä≥ S|S DP ùëïe Œªy. [ ] y ","","To account for multiple anaphoric expressions (and their binders) or for inverse scope of multiple quantifiers, each binder can occupy a different scope-taking level in the compositional tower. With access to multiple levels, it is easy to handle multiple binders. Analyzing pronouns as two-level rules is the same thing as claiming that pronouns take scope (see Dowty (2007), who also advocates treating pronouns as scope-takers). Then, a pronoun or another anaphoric expression chooses its binder by choosing where to take scope. So, distinct scope-taking levels correspond to different binders, layers playing the role of indices: a binder and the pronoun it binds must take effect at the same layer in the compositional tower. A superior level takes scope at inferior levels and left expressions take scope at right expressions, to account for left-to-right natural language order of processing.","Dinu (2011) extends the formalism from sentence level to discourse level, giving the sentence connectors such as the dot the following semantics:  S\\(S/S)",". ŒªpŒªq. p q "," that is, the dot is a function that takes two sentence denotations and returns a sentence denotation (the conjunction of original sentence denotation).","For two affirmative sentences with no anaphoric relations and no quantifiers, such as John came. Mary left., the derivation trivially proceeds as follows:","","S Joùëïn came came j S\\(S/S)",". ŒªpŒªq. p q","S Mary left left m =","S","Joùëïn came. Mary left came j left m   As one sees above, there is no need in this","simple case to resort to type shifting at all. Nevertheless, type shifting and the powerful mechanism of continuations are employed when dealing with linguistic side effects such quantifier scope or binding. For instance, to derive the denotation of A man came. He whistled., type lifting, type lowering and Bound rule become necessary:"," S|S DP /N a ŒªP.","‚àÉx. P x x  N man man = S|S DP a man","‚àÉx. man x x   Bind  S|DP ‚ä≥ S DP a man","‚àÉx. man x ( x)","x   S|DP ‚ä≥ S DP a man","‚àÉx. man x x","x","DP ‚ä≥ S|DP ‚ä≥ S DP\\S came  came =  S|DP ‚ä≥ S","S a man came","‚àÉx. man x ( x) came x  ","DP ‚ä≥ S|S DP","S|S","DP\\S ùëïe wùëïistled","Œªy. [ ] y"," whistled = DP ‚ä≥ S|S","S ùëïe wùëïistled Œªy. [ ] whistled y   S|DP ‚ä≥ S","S a man came","‚àÉx. man x x came x ","DP ‚ä≥ S|DP ‚ä≥ S S\\(S/S)","."," ŒªpŒªq. p q  DP ‚ä≥ S|S","S ùëïe wùëïistled Œªy. whistled y   =","S|S","S a man came. ùëïe wùëïistled ‚àÉx. man x (Œªy. x) came x whistled y Lower  ","S a man came. ùëïe wùëïistled","‚àÉx. man x Œªy. came x whistled y x   =","S a man came. ùëïe wùëïistled","‚àÉx. man x (came x whistled x)","","Note that the denotations of came and whistled were also lifted so as to match the ones of a and he, both being scope-takers. The last equality sign is due to routine lambda conversion. 498"]},{"title":"3 Restricting the Scope of Clause-Bounded Lexical Entries","paragraphs":["A first proposal for the lexical entry for the negation could look like this:  S|S","(DP\\S)/(DP\\S) not ¬¨[ ] [ ] "," meaning that negation functions in local context as a verb modifier and takes scope at a sentence to give a sentence.","Using this denotation for not, the piece of discourse John does not own a car. is interpreted as (ignoring the auxiliary does for simplicity):"," S|S DP Joùëïn  j  S|S","(DP\\S)/(DP\\S) not ¬¨   S|S","(DP\\S)/DP own  own  S|S DP a car","‚àÉx. car x x   =","S|S","S","Joùëïn not own a car","¬¨(‚àÉx. car x ) own x j Lower ","S Joùëïn not own a car","¬¨(‚àÉx. car x own x j)"," meaning that there is no car that John owns, a fair approximation of the intended meaning.","It is generally accepted that negation cannot take scope outside its minimal clause. But, if we do not restrict the possible scope of negation, continuing the discourse with the sentence *It is red., could result in the following derivation:"," S|DP ‚ä≥ S","S","Joùëïn not own a car","¬¨(‚àÉx. car x x) own x j","DP ‚ä≥ S|DP ‚ä≥ S S\\(S/S)","."," ŒªpŒªq. p q DP ‚ä≥ S|S","S It is red Œªy. is red y   =","S|S","S","Joùëïn not own a car. It is red ¬¨(‚àÉx. car x Œªy. x) own x j is red y Lower   ","S Joùëïn not own a car. It is red","¬¨(‚àÉx. car x Œªy. own x j s red y x)   =","S Joùëïn not own a car. It is red","¬¨(‚àÉx. car x own x j is red x )"," which would incorrectly assert that there is no car which is owned by John and which is red. Moreover, it would wrongly refer back to a car. In fact, if we do not restrict the possible scope of negation, any following sentence may be wrongly interpreted inside the scope of negation.","In order to block such interpretations, we could adopt a similar strategy with the one proposed in Barker and Shan (2008): to force the scope closing of not immediately after the interpretation of its minimal clause, by applying Lower. This also closes the scope of any other DP inside the scope of negation, so it becomes impossible for it to bind subsequent anaphoric expressions. But this strategy leaves the actual mechanis that insures the scope closing unspecified. As Barker and Shan put it, when referring to the scope closing of every, ‚ÄúLike most leading accounts of donkey anaphora, we provide no formal mechanism here that bounds the scope-taking of universals‚Äù.","In what follows, we propose such a mechanism within the continuation semantics framework. The mechanism is designed to ensure that no lexical entries having the scope bounded to their minimal clause (such as not, no, every, each, any, etc) will ever take scope outside.","We introduce a new category for clauses: C, of the same semantic type as the category S, namely t. C is the minimal discourse unit, whereas S is contains at least one such unit.","We constrain by definition the lexical entries with clause-bounded scope to take scope only at clauses. For instance, here there are the lexical entries for not, no and every:"," C|C","(DP\\C)/(DP\\C) not ¬¨[ ] [ ]  C|C DP /N no ŒªP.","¬¨‚àÉx. (P(x) ‚àß ) x   C|C C|C DP /N every ‚àÄx. [ ] ŒªP.","P x ‚ü∂ [ ] x   After the full interpretation of the minimal clause which they appear in, the category C has to be converted to category S. Specifically, one can use the following silent lexical entry:  S/C Œ¶","Œªp. p([])  499","This step ensures that clauses (of category C) can be further processed as pieces of discourse (of category S), because all discourse connectors (such as the dot or if) are allowed to take only expressions of category S as arguments.","We modify the Lower rule such that category C may also be lowered similarly to category S:","  A|C C","expression f[ ] x Lower  A","expression f[x]   With this clause-restricting mechanism, the","derivation of John does not own a car. becomes:  C|C DP Joùëïn  j  C|C","(DP\\C)/(DP\\C) not ¬¨   C|C","(DP\\C)/DP own  own  C|C DP a car","‚àÉx. car x x   =","C|C","C","Joùëïn not own a car","¬¨(‚àÉx. car x ) own x j Lower ","C Joùëïn not own a car","¬¨(‚àÉx. car x own x j)","","Now that the scope of negation is closed, it is obviously impossible for it to stretch over the following discourse. We only have to change the category C into S in order to connect it to the discourse:","  S/C Œ¶","Œªp. p([])","C Joùëïn not own a car","¬¨(‚àÉx. car x own x j)  =","S Joùëïn not own a car","Œªp. p([¬¨(‚àÉx. car x own x j)])  =","S Joùëïn not own a car","¬¨(‚àÉx. car x own x j)]  What about the binding capabilities of the","expressions in a clause whose scope has been","closed? The subject, for instance, should be able","to bind subsequent anaphora. It can do so by","lifting over the negation and being available to","bind from that position:  S|DP ‚ä≥ S C|C DP Joùëïn j ","j ","DP ‚ä≥ S|DP ‚ä≥ S C|C","(DP\\C)/(DP\\C) not  ¬¨ ","DP ‚ä≥ S|DP ‚ä≥ S C|C","(DP\\C)/DP own   own","DP ‚ä≥ S|DP ‚ä≥ S C|C DP a car [ ]","‚àÉx. car x x  =","S|DP ‚ä≥ S C|C","C","Joùëïn not own a car [ ]j","¬¨‚àÉx. car x own x Lower  S|DP ‚ä≥ S","C Joùëïn not own a car","[ ]j","¬¨‚àÉx. car x own x   S|S S/C Œ¶ [ ]","Œªp. p([])  S|DP ‚ä≥ S","C","Joùëïn not own a car","[ ]j","¬¨‚àÉx. car x own x = S|DP ‚ä≥ S","S Joùëïn not own a car","[ ]j","¬¨‚àÉx. car x own x   S|DP ‚ä≥ S","S Joùëïn not own a car","[ ]j","¬¨‚àÉx. car x own x","DP ‚ä≥ S|DP ‚ä≥ S S\\(S/S)","."," ŒªpŒªq. p q DP ‚ä≥ S|S","S","He came by foot Œªy.","came by foot y   = S|S","S","Joùëïn not own a car. He came by foot Œªy. j","¬¨‚àÉx. car x own x came by foot y Lower  ","S Joùëïn not own a car. He came by foot ¬¨‚àÉx. car x own x came by foot j","","It is conceivable that an indefinite in direct object position may also rise from its minimal negated clause to give the inverse scope interpretation. This interpretation may sometimes be ruled out on pragmatic grounds as being too uninformative (for instance, there is a car that John does not own is not a valid interpretation for John does not own a car.) or may be the preferred interpretation (there is a certain colleague Mary does not like is the preferred interpretation of Mary does not like a colleague.). Also, there are lexical entries such as negative polarity items (for instance, any) or definite descriptions (such as John, the man, the man who entered) that, when in direct object position of a negated verb phrase, take wide scope over negation and thus bind subsequent anaphora. For instance, here it is the derivation of Mary does not like John. He is rude.:"," S|S C|C DP Mary   m  S|S C|C","(DP\\C)/(DP\\C) not  ¬¨   S|S C|C DP\\C like   like ","S|DP ‚ä≥ S C|C DP Joùëïn j  j =  500","S|DP ‚ä≥ S C|C C","Mary not like Joùëïn j ¬¨","like j m Lower  S|DP ‚ä≥ S","C","Mary not like Joùëïn","j ¬¨ like j m   S|S S/C Œ¶ [ ]","Œªp. p([])  S|DP ‚ä≥ S","C","Mary not like Joùëïn","j ¬¨ like j m = S|DP ‚ä≥ S","S","Mary not like Joùëïn","j ¬¨ like j m   S|DP ‚ä≥ S","S","Mary not like Joùëïn","j ¬¨ like j m S|S","S\\(S/S) . [ ]","ŒªpŒªq. p q DP ‚ä≥ S|S S He is rude Œªy. [ ] is rude y   = S|S","S","Mary not like Joùëïn. He is rude Œªy. j","¬¨ like j m is rude y Lower  ","S Mary not like Joùëïn. He is rude Œªy. ¬¨ like j m is rude y j   =","S","Mary not like Joùëïn. He is rude ¬¨ like j m is rude j   The scope behavior of the quantificational determiners every and any may be accounted for in a similar manner. Consider for instance the following examples: John does not know every poem. *It is nice. John does not know any poem. *It is nice. The interpretative difference between every and any is made (in line with Quine and Geach among others) by the scope behavior of the two quantificational determiners. Any prefers to take wide scope, whereas every rather takes narrow scope:  C|C C|C DP Joùëïn   j  C|C C|C","(DP\\C)/(DP\\C) not ¬¨      C|C C|C","(DP\\C)/DP know   know  C|C C|C DP/N every ¬¨‚àÉx.","ŒªP. P x ‚àß ¬¨","x  C|C N poem  poem      =","C|C","C|C","C","Joùëïn not know every poem ¬¨ ¬¨‚àÉx.","poem x ‚àß ¬¨ know x j Lower two times  ","C Joùëïn does not know every poem ¬¨ ¬¨‚àÉx. poem x ‚àß ¬¨ know x j  S/C Œ¶","Œªp. p([])","C John does not know every poem ¬¨ ¬¨‚àÉx. poem x ‚àß ¬¨ know x j = ","S Joùëïn does not know every poem ¬¨ ¬¨‚àÉx. poem x ‚àß ¬¨ know x j"," which means that there is (at least) one poem that John does not know, a fare approximation of the intended meaning. In this context, the interpretation of It is nice. crashes, because it cannot find a suitable antecedent into the preceding discourse. It would have been useless for poem to offer to bind in the first place, because not takes scope over it and negation has to close its scope before its minimal clause is interpreted in discourse.","The interpretation of the quantificational determiner any in discourse proceeds similarly:"," C|C C|C DP /N any ¬¨‚àÉx. [ ] ŒªP.","P x ‚àß ¬¨[ ] x  C|C N poem [ ] poem = C|C C|C DP","any poem ¬¨‚àÉx. [ ]","poem x ‚àß ¬¨[ ] x   Lift  C|C C|C C|C DP","any poem ¬¨‚àÉx. [ ]","poem x ‚àß ¬¨[ ] [ ] x "," C|C C|C C|C DP Joùëïn    j  C|C C|C C|C","(DP\\C)/(DP\\C) not   ¬¨     C|C C|C C|C","(DP\\C)/DP know    know C|C C|C C|C DP","any poem ¬¨‚àÉx.","poem x ‚àß ¬¨  x    = C|C C|C C|C DP","Joùëïn not know any poem ¬¨‚àÉx. [ ]","poem x ‚àß ¬¨[ ] ¬¨[ ]","know x j Lower tùëïree times   501","C Joùëïn does not know any poem ¬¨‚àÉx. poem x ‚àß [know x j ] "," which means that there is no poem that John knows, a fare approximation of the intended meaning. It cannot be argued that it is the negation which prevents further referring to any poem, because any takes wide scope over negation. Obviously, the same mechanism prevents poem to bind subsequent anaphora both in the case of every and of any.","Notice that there is a third intermediate possibility of scope taking, with negation taking scope at the second level of the compositional tower:"," C|C C|C DP Joùëïn   j"," C|C C|C","(DP\\C)/(DP\\C) not  ¬¨     C|C C|C","(DP\\C)/DP know   know  C|C C|C DP/N any ¬¨‚àÉx.","ŒªP. P x ‚àß ¬¨","x  C|C N poem  poem","        = C|C C|C","C","John not know any poem ¬¨‚àÉx.","¬¨ poem x ‚àß ¬¨ know x j   Lower two times ","C John does not know any poem ¬¨‚àÉx. ¬¨ poem x ‚àß ¬¨ know x j  =","S John does not know any poem ¬¨‚àÉx. ¬¨poem x ‚ãÅ know x j ","","This interpretation is impossible in natural language. Thus, it may be said that any obligatory takes wide scope over negation not only with its general (first level) scope, but also with its nuclear scope."]},{"title":"4 Conclusions","paragraphs":["To conclude, allowing arbitrary type shifting overgenerates interpretations impossible in natural language. In order to filter some of them out, we proposed a mechanism that forbids clause bounded lexical entries to take scope outside their minimal clause. For this natural language fragment, the mechanism and the scope precedence preference of the lexical entries (for instance, not > indefinites, not > every, not < any) ensures the right discourse truth conditions."]},{"title":"References","paragraphs":["Barker, Chris. 2002. Continuations and the nature of quantification. Natural Language Semantics 10(3). 211-242.","Barker, Chris. 2004. Continuations in natural language. In Hayo Thielecke, editor, Proceedings of the fourth ACM SIGPLAN workshop on continuations, pages 55-64, 2004.","Barker, C and Shan Chung-chieh. 2008. Donkey anaphora is in-scope binding. In Semantics and Pragmatics Volume 1, pages 1-46.","Dowty, David. 2007. Compositionality as an empirical problem. In Chris Barker & Pauline Jacobson (eds.), Direct compositionality. Oxford University Press.","Dinu, Anca. 2011. Versatility of ‚Äûcontinuations‚Äü in discourse semantics. Fundamenta Informaticae (to appear).","de Groote, Philippe. 2006. Towards a montagovian account of dynamics. In Semantics and Linguistic Theory XVI.","Jacobson, Pauline. 1999. Towards a variable-free semantics. Linguistics and Philosophy 22(2). 117-185.","M. Felleisen. 1988. The theory and practice of first-class prompts. In J. Ferrante and P. Mager, editors, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, pages 180-190, San Diego, California, Jan. 1988. ACM Press.","Montague, Richard. 1970. The Proper Treatment of Quantification in English. In R. Thomason (ed). Formal Philosophy: Selected Papers of Richard Montague,247-270. New Haven:Yale.","Partee, Barbara H. & Mats Rooth. 1983. Generalized conjunction and type ambiguity. In Rainer Buerle, Christoph Schwarze & Arnim von Stechow. (eds.), Meaning, use, and interpretation of language, 361-383.Walter de Gruyter and Co.","Shan, Chung-chieh and Chris Barker. 2006. Explaining crossover and superiority as left-to-right evaluation. Linguistics and Philosophy 29.1:91-134.","Shan, Chung-chieh. 2005. Linguistic side effects. Ph.D. thesis, Harvard University.","Steedman, Mark. 2000. The syntactic process. MIT Press. 502"]}]}