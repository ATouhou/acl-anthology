{"sections":[{"title":"","paragraphs":["Proceedings of Recent Advances in Natural Language Processing, pages 389–395, Hissar, Bulgaria, 7-13 September 2013."]},{"title":"The Unit Graphs Framework: Foundational Concepts and Semantic Consequence Maxime Lefranco̧is and Fabien Gandon Wimmics, Inria, I3S, CNRS, UNSA 2004 rte des Lucioles, BP. 93, 06902 Sophia Antipolis, France {maxime.lefrancois,fabien.gandon}@inria.fr Abstract","paragraphs":["We are interested in a graph-based Knowledge Representation formalism that would allow for the representation, manipula-tion, query, and reasoning over dependency structures, and linguistic knowledge of the Explanatory and Combinatorial Dictionary in the Meaning-Text Theory framework. Neither the semantic web formalisms nor the conceptual graphs appear to be suitable for this task, and this led to the introduction of the new Unit Graphs framework. This paper first introduces the foundational concepts of this framework: Unit Graphs are defined over a support that contains: i) a hierarchy of unit types which is strongly driven by their actantial structure, ii) a hierarchy of circumstantial symbols, and iii) a set of unit identifiers. Then, this paper provides all of these objects with a model semantics that enables to define the notion of semantic consequence between Unit Graphs."]},{"title":"1 Introduction","paragraphs":["We are interested in the ability to reason over dependency structures and linguistic knowledge of the Explanatory and Combinatorial Dictionary (ECD), which is the lexicon at the core of the Meaning-Text Theory (MTT) (Mel’čuk, 2006).","Some formalisation works have been led on the ECD. For instance Kahane and Polguère, 2001) proposed a formalization of Lexical Functions, and the Definiens project (Barque and Polguère, 2008; Barque et al., 2010) aims at formalizing lexicographic definitions with genus and specific differences for the TLFi1",". Adding to these formalization works, the goal of the Unit Graphs formalism","1","Trésor de la Langue Franca̧ise informatisé, http:// atilf.atilf.fr is to propose a formalization from a knowledge engineering perspective, compatible with standard Knowledge Representation (KR) formalisms. The term formalization here means not only make nonambiguous, but also make operational, i.e., such that it supports logical operations (e.g., knowledge manipulation, query, reasoning). We thus adopt a knowledge engineering approach applied to the domain of the MTT.","At first sight, two existing KR formalisms seemed interesting for representing dependency structures: semantic web formalisms (RDF/S, OWL, SPARQL), and Conceptual Graphs (CGs) (Sowa, 1984; Chein and Mugnier, 2008). Both formalisms are based on directed labelled graph structures, and some research has been done towards using them to represent dependency structures and knowledge of the lexicon (OWL in (Lefranco̧is and Gandon, 2011; Boguslavsky, 2011), CGs at the conceptual level in (Bohnet and Wanner, 2010)). Yet Lefranco̧is, 2013) showed that neither of these KR formalisms can represent linguistic predicates. As the CG formalism is the closest to the semantic networks, the following choice has been made (Lefranco̧is, 2013): Modify the CGs formalism basis, and define transformations to the RDF syntax for sharing, and querying knowledge. As we are to represents linguistic units of different nature (e.g., semantic units, lexical units, grammatical units, words), term unit has been chosen to be used in a generic manner, and the result of this adaptation is thus the Unit Graphs (UGs) framework. The valency-based predicates are represented by unit types, and are described in a structure called the unit types hierarchy. Unit types specify through actant slots and signatures how their instances (i.e., units) may be linked to other units in a UG. Unit Graphs are then defined over a support that contains: i) a hierarchy of unit types which is strongly driven by their actantial structure, ii) a hierarchy of circumstantial sym-389 bols, and iii) a set of unit identifiers.","Apart from giving an overview foundational concepts of the UGs framework, the main goal of this paper is to answer the following research question: What semantics can be attributed to UGs, and how can we define the entailment problem for UGs ?","The rest of this paper is organized as follows. Section 2 overviews the UGs framework: the hierarchy of unit types (§2.1), the hierarchy of circumstantial symbols (§2.2), and the Unit Graphs (§2.3). Then, section 3 provides all of these mathematical objects with a model, and finally the notion of semantic consequence between UGs is introduced (§3.4)."]},{"title":"2 Background: overview of the Unit Graphs Framework","paragraphs":["For a specific Lexical Unit L, (Mel’čuk, 2004, p.5) distinguishes considering L in language (i.e., in the lexicon), or in speech (i.e., in an utterance). KR formalisms and the UGs formalism also make this distinction using types. In this paper and in the UGs formalism, there is thus a clear distinction between units (e.g., semantic unit, lexical unit), which will be represented in the UGs, and their types (e.g., semantic unit type, lexical unit type), which are roughly classes of units for which specific features are shared. It is those types that specify through actant slots and signatures how their instances (i.e., units) are to be linked to other units in a UG. 2.1 Hierarchy of Unit Types Unit types and their actantial structure are described in a structure called hierarchy, that specifies how units may, must, or must not be interlinked in a UG. Definition 2.1. A hierarchy of unit types is denoted T and is defined by a tuple: T def = (TD, ST , γγγ, γγγ1, γγγ0, CA, ⊥⊓","A, {ςςςt}t∈T)","This structure has been thoroughly described in (Lefranco̧is and Gandon, 2013a; Lefranco̧is, 2013). Let us overview its components.","TD is a set of declared Primitive Unit Types (PUTs). This set is partitioned into linguistic PUTs of different nature (e.g., deep semantic, semantic, lexical). ST is a set of Actant Symbols (ASymbols). γγγ (resp1. γγγ1, resp2. γγγ0) assigns to","every s ∈ ST its radix2","(resp1. obligat3",", resp2.","prohibet4 ) unit type γγγ(s) (resp1. γγγ","1(s), resp2. γγγ0(s)) that introduces (resp1. makes obligatory, resp2. makes prohibited) an Actant Slot (ASlot) of symbol s. The set of PUTs is denoted T and defined as the disjoint union of TD, the ranges of γγγ, γγγ1 and γγγ0, plus the prime universal PUT ⊤ and the prime absurd PUT ⊥ (eq. 1). T","def","= TD ·∪ γγγ(ST ) ·∪ γγγ1(ST ) ·∪ γγγ0(ST ) ·∪{⊥, ⊤}","(1)","T is then pre-ordered by a relation ≲ which is computed from the set CA ⊆ T2","of asserted PUTs comparisons. t1 ≲ t2 models the fact that the PUT t1 is more specific than the PUTt2. Then a unit type has a set (that may be empty) of ASlots, whose symbols are chosen in the set ST . Moreover, ASlots may be obligatory, prohibited, or optional. The set of ASlots (resp1. obligatory ASlots, resp2. prohibited ASlots, resp3. optional ASlots) of a PUT is thus defined as the set of their symbols ααα(t) ⊆ ST (resp1. ααα1(t), resp2. ααα0(t), resp3. ααα?(t)).","The set of ASlots (resp1. obligatory ASlots, resp2. prohibited ASlots) of a PUT t ∈ T is defined as the set of ASymbol whose radix (resp1. obligat, resp2. prohibet) is more general or equivalent to t, and the set of optional ASlots of a PUT t is the set of ASlots that are neither obligatory nor prohibited. The number of ASlots of a PUT is denoted its valency. {ςςςt}t∈T, the set of signatures of PUTs, is a set of functions. For all PUT t, ςςςt is a function that associates to every ASlot s of t a set of PUT ςςςt(s) that characterises the type of the unit that fills this slot. Signatures participate in the specialization of the actantial structure of PUTs, which means that if t1 ≲ t2 and s is a common ASlot of t1 and t2, the signature of t1 for s must be more specific or equivalent than that of t2. Hence t1 ≲ t2 implies that the actancial structure of t1 is more specific than the actantial structure of t2. Now a unit type may consist of several conjoint PUTs. We introduce the set T∩","of possible Conjunctive Unit Types (CUTs) over T as the power-2 radix is a latin word that means (","root)",". 3 obligat is the conjugated form of the latin verb obligo, 3p","sing. indic., (","it makes mandatory)",". 4 prohibet is the conjugated form of the latin verb pro-","hibeo, 3p sing. indic., (","it prohibits)",". 390 set5","of T. The set ⊥⊓","A is the set of declared absurd CUTs that can not be instantiated. The definition of the actancial structure of PUTs is naturally extended to CUTs as follows:","ααα∩ (t∩ ) def","= ⋃ t∈t∩ααα(t) (2)","ααα∩","1 (t∩",") def","= ⋃ t∈t∩ααα1(t) (3)","ααα∩","0 (t∩",") def","= ⋃ t∈t∩ααα0(t) (4)","ααα∩","? (t∩",") def","= ααα∩ (t∩ ) − ααα∩","1 (t∩",") − ααα∩","0 (t∩",") (5) ςςς∩ t∩(s) def = ⋃","t∈t∩ |s∈ααα(t)ςςςt(s) (6)","Finally the pre-order ≲ over T is extended to a pre-order","∩","≲ over T∩","as defined by Lefranco̧is and Gandon, 2013a). Lefranco̧is and Gandon, 2013b) proved that in the hierarchy of unit types, if t∩ 1 ∩","≲ t∩ 2 then the actantial structure of t∩","1 is more specific than that of t∩","2 , except for some degenerated cases. Thus as one goes down the hierarchy of unit types, an ASlot with symbol s is introduced by the radix {γγγ(s)} and first defines an optional ASlot for any unit type t∩","more specific than {γγγ(s)}, as long as t∩","is not more specific than the obligat {γγγ1(s)} (resp. the prohibet {γγγ0(s)}) of s. If that happens, the ASlot becomes obligatory (resp. prohibited). Moreover, the signature of an ASlot may only become more specific. 2.2 Hierarchy of Circumstantial Symbols Unit types specify how unit nodes are linked to other unit nodes in the UGs. As for any slot in a predicate, one ASlot of a unit may be filled by only one unit at a time. Now, one may also encounter dependencies of another type in some dependency structures: circumstantial dependencies (Mel’čuk, 2004). Circumstantial relations are considered of type instance-instance contrary to actantial relations. Example of such relations are the deep syntactic representation relations ATTR, COORD, AP-PEND of the MTT, but we may also define other such relations to represent the link between a lexical unit and its sense for instance.","We thus introduce a finite set of so-called Circumstantial Symbols (CSymbols) SC which is a set of binary relation symbols. In order to classify SC in sets and subsets, we introduce a partial order C ≲ over SC. C ≲ is the reflexo-transitive clo-","sure of a set of asserted comparisons CSC ⊆ T2",". 5 The powerset of X is the set of all subsets of X: 2X Finally, to each CSymbol is assigned a signature that specifies the type of units that are linked through a relation having this symbol. The set of signatures of CSymbol {σσσs}s∈SC is a set of couples of CUTs: {(domain(s), range(s))}s∈SC . As one goes down the hierarchy of PUTs, we impose that the signature of a CSymbol may only become more specific (eq. 7). s1 ≲ s2 ⇒ σσσ(s1) ∩ ≲ σσσ(s2) (7)","We may hence introduce the hierarchy of CSymbols: Definition 2.2. The hierarchy of CSymbols, denoted C","def","= (SC, CSC , T , {σσσs}s∈SC ), is composed of a finite set of CSymbols SC, a set of declared comparisons of CSymbol CSC , a hierarchy of CUTs T , and a set of signatures of the CSymbols {σσσs}s∈SC . 2.3 Definition of Unit Graphs (UGs) The UGs represent different types of dependency structures. Parallel with the Conceptual Graphs, UGs are defined over a so-calledsupport. Definition 2.3. A UGs support is denoted S","def","= (T , C, M) and is composed of a hierarchy of unit types T , a hierarchy of circumstantial symbols C, and a set of unit identifiers M. Every element of M identifies a specific unit, but multiple elements of M may identify the same unit.","In a UG, unit nodes that are typed and marked are interlinked by dependency relations that are either actantial or circumstantial. Definition 2.4. A UG G defined over a UG-support S is a tuple denoted G","def","= (U, l, A, C, Eq) where U is the set of unit nodes, l is a labelling mapping over U , A and C are respectively actantial and circumstantial triples, and Eq is a set of asserted unit node equivalences.","Let us detail the components of G.","U is the set of unit nodes. Every unit node represents a specific unit, but multiple unit nodes may represent the same unit. Unit nodes are typed and marked so as to respectively specify what CUT they have and what unit they represent. The marker of a unit node is a set of unit identifiers for mathematical reasons. The set of unit node markers is denoted M∩","and is the powerset5","of M. If a unit node is marked by ∅, it is said to be generic, and the represented unit is unknown. On the other hand, if a unit node is marked {m1, m2}, then the 391 unit identifiers m1 and m2 actually identify the same unit. l is thus a labelling mapping over U that assigns to each unit node u ∈ U a couple l(u) = (t∩",", m∩",") ∈ T∩","× M∩","of a CUT and a unit node marker. We denote t∩","= type(u) and m∩","= marker(u).","A is the set of actantial triples (u, s, v) ∈ U × ST × U . For all a = (u, s, v) ∈ A, the unit represented by v fills the ASlot s of the unit represented by u. We denote u = governor(a), s = symbol(a) and v = actant(a). We also denote arc(a) = (u, v).","C is the set of circumstantial triples (u, s, v) ∈ U × SC × U . For all c = (u, s, v) ∈ C, the unit represented by u governs the unit represented by v with respect to s. We denote u = governor(c), s = symbol(c) and v = circumstantial(c). We also denote arc(c) = (u, v).","Eq ⊆ U 2","is the set of so-called asserted unit node equivalences. For all (u1, u2) ∈ U 2",", (u1, u2) ∈ Eq means that u1 and u2 represent the same unit. The Eq relation is not an equivalence relation over unit nodes6",". We thus distinguish explicit and implicit knowledge.","UGs so defined are the core dependency structures of the UGs mathematical framework. On top of these basic structures, one may define for instance rules and lexicographic definitions. Due to space limitation we will not introduce such advanced aspects of the UGs formalism, and we will provide a model to UGs defined over a support that does not contain definitions of PUTs."]},{"title":"3 Model Semantic for UGs 3.1 Model of a Support","paragraphs":["In this section we will provide the UGs framework with a model semantic based on a relational algebra. Let us first introduce the definition of the model of a support. Definition 3.1 (Model of a support). Let S = (T , C, M) be a support. A model of S is a couple M = (D, δ). D is a set called the domain of M that contains a special element denoted • that represents nothing, plus at least one other element. δ is denoted the interpretation function and must be such that: • M is a model of T ; • M is a model of C; 6 An equivalent relation is a reflexive, symmetric, and","transitive relation. • ∀m ∈ M, δ(m) ∈ D \\ •;","This definition requires the notion of model of a unit types hierarchy, and model of a CSymbols hierarchy. We will sequentially introduce these no-tions in the following sections. 3.2 Model of a Hierarchy of Unit Types The interpretation function δ associates with any PUT t ∈ T a relation δ({t}) of arity 1 + valency(t) with the following set of attributes (eq. 8):","• a primary attribute denoted 0 (0 /∈ ST ) that provides {t} with the semantics of a class;","• an attribute for each of its ASlot in ααα(t) that provides {t} with the dual semantics of a relation. ∀t ∈ T, δ({t}) ⊆ D1+valency(t) with attributes {0} ∪ ααα(t) (8)","Every tuple r of δ({t}) can be identified to a mapping, still denoted r, from the attribute set {0} ∪ ααα(t) to the universe D. r describes how a unit of type {t} is linked to its actants. r(0) is the unit itself, and for all s ∈ ααα(t), r(s) is the unit that fills ASlot s of r(0). If r(s) = •, then there is no unit that fills ASlot s of r(0). A given unit may be described at most once in δ({t}), so 0 is a unique key in the interpretation of every PUT: ∀t ∈ T, ∀r1, r2 ∈ δ({t}), r1(0) = r2(0) ⇒ r1 = r2 (9)","⊤ must be the type of every unit, except for the special nothing element •, and ⊥ must be the type of no unit. As the projection π0δ({t}) on the main attribute 0 represents the set of units having type {t}, equations 10 and 11 model these restrictions. π0δ({⊤}) = D \\ •; (10) δ({⊥}) = ∅ (11)","The ASlot s of the obligat γγγ1(s) must be filled by some unit, but no unit may fill ASlot s of the prohibet γγγ0(s). As for every s ∈ ααα(t), the projection πsδ({t}) represents the set of units that fill the ASlot s of some unit that has type t, equations 12 and 13 model these restrictions. 392 ∀s ∈ ST , • /∈ πsδ({γγγ1(s)}); (12) ∀s ∈ ST , πsδ({γγγ0(s)}) = {•}; (13)","Now if a unit i ∈ D is of type {t1} and t1 is more specific thant2, then the unit is also of type {t2}, and the description of i in δ({t2}) must correspond to the description of i in δ({t1}). Equivalently, the projection of δ({t1}) on the attributes of δ({t2}) must be a sub-relation of δ({t2}): ∀t1 ≲ t2, π{0}∪ααα(t2)δ({t1}) ⊆ δ({t2}) (14) The interpretation of a CUT is the join of the interpretation of its constituting PUTs, except for ∅ which has the same interpretation as {⊤}, and asserted absurd CUTs t∩","∈ ⊥⊓","A that contain no unit.","∀t∩","∈ T∩","\\ ∅ − ⊥⊓","A,","δ(t∩ ) =▷◁ t∈t∩ δ({t}) (15)","δ(∅) = δ({⊤}) (16)","∀t∩ ∈ ⊥⊓","A, δ(t∩",") = ∅ (17)","Finally, for every unit of type {t} and for every ASlot of t, the unit that fills ASlots must be either nothing, or a unit of type ςςςt(s): ∀t ∈ T, ∀s ∈ ααα(t), πsδ({t}) \\ • ⊆ π0δ(ςςςt(s)) (18)","We may now define the model of a unit type hierarchy. Definition 3.2. Let be a unit types hierarchy T = (TD, ST , γγγ, γγγ1, γγγ0, CA, ⊥⊓","A, {ςςςt}t∈T). A model of T is a couple M = (D, δ) such that the interpretation function δ satisfies equations 8 to 18.","3.3 Model of a Hierarchy of Circumstantial Symbols So as to be also a model of a CSymbols hierarchy, the interpretation function δ must be extended and further restricted as follows.","The interpretation function δ associates with every CSymbol s ∈ SC a binary relation δ(s) with two attributes : gov which stands for governor, and circ which stands for circumstantial.","∀s ∈ SC, δ(s) ⊆ (D \\ •)2 , a relation with attributes {gov, circ}; (19)","Parallel with binary relations in the semantic model of the CGs formalism, if a CSymbol s1 is more specific than another CSymbol s2, then the interpretation of s1 must be included in the interpretation of s2. ∀s1, s2 ∈ SC, s1 C ≲ s2 ⇒ δ(s1) ⊆ δ(s2) (20)","Finally, the type of the units that are linked through a CSymbol s must correspond to the signature of s. ∀s ∈ SC, πgovδ(s) ⊆ π0δ(domain(s)); (21) ∀s ∈ SC, πcircδ(s) ⊆ π0δ(range(s)); (22)","We may thus define the model of a CSymbols hierarchy. Definition 3.3(Model of a Circumstantial Dependency Symbols Hierarchy). Let be a CSymbols hierarchy C = (SC, CSC , T , {σσσs}s∈SC ). A model of C is a model M = (D, δ) of T such that the interpretation function δ satisfies equations 19 to 22.","3.4 Model Satisfying a UG and Semantic Consequence Now that the model of a support is fully defined, we may define the model of a UG. A model of a UG is a model of the support on which it is defined, augmented with an assignment mapping over unit nodes that assigns to every unit node an element of D. Definition 3.4 (Model of a UG). Let G = (U, l, A, C, Eq) be a UG defined over a support S. A model of G is a triple (D, δ, β) where: • (D, δ) is a model of S; • β, called an assignment, is a mapping from U","to D.","So as to satisfy the UG, the assignment β must satisfy a set of requirements. First, if a unit node u ∈ U has a marker m ∈ marker(u), then the assignment of u must correspond to the interpretation of m. ∀u ∈ U, ∀m ∈ marker(u), β(u) = δ(m) (23) 393","Then, the assignment of any unit node u must belong to the set of units that have type type(u). ∀u ∈ U, β(u) ∈ π0δ(type(u)) (24)","For every actantial triple (u, s, v) ∈ A, and as {γγγ(s)} is the CUT that introduces a ASlot s, the interpretation δ({γγγ(s)}) must reflect the fact that the unit represented by v fills the actant slot s of the unit represented by u. ∀(u, s, v) ∈ A, π0,sδ({γγγ(s)}) = {(β(u), β(v))} (25)","Similarly, for every circumstantial triple (u, s, v) ∈ C, the interpretation of s must reveal the fact that the unit represented by v depends on the unit represented by u with respect to s. ∀(u, s, v) ∈ C, (β(u), β(v)) ∈ δ(s) (26)","Finally, if two unit nodes are asserted to be equivalent, then the unit they represent are the same and their assignment must be the same. ∀(u1, u2) ∈ Eq, β(u1) = β(u2) (27)","We may now define the notion of satisfaction of a UG by a model. Definition 3.5(Model satisfying a UG). Let G = (U, l, A, C, Eq) be a UG defined over a support S, and (D, δ, β) be a model of G. (D, δ, β) is a model satisfying G, noted (D, δ, β) ⊨m G, if β is an assignment that satisfies equations 23 to 27.","Using the notion of a support model and a UG model it is possible to define an entailment relation between UGs as follows. Definition 3.6 (Entailment and equivalence). Let H and G be two UGs defined over a supportS.","• G entails H, or H is a semantic consequence of G, noted G ⊨m H, if and only if for any model (D, δ) of S and for any assignment βG such that (D, δ, βG) ⊨m G, then there exists an assignment βH of the unit nodes in H such that (D, δ, βH ) ⊨m H.","• H and G are model-equivalent, noted H ≡m G, if and only if H ⊨m G and G ⊨m H."]},{"title":"4 Conclusion","paragraphs":["We thus studied how to formalize, in a knowledge engineering perspective, the dependency structures and the valency-based predicates. We gave an overview of the foundational concepts of the new graph-based Unit Graphs KR formalism. The valency-based predicates are represented by unit types, and are described in a unit types hierarchy. Circumstantial relations are another kind of dependency relation that are described in a hierarchy, and along with a set of unit identifiers these two structures form a UGs support on which UGs may be defined.","We then provided these foundational structures with a model, in the logical sense, using a relational algebra. We dealt with the problem of prohibited and optional actant slots by adding a special nothing element • in the domain of the model, and listed the different equations that the interpretation function must satisfy so that a model satisfies a UG. We finally introduced the notion of semantic consequence, which is a first step towards reasoning with dependency structure in the UGs framework.","We identify three future directions of research.","• We did not introduce the definition of PUTs that are to model lexicographic definitions in the ECD and shall be included to the support. The definition of the model semantics of the UGs shall be completed so as to take these into account.","• A UG represents explicit knowledge that only partially define the interpretations of unit types, CSymbols, and unit identifiers. One need to define algorithms to complete the model, so as to check the entailment of a UG by another.","• We know from ongoing works that such an algorithm may lead to an infinite domain. A condition over the unit types hierarchy must be found so as to ensure that the model is de-cidable for a finite UG. 394"]},{"title":"References","paragraphs":["Barque, L., Nasr, A., and Polguère, A. (2010). From the Definitions of the ’Trésor de la Langue Franca̧ise’ To a Semantic Database of the French Language. In Fryske Akademy, editor, Proceedings of the XIV Euralex International Congress, Fryske Akademy, pages 245–252, Leeuwarden, Pays-Bas. Anne Dykstra et Tanneke Schoonheim, dir.","Barque, L. and Polguère, A. (2008). Enrichissement formel des définitions du Trésor de la Langue Franca̧ise informatisé (TLFi) dans une perspective lexicographique. Lexique, 22.","Boguslavsky, I. (2011). Semantic Analysis Based on Linguistic and Ontological Resources. In Boguslavsky, I. and Wanner, L., editors, Proceedings of the 5th International Conference on Meaning-Text Theory (MTT’2011), pages 25–36, Barcelona, Spain. INALCO.","Bohnet, B. and Wanner, L. (2010). Open source graph transducer interpreter and grammar development environment. In Proceedings of the Seventh International Conference on Language Resources and Evaluation (LREC’10), pages 19–21, Valletta, Malta. European Language Resources Association (ELRA).","Chein, M. and Mugnier, M.-L. (2008). Graph-based Knowledge Representation: Computational Foundations of Conceptual Graphs. Springer-Verlag New York Incorporated.","Kahane, S. and Polguère, A. (2001). Formal foundation of lexical functions. In Proceedings of ACL/EACL 2001 Workshop on Collocation, pages 8–15.","Lefranco̧is, M. (2013). Représentation des connaissances du DEC: Concepts fondamentaux du for-malisme des Graphes d’Unités. In Actes de la 15ème Rencontre des Étudiants Chercheurs en In-formatique pour le Traitement Automatique des Langues (RECITAL’2013), pages 164–177, Les Sables d’Olonne, France.","Lefranco̧is, M. and Gandon, F. (2011). ILexicOn: Toward an ECD-Compliant Interlingual Lexical On-tology Described with Semantic Web Formalisms. In Boguslavsky, I. and Wanner, L., editors, Proceedings of the 5th International Conference on Meaning-Text Theory (MTT’2011), pages 155–164, Barcelona, Spain. INALCO.","Lefranco̧is, M. and Gandon, F. (2013a). The Unit Graphs Framework: A graph-based Knowledge Representation Formalism designed for the Meaning-Text Theory. In Proceedings of the 6th International Conference on Meaning-Text Theory (MTT’2013), Prague, Czech Republic.","Lefranco̧is, M. and Gandon, F. (2013b). The Unit Graphs Mathematical Framework. Research Report RR-8212, Inria.","Mel’čuk, I. (2004). Actants in Semantics and Syntax I: Actants in Semantics. Linguistics, 42(1):247–291.","Mel’čuk, I. (2006). Explanatory combinatorial dictionary. Open Problems in Linguistics and Lexicography, pages 225–355.","Sowa, J. F. (1984). Conceptual structures: information processing in mind and machine. System programming series. Addison-Wesley Pub., Reading, MA. 395"]}]}